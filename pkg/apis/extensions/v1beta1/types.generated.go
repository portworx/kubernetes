/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1beta1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_resource.Quantity
		var v1 pkg1_unversioned.TypeMeta
		var v2 pkg2_v1.ObjectMeta
		var v3 pkg3_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [3]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = len(x.Selector) != 0
			yyq13[2] = x.TargetSelector != ""
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(3)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Selector, false, e)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[2] {
					yym21 := z.EncBinary()
					_ = yym21
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetSelector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq13[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetSelector))
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym23 := z.DecBinary()
	_ = yym23
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct24 := r.ContainerType()
		if yyct24 == codecSelferValueTypeMap1234 {
			yyl24 := r.ReadMapStart()
			if yyl24 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl24, d)
			}
		} else if yyct24 == codecSelferValueTypeArray1234 {
			yyl24 := r.ReadArrayStart()
			if yyl24 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl24, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys25Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys25Slc
	var yyhl25 bool = l >= 0
	for yyj25 := 0; ; yyj25++ {
		if yyhl25 {
			if yyj25 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys25Slc = r.DecodeBytes(yys25Slc, true, true)
		yys25 := string(yys25Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys25 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv27 := &x.Selector
				yym28 := z.DecBinary()
				_ = yym28
				if false {
				} else {
					z.F.DecMapStringStringX(yyv27, false, d)
				}
			}
		case "targetSelector":
			if r.TryDecodeAsNil() {
				x.TargetSelector = ""
			} else {
				x.TargetSelector = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys25)
		} // end switch yys25
	} // end for yyj25
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj30 int
	var yyb30 bool
	var yyhl30 bool = l >= 0
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv32 := &x.Selector
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else {
			z.F.DecMapStringStringX(yyv32, false, d)
		}
	}
	yyj30++
	if yyhl30 {
		yyb30 = yyj30 > l
	} else {
		yyb30 = r.CheckBreak()
	}
	if yyb30 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetSelector = ""
	} else {
		x.TargetSelector = string(r.DecodeString())
	}
	for {
		yyj30++
		if yyhl30 {
			yyb30 = yyj30 > l
		} else {
			yyb30 = r.CheckBreak()
		}
		if yyb30 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj30-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym35 := z.EncBinary()
		_ = yym35
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep36 := !z.EncBinary()
			yy2arr36 := z.EncBasicHandle().StructToArray
			var yyq36 [5]bool
			_, _, _ = yysep36, yyq36, yy2arr36
			const yyr36 bool = false
			yyq36[0] = x.Kind != ""
			yyq36[1] = x.APIVersion != ""
			yyq36[2] = true
			yyq36[3] = true
			yyq36[4] = true
			var yynn36 int
			if yyr36 || yy2arr36 {
				r.EncodeArrayStart(5)
			} else {
				yynn36 = 0
				for _, b := range yyq36 {
					if b {
						yynn36++
					}
				}
				r.EncodeMapStart(yynn36)
				yynn36 = 0
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[0] {
					yym38 := z.EncBinary()
					_ = yym38
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq36[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[1] {
					yym41 := z.EncBinary()
					_ = yym41
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq36[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[2] {
					yy44 := &x.ObjectMeta
					yym45 := z.EncBinary()
					_ = yym45
					if false {
					} else if z.HasExtensions() && z.EncExt(yy44) {
					} else {
						z.EncFallback(yy44)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq36[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy46 := &x.ObjectMeta
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else if z.HasExtensions() && z.EncExt(yy46) {
					} else {
						z.EncFallback(yy46)
					}
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[3] {
					yy49 := &x.Spec
					yy49.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq36[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy50 := &x.Spec
					yy50.CodecEncodeSelf(e)
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq36[4] {
					yy52 := &x.Status
					yy52.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq36[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy53 := &x.Status
					yy53.CodecEncodeSelf(e)
				}
			}
			if yyr36 || yy2arr36 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym54 := z.DecBinary()
	_ = yym54
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct55 := r.ContainerType()
		if yyct55 == codecSelferValueTypeMap1234 {
			yyl55 := r.ReadMapStart()
			if yyl55 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl55, d)
			}
		} else if yyct55 == codecSelferValueTypeArray1234 {
			yyl55 := r.ReadArrayStart()
			if yyl55 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl55, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys56Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys56Slc
	var yyhl56 bool = l >= 0
	for yyj56 := 0; ; yyj56++ {
		if yyhl56 {
			if yyj56 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys56Slc = r.DecodeBytes(yys56Slc, true, true)
		yys56 := string(yys56Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys56 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv59 := &x.ObjectMeta
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv61 := &x.Spec
				yyv61.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv62 := &x.Status
				yyv62.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys56)
		} // end switch yys56
	} // end for yyj56
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj63 int
	var yyb63 bool
	var yyhl63 bool = l >= 0
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv66 := &x.ObjectMeta
		yym67 := z.DecBinary()
		_ = yym67
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv66) {
		} else {
			z.DecFallback(yyv66, false)
		}
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv68 := &x.Spec
		yyv68.CodecDecodeSelf(d)
	}
	yyj63++
	if yyhl63 {
		yyb63 = yyj63 > l
	} else {
		yyb63 = r.CheckBreak()
	}
	if yyb63 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv69 := &x.Status
		yyv69.CodecDecodeSelf(d)
	}
	for {
		yyj63++
		if yyhl63 {
			yyb63 = yyj63 > l
		} else {
			yyb63 = r.CheckBreak()
		}
		if yyb63 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj63-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym70 := z.EncBinary()
		_ = yym70
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep71 := !z.EncBinary()
			yy2arr71 := z.EncBasicHandle().StructToArray
			var yyq71 [2]bool
			_, _, _ = yysep71, yyq71, yy2arr71
			const yyr71 bool = false
			yyq71[0] = x.Kind != ""
			yyq71[1] = x.APIVersion != ""
			var yynn71 int
			if yyr71 || yy2arr71 {
				r.EncodeArrayStart(2)
			} else {
				yynn71 = 0
				for _, b := range yyq71 {
					if b {
						yynn71++
					}
				}
				r.EncodeMapStart(yynn71)
				yynn71 = 0
			}
			if yyr71 || yy2arr71 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq71[0] {
					yym73 := z.EncBinary()
					_ = yym73
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq71[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym74 := z.EncBinary()
					_ = yym74
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr71 || yy2arr71 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq71[1] {
					yym76 := z.EncBinary()
					_ = yym76
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq71[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym77 := z.EncBinary()
					_ = yym77
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr71 || yy2arr71 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym78 := z.DecBinary()
	_ = yym78
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct79 := r.ContainerType()
		if yyct79 == codecSelferValueTypeMap1234 {
			yyl79 := r.ReadMapStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl79, d)
			}
		} else if yyct79 == codecSelferValueTypeArray1234 {
			yyl79 := r.ReadArrayStart()
			if yyl79 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl79, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys80Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys80Slc
	var yyhl80 bool = l >= 0
	for yyj80 := 0; ; yyj80++ {
		if yyhl80 {
			if yyj80 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys80Slc = r.DecodeBytes(yys80Slc, true, true)
		yys80 := string(yys80Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys80 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys80)
		} // end switch yys80
	} // end for yyj80
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj83 int
	var yyb83 bool
	var yyhl83 bool = l >= 0
	yyj83++
	if yyhl83 {
		yyb83 = yyj83 > l
	} else {
		yyb83 = r.CheckBreak()
	}
	if yyb83 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj83++
	if yyhl83 {
		yyb83 = yyj83 > l
	} else {
		yyb83 = r.CheckBreak()
	}
	if yyb83 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj83++
		if yyhl83 {
			yyb83 = yyj83 > l
		} else {
			yyb83 = r.CheckBreak()
		}
		if yyb83 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj83-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SubresourceReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym86 := z.EncBinary()
		_ = yym86
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep87 := !z.EncBinary()
			yy2arr87 := z.EncBasicHandle().StructToArray
			var yyq87 [4]bool
			_, _, _ = yysep87, yyq87, yy2arr87
			const yyr87 bool = false
			yyq87[0] = x.Kind != ""
			yyq87[1] = x.Name != ""
			yyq87[2] = x.APIVersion != ""
			yyq87[3] = x.Subresource != ""
			var yynn87 int
			if yyr87 || yy2arr87 {
				r.EncodeArrayStart(4)
			} else {
				yynn87 = 0
				for _, b := range yyq87 {
					if b {
						yynn87++
					}
				}
				r.EncodeMapStart(yynn87)
				yynn87 = 0
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq87[0] {
					yym89 := z.EncBinary()
					_ = yym89
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq87[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq87[1] {
					yym92 := z.EncBinary()
					_ = yym92
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq87[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym93 := z.EncBinary()
					_ = yym93
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq87[2] {
					yym95 := z.EncBinary()
					_ = yym95
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq87[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym96 := z.EncBinary()
					_ = yym96
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq87[3] {
					yym98 := z.EncBinary()
					_ = yym98
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq87[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subresource"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym99 := z.EncBinary()
					_ = yym99
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subresource))
					}
				}
			}
			if yyr87 || yy2arr87 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SubresourceReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym100 := z.DecBinary()
	_ = yym100
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct101 := r.ContainerType()
		if yyct101 == codecSelferValueTypeMap1234 {
			yyl101 := r.ReadMapStart()
			if yyl101 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl101, d)
			}
		} else if yyct101 == codecSelferValueTypeArray1234 {
			yyl101 := r.ReadArrayStart()
			if yyl101 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl101, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SubresourceReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys102Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys102Slc
	var yyhl102 bool = l >= 0
	for yyj102 := 0; ; yyj102++ {
		if yyhl102 {
			if yyj102 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys102Slc = r.DecodeBytes(yys102Slc, true, true)
		yys102 := string(yys102Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys102 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "subresource":
			if r.TryDecodeAsNil() {
				x.Subresource = ""
			} else {
				x.Subresource = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys102)
		} // end switch yys102
	} // end for yyj102
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SubresourceReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj107 int
	var yyb107 bool
	var yyhl107 bool = l >= 0
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj107++
	if yyhl107 {
		yyb107 = yyj107 > l
	} else {
		yyb107 = r.CheckBreak()
	}
	if yyb107 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subresource = ""
	} else {
		x.Subresource = string(r.DecodeString())
	}
	for {
		yyj107++
		if yyhl107 {
			yyb107 = yyj107 > l
		} else {
			yyb107 = r.CheckBreak()
		}
		if yyb107 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj107-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CPUTargetUtilization) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym112 := z.EncBinary()
		_ = yym112
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep113 := !z.EncBinary()
			yy2arr113 := z.EncBasicHandle().StructToArray
			var yyq113 [1]bool
			_, _, _ = yysep113, yyq113, yy2arr113
			const yyr113 bool = false
			var yynn113 int
			if yyr113 || yy2arr113 {
				r.EncodeArrayStart(1)
			} else {
				yynn113 = 1
				for _, b := range yyq113 {
					if b {
						yynn113++
					}
				}
				r.EncodeMapStart(yynn113)
				yynn113 = 0
			}
			if yyr113 || yy2arr113 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym115 := z.EncBinary()
				_ = yym115
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPercentage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym116 := z.EncBinary()
				_ = yym116
				if false {
				} else {
					r.EncodeInt(int64(x.TargetPercentage))
				}
			}
			if yyr113 || yy2arr113 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CPUTargetUtilization) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym117 := z.DecBinary()
	_ = yym117
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct118 := r.ContainerType()
		if yyct118 == codecSelferValueTypeMap1234 {
			yyl118 := r.ReadMapStart()
			if yyl118 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl118, d)
			}
		} else if yyct118 == codecSelferValueTypeArray1234 {
			yyl118 := r.ReadArrayStart()
			if yyl118 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl118, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CPUTargetUtilization) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys119Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys119Slc
	var yyhl119 bool = l >= 0
	for yyj119 := 0; ; yyj119++ {
		if yyhl119 {
			if yyj119 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys119Slc = r.DecodeBytes(yys119Slc, true, true)
		yys119 := string(yys119Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys119 {
		case "targetPercentage":
			if r.TryDecodeAsNil() {
				x.TargetPercentage = 0
			} else {
				x.TargetPercentage = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys119)
		} // end switch yys119
	} // end for yyj119
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CPUTargetUtilization) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj121 int
	var yyb121 bool
	var yyhl121 bool = l >= 0
	yyj121++
	if yyhl121 {
		yyb121 = yyj121 > l
	} else {
		yyb121 = r.CheckBreak()
	}
	if yyb121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPercentage = 0
	} else {
		x.TargetPercentage = int32(r.DecodeInt(32))
	}
	for {
		yyj121++
		if yyhl121 {
			yyb121 = yyj121 > l
		} else {
			yyb121 = r.CheckBreak()
		}
		if yyb121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym123 := z.EncBinary()
		_ = yym123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep124 := !z.EncBinary()
			yy2arr124 := z.EncBasicHandle().StructToArray
			var yyq124 [2]bool
			_, _, _ = yysep124, yyq124, yy2arr124
			const yyr124 bool = false
			var yynn124 int
			if yyr124 || yy2arr124 {
				r.EncodeArrayStart(2)
			} else {
				yynn124 = 2
				for _, b := range yyq124 {
					if b {
						yynn124++
					}
				}
				r.EncodeMapStart(yynn124)
				yynn124 = 0
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym126 := z.EncBinary()
				_ = yym126
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym127 := z.EncBinary()
				_ = yym127
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy129 := &x.TargetValue
				yym130 := z.EncBinary()
				_ = yym130
				if false {
				} else if z.HasExtensions() && z.EncExt(yy129) {
				} else if !yym130 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy129)
				} else {
					z.EncFallback(yy129)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy131 := &x.TargetValue
				yym132 := z.EncBinary()
				_ = yym132
				if false {
				} else if z.HasExtensions() && z.EncExt(yy131) {
				} else if !yym132 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy131)
				} else {
					z.EncFallback(yy131)
				}
			}
			if yyr124 || yy2arr124 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym133 := z.DecBinary()
	_ = yym133
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct134 := r.ContainerType()
		if yyct134 == codecSelferValueTypeMap1234 {
			yyl134 := r.ReadMapStart()
			if yyl134 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl134, d)
			}
		} else if yyct134 == codecSelferValueTypeArray1234 {
			yyl134 := r.ReadArrayStart()
			if yyl134 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl134, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys135Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys135Slc
	var yyhl135 bool = l >= 0
	for yyj135 := 0; ; yyj135++ {
		if yyhl135 {
			if yyj135 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys135Slc = r.DecodeBytes(yys135Slc, true, true)
		yys135 := string(yys135Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys135 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg4_resource.Quantity{}
			} else {
				yyv137 := &x.TargetValue
				yym138 := z.DecBinary()
				_ = yym138
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv137) {
				} else if !yym138 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv137)
				} else {
					z.DecFallback(yyv137, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys135)
		} // end switch yys135
	} // end for yyj135
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj139 int
	var yyb139 bool
	var yyhl139 bool = l >= 0
	yyj139++
	if yyhl139 {
		yyb139 = yyj139 > l
	} else {
		yyb139 = r.CheckBreak()
	}
	if yyb139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj139++
	if yyhl139 {
		yyb139 = yyj139 > l
	} else {
		yyb139 = r.CheckBreak()
	}
	if yyb139 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg4_resource.Quantity{}
	} else {
		yyv141 := &x.TargetValue
		yym142 := z.DecBinary()
		_ = yym142
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv141) {
		} else if !yym142 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv141)
		} else {
			z.DecFallback(yyv141, false)
		}
	}
	for {
		yyj139++
		if yyhl139 {
			yyb139 = yyj139 > l
		} else {
			yyb139 = r.CheckBreak()
		}
		if yyb139 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj139-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym143 := z.EncBinary()
		_ = yym143
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep144 := !z.EncBinary()
			yy2arr144 := z.EncBasicHandle().StructToArray
			var yyq144 [1]bool
			_, _, _ = yysep144, yyq144, yy2arr144
			const yyr144 bool = false
			var yynn144 int
			if yyr144 || yy2arr144 {
				r.EncodeArrayStart(1)
			} else {
				yynn144 = 1
				for _, b := range yyq144 {
					if b {
						yynn144++
					}
				}
				r.EncodeMapStart(yynn144)
				yynn144 = 0
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym146 := z.EncBinary()
					_ = yym146
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym147 := z.EncBinary()
					_ = yym147
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr144 || yy2arr144 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym148 := z.DecBinary()
	_ = yym148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct149 := r.ContainerType()
		if yyct149 == codecSelferValueTypeMap1234 {
			yyl149 := r.ReadMapStart()
			if yyl149 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl149, d)
			}
		} else if yyct149 == codecSelferValueTypeArray1234 {
			yyl149 := r.ReadArrayStart()
			if yyl149 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys150Slc
	var yyhl150 bool = l >= 0
	for yyj150 := 0; ; yyj150++ {
		if yyhl150 {
			if yyj150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys150Slc = r.DecodeBytes(yys150Slc, true, true)
		yys150 := string(yys150Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys150 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv151 := &x.Items
				yym152 := z.DecBinary()
				_ = yym152
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv151), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys150)
		} // end switch yys150
	} // end for yyj150
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj153 int
	var yyb153 bool
	var yyhl153 bool = l >= 0
	yyj153++
	if yyhl153 {
		yyb153 = yyj153 > l
	} else {
		yyb153 = r.CheckBreak()
	}
	if yyb153 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv154 := &x.Items
		yym155 := z.DecBinary()
		_ = yym155
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv154), d)
		}
	}
	for {
		yyj153++
		if yyhl153 {
			yyb153 = yyj153 > l
		} else {
			yyb153 = r.CheckBreak()
		}
		if yyb153 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj153-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym156 := z.EncBinary()
		_ = yym156
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep157 := !z.EncBinary()
			yy2arr157 := z.EncBasicHandle().StructToArray
			var yyq157 [2]bool
			_, _, _ = yysep157, yyq157, yy2arr157
			const yyr157 bool = false
			var yynn157 int
			if yyr157 || yy2arr157 {
				r.EncodeArrayStart(2)
			} else {
				yynn157 = 2
				for _, b := range yyq157 {
					if b {
						yynn157++
					}
				}
				r.EncodeMapStart(yynn157)
				yynn157 = 0
			}
			if yyr157 || yy2arr157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym159 := z.EncBinary()
				_ = yym159
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym160 := z.EncBinary()
				_ = yym160
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr157 || yy2arr157 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy162 := &x.CurrentValue
				yym163 := z.EncBinary()
				_ = yym163
				if false {
				} else if z.HasExtensions() && z.EncExt(yy162) {
				} else if !yym163 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy162)
				} else {
					z.EncFallback(yy162)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy164 := &x.CurrentValue
				yym165 := z.EncBinary()
				_ = yym165
				if false {
				} else if z.HasExtensions() && z.EncExt(yy164) {
				} else if !yym165 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy164)
				} else {
					z.EncFallback(yy164)
				}
			}
			if yyr157 || yy2arr157 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym166 := z.DecBinary()
	_ = yym166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct167 := r.ContainerType()
		if yyct167 == codecSelferValueTypeMap1234 {
			yyl167 := r.ReadMapStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl167, d)
			}
		} else if yyct167 == codecSelferValueTypeArray1234 {
			yyl167 := r.ReadArrayStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys168Slc
	var yyhl168 bool = l >= 0
	for yyj168 := 0; ; yyj168++ {
		if yyhl168 {
			if yyj168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys168Slc = r.DecodeBytes(yys168Slc, true, true)
		yys168 := string(yys168Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys168 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg4_resource.Quantity{}
			} else {
				yyv170 := &x.CurrentValue
				yym171 := z.DecBinary()
				_ = yym171
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv170) {
				} else if !yym171 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv170)
				} else {
					z.DecFallback(yyv170, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys168)
		} // end switch yys168
	} // end for yyj168
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj172 int
	var yyb172 bool
	var yyhl172 bool = l >= 0
	yyj172++
	if yyhl172 {
		yyb172 = yyj172 > l
	} else {
		yyb172 = r.CheckBreak()
	}
	if yyb172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj172++
	if yyhl172 {
		yyb172 = yyj172 > l
	} else {
		yyb172 = r.CheckBreak()
	}
	if yyb172 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg4_resource.Quantity{}
	} else {
		yyv174 := &x.CurrentValue
		yym175 := z.DecBinary()
		_ = yym175
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv174) {
		} else if !yym175 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv174)
		} else {
			z.DecFallback(yyv174, false)
		}
	}
	for {
		yyj172++
		if yyhl172 {
			yyb172 = yyj172 > l
		} else {
			yyb172 = r.CheckBreak()
		}
		if yyb172 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj172-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym176 := z.EncBinary()
		_ = yym176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep177 := !z.EncBinary()
			yy2arr177 := z.EncBasicHandle().StructToArray
			var yyq177 [1]bool
			_, _, _ = yysep177, yyq177, yy2arr177
			const yyr177 bool = false
			var yynn177 int
			if yyr177 || yy2arr177 {
				r.EncodeArrayStart(1)
			} else {
				yynn177 = 1
				for _, b := range yyq177 {
					if b {
						yynn177++
					}
				}
				r.EncodeMapStart(yynn177)
				yynn177 = 0
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym180 := z.EncBinary()
					_ = yym180
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym181 := z.DecBinary()
	_ = yym181
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct182 := r.ContainerType()
		if yyct182 == codecSelferValueTypeMap1234 {
			yyl182 := r.ReadMapStart()
			if yyl182 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl182, d)
			}
		} else if yyct182 == codecSelferValueTypeArray1234 {
			yyl182 := r.ReadArrayStart()
			if yyl182 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl182, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys183Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys183Slc
	var yyhl183 bool = l >= 0
	for yyj183 := 0; ; yyj183++ {
		if yyhl183 {
			if yyj183 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys183Slc = r.DecodeBytes(yys183Slc, true, true)
		yys183 := string(yys183Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys183 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv184 := &x.Items
				yym185 := z.DecBinary()
				_ = yym185
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv184), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys183)
		} // end switch yys183
	} // end for yyj183
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj186 int
	var yyb186 bool
	var yyhl186 bool = l >= 0
	yyj186++
	if yyhl186 {
		yyb186 = yyj186 > l
	} else {
		yyb186 = r.CheckBreak()
	}
	if yyb186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv187 := &x.Items
		yym188 := z.DecBinary()
		_ = yym188
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv187), d)
		}
	}
	for {
		yyj186++
		if yyhl186 {
			yyb186 = yyj186 > l
		} else {
			yyb186 = r.CheckBreak()
		}
		if yyb186 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj186-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym189 := z.EncBinary()
		_ = yym189
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep190 := !z.EncBinary()
			yy2arr190 := z.EncBasicHandle().StructToArray
			var yyq190 [4]bool
			_, _, _ = yysep190, yyq190, yy2arr190
			const yyr190 bool = false
			yyq190[1] = x.MinReplicas != nil
			yyq190[3] = x.CPUUtilization != nil
			var yynn190 int
			if yyr190 || yy2arr190 {
				r.EncodeArrayStart(4)
			} else {
				yynn190 = 2
				for _, b := range yyq190 {
					if b {
						yynn190++
					}
				}
				r.EncodeMapStart(yynn190)
				yynn190 = 0
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy192 := &x.ScaleRef
				yy192.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy193 := &x.ScaleRef
				yy193.CodecEncodeSelf(e)
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq190[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy195 := *x.MinReplicas
						yym196 := z.EncBinary()
						_ = yym196
						if false {
						} else {
							r.EncodeInt(int64(yy195))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq190[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy197 := *x.MinReplicas
						yym198 := z.EncBinary()
						_ = yym198
						if false {
						} else {
							r.EncodeInt(int64(yy197))
						}
					}
				}
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym200 := z.EncBinary()
				_ = yym200
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym201 := z.EncBinary()
				_ = yym201
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq190[3] {
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq190[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cpuUtilization"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CPUUtilization == nil {
						r.EncodeNil()
					} else {
						x.CPUUtilization.CodecEncodeSelf(e)
					}
				}
			}
			if yyr190 || yy2arr190 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym203 := z.DecBinary()
	_ = yym203
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct204 := r.ContainerType()
		if yyct204 == codecSelferValueTypeMap1234 {
			yyl204 := r.ReadMapStart()
			if yyl204 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl204, d)
			}
		} else if yyct204 == codecSelferValueTypeArray1234 {
			yyl204 := r.ReadArrayStart()
			if yyl204 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl204, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys205Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys205Slc
	var yyhl205 bool = l >= 0
	for yyj205 := 0; ; yyj205++ {
		if yyhl205 {
			if yyj205 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys205Slc = r.DecodeBytes(yys205Slc, true, true)
		yys205 := string(yys205Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys205 {
		case "scaleRef":
			if r.TryDecodeAsNil() {
				x.ScaleRef = SubresourceReference{}
			} else {
				yyv206 := &x.ScaleRef
				yyv206.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int32)
				}
				yym208 := z.DecBinary()
				_ = yym208
				if false {
				} else {
					*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int32(r.DecodeInt(32))
			}
		case "cpuUtilization":
			if r.TryDecodeAsNil() {
				if x.CPUUtilization != nil {
					x.CPUUtilization = nil
				}
			} else {
				if x.CPUUtilization == nil {
					x.CPUUtilization = new(CPUTargetUtilization)
				}
				x.CPUUtilization.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys205)
		} // end switch yys205
	} // end for yyj205
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj211 int
	var yyb211 bool
	var yyhl211 bool = l >= 0
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleRef = SubresourceReference{}
	} else {
		yyv212 := &x.ScaleRef
		yyv212.CodecDecodeSelf(d)
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int32)
		}
		yym214 := z.DecBinary()
		_ = yym214
		if false {
		} else {
			*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int32(r.DecodeInt(32))
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CPUUtilization != nil {
			x.CPUUtilization = nil
		}
	} else {
		if x.CPUUtilization == nil {
			x.CPUUtilization = new(CPUTargetUtilization)
		}
		x.CPUUtilization.CodecDecodeSelf(d)
	}
	for {
		yyj211++
		if yyhl211 {
			yyb211 = yyj211 > l
		} else {
			yyb211 = r.CheckBreak()
		}
		if yyb211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym217 := z.EncBinary()
		_ = yym217
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep218 := !z.EncBinary()
			yy2arr218 := z.EncBasicHandle().StructToArray
			var yyq218 [5]bool
			_, _, _ = yysep218, yyq218, yy2arr218
			const yyr218 bool = false
			yyq218[0] = x.ObservedGeneration != nil
			yyq218[1] = x.LastScaleTime != nil
			yyq218[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn218 int
			if yyr218 || yy2arr218 {
				r.EncodeArrayStart(5)
			} else {
				yynn218 = 2
				for _, b := range yyq218 {
					if b {
						yynn218++
					}
				}
				r.EncodeMapStart(yynn218)
				yynn218 = 0
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq218[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy220 := *x.ObservedGeneration
						yym221 := z.EncBinary()
						_ = yym221
						if false {
						} else {
							r.EncodeInt(int64(yy220))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq218[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy222 := *x.ObservedGeneration
						yym223 := z.EncBinary()
						_ = yym223
						if false {
						} else {
							r.EncodeInt(int64(yy222))
						}
					}
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq218[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym225 := z.EncBinary()
						_ = yym225
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym225 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym225 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq218[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym226 := z.EncBinary()
						_ = yym226
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym226 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym226 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym228 := z.EncBinary()
				_ = yym228
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym229 := z.EncBinary()
				_ = yym229
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym231 := z.EncBinary()
				_ = yym231
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym232 := z.EncBinary()
				_ = yym232
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq218[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy234 := *x.CurrentCPUUtilizationPercentage
						yym235 := z.EncBinary()
						_ = yym235
						if false {
						} else {
							r.EncodeInt(int64(yy234))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq218[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy236 := *x.CurrentCPUUtilizationPercentage
						yym237 := z.EncBinary()
						_ = yym237
						if false {
						} else {
							r.EncodeInt(int64(yy236))
						}
					}
				}
			}
			if yyr218 || yy2arr218 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym238 := z.DecBinary()
	_ = yym238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct239 := r.ContainerType()
		if yyct239 == codecSelferValueTypeMap1234 {
			yyl239 := r.ReadMapStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl239, d)
			}
		} else if yyct239 == codecSelferValueTypeArray1234 {
			yyl239 := r.ReadArrayStart()
			if yyl239 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl239, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys240Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys240Slc
	var yyhl240 bool = l >= 0
	for yyj240 := 0; ; yyj240++ {
		if yyhl240 {
			if yyj240 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys240Slc = r.DecodeBytes(yys240Slc, true, true)
		yys240 := string(yys240Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys240 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym242 := z.DecBinary()
				_ = yym242
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym244 := z.DecBinary()
				_ = yym244
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym244 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym244 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int32(r.DecodeInt(32))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int32(r.DecodeInt(32))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int32)
				}
				yym248 := z.DecBinary()
				_ = yym248
				if false {
				} else {
					*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys240)
		} // end switch yys240
	} // end for yyj240
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj249 int
	var yyb249 bool
	var yyhl249 bool = l >= 0
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym251 := z.DecBinary()
		_ = yym251
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym253 := z.DecBinary()
		_ = yym253
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym253 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym253 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int32(r.DecodeInt(32))
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int32(r.DecodeInt(32))
	}
	yyj249++
	if yyhl249 {
		yyb249 = yyj249 > l
	} else {
		yyb249 = r.CheckBreak()
	}
	if yyb249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int32)
		}
		yym257 := z.DecBinary()
		_ = yym257
		if false {
		} else {
			*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj249++
		if yyhl249 {
			yyb249 = yyj249 > l
		} else {
			yyb249 = r.CheckBreak()
		}
		if yyb249 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj249-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym258 := z.EncBinary()
		_ = yym258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep259 := !z.EncBinary()
			yy2arr259 := z.EncBasicHandle().StructToArray
			var yyq259 [5]bool
			_, _, _ = yysep259, yyq259, yy2arr259
			const yyr259 bool = false
			yyq259[0] = x.Kind != ""
			yyq259[1] = x.APIVersion != ""
			yyq259[2] = true
			yyq259[3] = true
			yyq259[4] = true
			var yynn259 int
			if yyr259 || yy2arr259 {
				r.EncodeArrayStart(5)
			} else {
				yynn259 = 0
				for _, b := range yyq259 {
					if b {
						yynn259++
					}
				}
				r.EncodeMapStart(yynn259)
				yynn259 = 0
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[0] {
					yym261 := z.EncBinary()
					_ = yym261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[1] {
					yym264 := z.EncBinary()
					_ = yym264
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq259[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[2] {
					yy267 := &x.ObjectMeta
					yym268 := z.EncBinary()
					_ = yym268
					if false {
					} else if z.HasExtensions() && z.EncExt(yy267) {
					} else {
						z.EncFallback(yy267)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy269 := &x.ObjectMeta
					yym270 := z.EncBinary()
					_ = yym270
					if false {
					} else if z.HasExtensions() && z.EncExt(yy269) {
					} else {
						z.EncFallback(yy269)
					}
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[3] {
					yy272 := &x.Spec
					yy272.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy273 := &x.Spec
					yy273.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq259[4] {
					yy275 := &x.Status
					yy275.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq259[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy276 := &x.Status
					yy276.CodecEncodeSelf(e)
				}
			}
			if yyr259 || yy2arr259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym277 := z.DecBinary()
	_ = yym277
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct278 := r.ContainerType()
		if yyct278 == codecSelferValueTypeMap1234 {
			yyl278 := r.ReadMapStart()
			if yyl278 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl278, d)
			}
		} else if yyct278 == codecSelferValueTypeArray1234 {
			yyl278 := r.ReadArrayStart()
			if yyl278 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl278, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys279Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys279Slc
	var yyhl279 bool = l >= 0
	for yyj279 := 0; ; yyj279++ {
		if yyhl279 {
			if yyj279 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys279Slc = r.DecodeBytes(yys279Slc, true, true)
		yys279 := string(yys279Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys279 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv282 := &x.ObjectMeta
				yym283 := z.DecBinary()
				_ = yym283
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv282) {
				} else {
					z.DecFallback(yyv282, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv284 := &x.Spec
				yyv284.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv285 := &x.Status
				yyv285.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys279)
		} // end switch yys279
	} // end for yyj279
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj286 int
	var yyb286 bool
	var yyhl286 bool = l >= 0
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv289 := &x.ObjectMeta
		yym290 := z.DecBinary()
		_ = yym290
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv289) {
		} else {
			z.DecFallback(yyv289, false)
		}
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv291 := &x.Spec
		yyv291.CodecDecodeSelf(d)
	}
	yyj286++
	if yyhl286 {
		yyb286 = yyj286 > l
	} else {
		yyb286 = r.CheckBreak()
	}
	if yyb286 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv292 := &x.Status
		yyv292.CodecDecodeSelf(d)
	}
	for {
		yyj286++
		if yyhl286 {
			yyb286 = yyj286 > l
		} else {
			yyb286 = r.CheckBreak()
		}
		if yyb286 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj286-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym293 := z.EncBinary()
		_ = yym293
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep294 := !z.EncBinary()
			yy2arr294 := z.EncBasicHandle().StructToArray
			var yyq294 [4]bool
			_, _, _ = yysep294, yyq294, yy2arr294
			const yyr294 bool = false
			yyq294[0] = x.Kind != ""
			yyq294[1] = x.APIVersion != ""
			yyq294[2] = true
			var yynn294 int
			if yyr294 || yy2arr294 {
				r.EncodeArrayStart(4)
			} else {
				yynn294 = 1
				for _, b := range yyq294 {
					if b {
						yynn294++
					}
				}
				r.EncodeMapStart(yynn294)
				yynn294 = 0
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq294[0] {
					yym296 := z.EncBinary()
					_ = yym296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq294[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym297 := z.EncBinary()
					_ = yym297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq294[1] {
					yym299 := z.EncBinary()
					_ = yym299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq294[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq294[2] {
					yy302 := &x.ListMeta
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else if z.HasExtensions() && z.EncExt(yy302) {
					} else {
						z.EncFallback(yy302)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq294[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy304 := &x.ListMeta
					yym305 := z.EncBinary()
					_ = yym305
					if false {
					} else if z.HasExtensions() && z.EncExt(yy304) {
					} else {
						z.EncFallback(yy304)
					}
				}
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym307 := z.EncBinary()
					_ = yym307
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym308 := z.EncBinary()
					_ = yym308
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr294 || yy2arr294 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym309 := z.DecBinary()
	_ = yym309
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct310 := r.ContainerType()
		if yyct310 == codecSelferValueTypeMap1234 {
			yyl310 := r.ReadMapStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl310, d)
			}
		} else if yyct310 == codecSelferValueTypeArray1234 {
			yyl310 := r.ReadArrayStart()
			if yyl310 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl310, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys311Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys311Slc
	var yyhl311 bool = l >= 0
	for yyj311 := 0; ; yyj311++ {
		if yyhl311 {
			if yyj311 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys311Slc = r.DecodeBytes(yys311Slc, true, true)
		yys311 := string(yys311Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys311 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv314 := &x.ListMeta
				yym315 := z.DecBinary()
				_ = yym315
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv314) {
				} else {
					z.DecFallback(yyv314, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv316 := &x.Items
				yym317 := z.DecBinary()
				_ = yym317
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv316), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys311)
		} // end switch yys311
	} // end for yyj311
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj318 int
	var yyb318 bool
	var yyhl318 bool = l >= 0
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv321 := &x.ListMeta
		yym322 := z.DecBinary()
		_ = yym322
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv321) {
		} else {
			z.DecFallback(yyv321, false)
		}
	}
	yyj318++
	if yyhl318 {
		yyb318 = yyj318 > l
	} else {
		yyb318 = r.CheckBreak()
	}
	if yyb318 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv323 := &x.Items
		yym324 := z.DecBinary()
		_ = yym324
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv323), d)
		}
	}
	for {
		yyj318++
		if yyhl318 {
			yyb318 = yyj318 > l
		} else {
			yyb318 = r.CheckBreak()
		}
		if yyb318 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj318-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym325 := z.EncBinary()
		_ = yym325
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep326 := !z.EncBinary()
			yy2arr326 := z.EncBasicHandle().StructToArray
			var yyq326 [5]bool
			_, _, _ = yysep326, yyq326, yy2arr326
			const yyr326 bool = false
			yyq326[0] = x.Kind != ""
			yyq326[1] = x.APIVersion != ""
			yyq326[2] = true
			yyq326[3] = x.Description != ""
			yyq326[4] = len(x.Versions) != 0
			var yynn326 int
			if yyr326 || yy2arr326 {
				r.EncodeArrayStart(5)
			} else {
				yynn326 = 0
				for _, b := range yyq326 {
					if b {
						yynn326++
					}
				}
				r.EncodeMapStart(yynn326)
				yynn326 = 0
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[0] {
					yym328 := z.EncBinary()
					_ = yym328
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq326[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym329 := z.EncBinary()
					_ = yym329
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[1] {
					yym331 := z.EncBinary()
					_ = yym331
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq326[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym332 := z.EncBinary()
					_ = yym332
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[2] {
					yy334 := &x.ObjectMeta
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else if z.HasExtensions() && z.EncExt(yy334) {
					} else {
						z.EncFallback(yy334)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq326[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy336 := &x.ObjectMeta
					yym337 := z.EncBinary()
					_ = yym337
					if false {
					} else if z.HasExtensions() && z.EncExt(yy336) {
					} else {
						z.EncFallback(yy336)
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[3] {
					yym339 := z.EncBinary()
					_ = yym339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq326[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym340 := z.EncBinary()
					_ = yym340
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq326[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym342 := z.EncBinary()
						_ = yym342
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq326[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym343 := z.EncBinary()
						_ = yym343
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr326 || yy2arr326 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym344 := z.DecBinary()
	_ = yym344
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct345 := r.ContainerType()
		if yyct345 == codecSelferValueTypeMap1234 {
			yyl345 := r.ReadMapStart()
			if yyl345 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl345, d)
			}
		} else if yyct345 == codecSelferValueTypeArray1234 {
			yyl345 := r.ReadArrayStart()
			if yyl345 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl345, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys346Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys346Slc
	var yyhl346 bool = l >= 0
	for yyj346 := 0; ; yyj346++ {
		if yyhl346 {
			if yyj346 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys346Slc = r.DecodeBytes(yys346Slc, true, true)
		yys346 := string(yys346Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys346 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv349 := &x.ObjectMeta
				yym350 := z.DecBinary()
				_ = yym350
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv349) {
				} else {
					z.DecFallback(yyv349, false)
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv352 := &x.Versions
				yym353 := z.DecBinary()
				_ = yym353
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv352), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys346)
		} // end switch yys346
	} // end for yyj346
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj354 int
	var yyb354 bool
	var yyhl354 bool = l >= 0
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv357 := &x.ObjectMeta
		yym358 := z.DecBinary()
		_ = yym358
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv357) {
		} else {
			z.DecFallback(yyv357, false)
		}
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj354++
	if yyhl354 {
		yyb354 = yyj354 > l
	} else {
		yyb354 = r.CheckBreak()
	}
	if yyb354 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv360 := &x.Versions
		yym361 := z.DecBinary()
		_ = yym361
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv360), d)
		}
	}
	for {
		yyj354++
		if yyhl354 {
			yyb354 = yyj354 > l
		} else {
			yyb354 = r.CheckBreak()
		}
		if yyb354 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj354-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym362 := z.EncBinary()
		_ = yym362
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep363 := !z.EncBinary()
			yy2arr363 := z.EncBasicHandle().StructToArray
			var yyq363 [4]bool
			_, _, _ = yysep363, yyq363, yy2arr363
			const yyr363 bool = false
			yyq363[0] = x.Kind != ""
			yyq363[1] = x.APIVersion != ""
			yyq363[2] = true
			var yynn363 int
			if yyr363 || yy2arr363 {
				r.EncodeArrayStart(4)
			} else {
				yynn363 = 1
				for _, b := range yyq363 {
					if b {
						yynn363++
					}
				}
				r.EncodeMapStart(yynn363)
				yynn363 = 0
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq363[0] {
					yym365 := z.EncBinary()
					_ = yym365
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq363[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym366 := z.EncBinary()
					_ = yym366
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq363[1] {
					yym368 := z.EncBinary()
					_ = yym368
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq363[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym369 := z.EncBinary()
					_ = yym369
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq363[2] {
					yy371 := &x.ListMeta
					yym372 := z.EncBinary()
					_ = yym372
					if false {
					} else if z.HasExtensions() && z.EncExt(yy371) {
					} else {
						z.EncFallback(yy371)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq363[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy373 := &x.ListMeta
					yym374 := z.EncBinary()
					_ = yym374
					if false {
					} else if z.HasExtensions() && z.EncExt(yy373) {
					} else {
						z.EncFallback(yy373)
					}
				}
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym376 := z.EncBinary()
					_ = yym376
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym377 := z.EncBinary()
					_ = yym377
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr363 || yy2arr363 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym378 := z.DecBinary()
	_ = yym378
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct379 := r.ContainerType()
		if yyct379 == codecSelferValueTypeMap1234 {
			yyl379 := r.ReadMapStart()
			if yyl379 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl379, d)
			}
		} else if yyct379 == codecSelferValueTypeArray1234 {
			yyl379 := r.ReadArrayStart()
			if yyl379 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl379, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys380Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys380Slc
	var yyhl380 bool = l >= 0
	for yyj380 := 0; ; yyj380++ {
		if yyhl380 {
			if yyj380 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys380Slc = r.DecodeBytes(yys380Slc, true, true)
		yys380 := string(yys380Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys380 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv383 := &x.ListMeta
				yym384 := z.DecBinary()
				_ = yym384
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv383) {
				} else {
					z.DecFallback(yyv383, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv385 := &x.Items
				yym386 := z.DecBinary()
				_ = yym386
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv385), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys380)
		} // end switch yys380
	} // end for yyj380
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj387 int
	var yyb387 bool
	var yyhl387 bool = l >= 0
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv390 := &x.ListMeta
		yym391 := z.DecBinary()
		_ = yym391
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv390) {
		} else {
			z.DecFallback(yyv390, false)
		}
	}
	yyj387++
	if yyhl387 {
		yyb387 = yyj387 > l
	} else {
		yyb387 = r.CheckBreak()
	}
	if yyb387 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv392 := &x.Items
		yym393 := z.DecBinary()
		_ = yym393
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv392), d)
		}
	}
	for {
		yyj387++
		if yyhl387 {
			yyb387 = yyj387 > l
		} else {
			yyb387 = r.CheckBreak()
		}
		if yyb387 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj387-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym394 := z.EncBinary()
		_ = yym394
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep395 := !z.EncBinary()
			yy2arr395 := z.EncBasicHandle().StructToArray
			var yyq395 [1]bool
			_, _, _ = yysep395, yyq395, yy2arr395
			const yyr395 bool = false
			yyq395[0] = x.Name != ""
			var yynn395 int
			if yyr395 || yy2arr395 {
				r.EncodeArrayStart(1)
			} else {
				yynn395 = 0
				for _, b := range yyq395 {
					if b {
						yynn395++
					}
				}
				r.EncodeMapStart(yynn395)
				yynn395 = 0
			}
			if yyr395 || yy2arr395 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq395[0] {
					yym397 := z.EncBinary()
					_ = yym397
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq395[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym398 := z.EncBinary()
					_ = yym398
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr395 || yy2arr395 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym399 := z.DecBinary()
	_ = yym399
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct400 := r.ContainerType()
		if yyct400 == codecSelferValueTypeMap1234 {
			yyl400 := r.ReadMapStart()
			if yyl400 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl400, d)
			}
		} else if yyct400 == codecSelferValueTypeArray1234 {
			yyl400 := r.ReadArrayStart()
			if yyl400 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl400, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys401Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys401Slc
	var yyhl401 bool = l >= 0
	for yyj401 := 0; ; yyj401++ {
		if yyhl401 {
			if yyj401 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys401Slc = r.DecodeBytes(yys401Slc, true, true)
		yys401 := string(yys401Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys401 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys401)
		} // end switch yys401
	} // end for yyj401
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj403 int
	var yyb403 bool
	var yyhl403 bool = l >= 0
	yyj403++
	if yyhl403 {
		yyb403 = yyj403 > l
	} else {
		yyb403 = r.CheckBreak()
	}
	if yyb403 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj403++
		if yyhl403 {
			yyb403 = yyj403 > l
		} else {
			yyb403 = r.CheckBreak()
		}
		if yyb403 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj403-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym405 := z.EncBinary()
		_ = yym405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep406 := !z.EncBinary()
			yy2arr406 := z.EncBasicHandle().StructToArray
			var yyq406 [4]bool
			_, _, _ = yysep406, yyq406, yy2arr406
			const yyr406 bool = false
			yyq406[0] = x.Kind != ""
			yyq406[1] = x.APIVersion != ""
			yyq406[2] = true
			yyq406[3] = len(x.Data) != 0
			var yynn406 int
			if yyr406 || yy2arr406 {
				r.EncodeArrayStart(4)
			} else {
				yynn406 = 0
				for _, b := range yyq406 {
					if b {
						yynn406++
					}
				}
				r.EncodeMapStart(yynn406)
				yynn406 = 0
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[0] {
					yym408 := z.EncBinary()
					_ = yym408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym409 := z.EncBinary()
					_ = yym409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[1] {
					yym411 := z.EncBinary()
					_ = yym411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym412 := z.EncBinary()
					_ = yym412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[2] {
					yy414 := &x.ObjectMeta
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else if z.HasExtensions() && z.EncExt(yy414) {
					} else {
						z.EncFallback(yy414)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq406[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.ObjectMeta
					yym417 := z.EncBinary()
					_ = yym417
					if false {
					} else if z.HasExtensions() && z.EncExt(yy416) {
					} else {
						z.EncFallback(yy416)
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym419 := z.EncBinary()
						_ = yym419
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq406[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym420 := z.EncBinary()
						_ = yym420
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym421 := z.DecBinary()
	_ = yym421
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct422 := r.ContainerType()
		if yyct422 == codecSelferValueTypeMap1234 {
			yyl422 := r.ReadMapStart()
			if yyl422 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl422, d)
			}
		} else if yyct422 == codecSelferValueTypeArray1234 {
			yyl422 := r.ReadArrayStart()
			if yyl422 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl422, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys423Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys423Slc
	var yyhl423 bool = l >= 0
	for yyj423 := 0; ; yyj423++ {
		if yyhl423 {
			if yyj423 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys423Slc = r.DecodeBytes(yys423Slc, true, true)
		yys423 := string(yys423Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys423 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv426 := &x.ObjectMeta
				yym427 := z.DecBinary()
				_ = yym427
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv426) {
				} else {
					z.DecFallback(yyv426, false)
				}
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv428 := &x.Data
				yym429 := z.DecBinary()
				_ = yym429
				if false {
				} else {
					*yyv428 = r.DecodeBytes(*(*[]byte)(yyv428), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys423)
		} // end switch yys423
	} // end for yyj423
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj430 int
	var yyb430 bool
	var yyhl430 bool = l >= 0
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv433 := &x.ObjectMeta
		yym434 := z.DecBinary()
		_ = yym434
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv433) {
		} else {
			z.DecFallback(yyv433, false)
		}
	}
	yyj430++
	if yyhl430 {
		yyb430 = yyj430 > l
	} else {
		yyb430 = r.CheckBreak()
	}
	if yyb430 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv435 := &x.Data
		yym436 := z.DecBinary()
		_ = yym436
		if false {
		} else {
			*yyv435 = r.DecodeBytes(*(*[]byte)(yyv435), false, false)
		}
	}
	for {
		yyj430++
		if yyhl430 {
			yyb430 = yyj430 > l
		} else {
			yyb430 = r.CheckBreak()
		}
		if yyb430 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj430-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym437 := z.EncBinary()
		_ = yym437
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep438 := !z.EncBinary()
			yy2arr438 := z.EncBasicHandle().StructToArray
			var yyq438 [5]bool
			_, _, _ = yysep438, yyq438, yy2arr438
			const yyr438 bool = false
			yyq438[0] = x.Kind != ""
			yyq438[1] = x.APIVersion != ""
			yyq438[2] = true
			yyq438[3] = true
			yyq438[4] = true
			var yynn438 int
			if yyr438 || yy2arr438 {
				r.EncodeArrayStart(5)
			} else {
				yynn438 = 0
				for _, b := range yyq438 {
					if b {
						yynn438++
					}
				}
				r.EncodeMapStart(yynn438)
				yynn438 = 0
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[0] {
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq438[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym441 := z.EncBinary()
					_ = yym441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[1] {
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq438[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym444 := z.EncBinary()
					_ = yym444
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[2] {
					yy446 := &x.ObjectMeta
					yym447 := z.EncBinary()
					_ = yym447
					if false {
					} else if z.HasExtensions() && z.EncExt(yy446) {
					} else {
						z.EncFallback(yy446)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy448 := &x.ObjectMeta
					yym449 := z.EncBinary()
					_ = yym449
					if false {
					} else if z.HasExtensions() && z.EncExt(yy448) {
					} else {
						z.EncFallback(yy448)
					}
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[3] {
					yy451 := &x.Spec
					yy451.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy452 := &x.Spec
					yy452.CodecEncodeSelf(e)
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq438[4] {
					yy454 := &x.Status
					yy454.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq438[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy455 := &x.Status
					yy455.CodecEncodeSelf(e)
				}
			}
			if yyr438 || yy2arr438 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym456 := z.DecBinary()
	_ = yym456
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct457 := r.ContainerType()
		if yyct457 == codecSelferValueTypeMap1234 {
			yyl457 := r.ReadMapStart()
			if yyl457 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl457, d)
			}
		} else if yyct457 == codecSelferValueTypeArray1234 {
			yyl457 := r.ReadArrayStart()
			if yyl457 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl457, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys458Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys458Slc
	var yyhl458 bool = l >= 0
	for yyj458 := 0; ; yyj458++ {
		if yyhl458 {
			if yyj458 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys458Slc = r.DecodeBytes(yys458Slc, true, true)
		yys458 := string(yys458Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys458 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv461 := &x.ObjectMeta
				yym462 := z.DecBinary()
				_ = yym462
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv461) {
				} else {
					z.DecFallback(yyv461, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv463 := &x.Spec
				yyv463.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv464 := &x.Status
				yyv464.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys458)
		} // end switch yys458
	} // end for yyj458
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj465 int
	var yyb465 bool
	var yyhl465 bool = l >= 0
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv468 := &x.ObjectMeta
		yym469 := z.DecBinary()
		_ = yym469
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv468) {
		} else {
			z.DecFallback(yyv468, false)
		}
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv470 := &x.Spec
		yyv470.CodecDecodeSelf(d)
	}
	yyj465++
	if yyhl465 {
		yyb465 = yyj465 > l
	} else {
		yyb465 = r.CheckBreak()
	}
	if yyb465 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv471 := &x.Status
		yyv471.CodecDecodeSelf(d)
	}
	for {
		yyj465++
		if yyhl465 {
			yyb465 = yyj465 > l
		} else {
			yyb465 = r.CheckBreak()
		}
		if yyb465 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj465-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym472 := z.EncBinary()
		_ = yym472
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep473 := !z.EncBinary()
			yy2arr473 := z.EncBasicHandle().StructToArray
			var yyq473 [8]bool
			_, _, _ = yysep473, yyq473, yy2arr473
			const yyr473 bool = false
			yyq473[0] = x.Replicas != nil
			yyq473[1] = x.Selector != nil
			yyq473[3] = true
			yyq473[4] = x.MinReadySeconds != 0
			yyq473[5] = x.RevisionHistoryLimit != nil
			yyq473[6] = x.Paused != false
			yyq473[7] = x.RollbackTo != nil
			var yynn473 int
			if yyr473 || yy2arr473 {
				r.EncodeArrayStart(8)
			} else {
				yynn473 = 1
				for _, b := range yyq473 {
					if b {
						yynn473++
					}
				}
				r.EncodeMapStart(yynn473)
				yynn473 = 0
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy475 := *x.Replicas
						yym476 := z.EncBinary()
						_ = yym476
						if false {
						} else {
							r.EncodeInt(int64(yy475))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy477 := *x.Replicas
						yym478 := z.EncBinary()
						_ = yym478
						if false {
						} else {
							r.EncodeInt(int64(yy477))
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy481 := &x.Template
				yym482 := z.EncBinary()
				_ = yym482
				if false {
				} else if z.HasExtensions() && z.EncExt(yy481) {
				} else {
					z.EncFallback(yy481)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy483 := &x.Template
				yym484 := z.EncBinary()
				_ = yym484
				if false {
				} else if z.HasExtensions() && z.EncExt(yy483) {
				} else {
					z.EncFallback(yy483)
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[3] {
					yy486 := &x.Strategy
					yy486.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy487 := &x.Strategy
					yy487.CodecEncodeSelf(e)
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[4] {
					yym489 := z.EncBinary()
					_ = yym489
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq473[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[5] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy492 := *x.RevisionHistoryLimit
						yym493 := z.EncBinary()
						_ = yym493
						if false {
						} else {
							r.EncodeInt(int64(yy492))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy494 := *x.RevisionHistoryLimit
						yym495 := z.EncBinary()
						_ = yym495
						if false {
						} else {
							r.EncodeInt(int64(yy494))
						}
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[6] {
					yym497 := z.EncBinary()
					_ = yym497
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq473[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym498 := z.EncBinary()
					_ = yym498
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq473[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq473[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr473 || yy2arr473 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym500 := z.DecBinary()
	_ = yym500
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct501 := r.ContainerType()
		if yyct501 == codecSelferValueTypeMap1234 {
			yyl501 := r.ReadMapStart()
			if yyl501 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl501, d)
			}
		} else if yyct501 == codecSelferValueTypeArray1234 {
			yyl501 := r.ReadArrayStart()
			if yyl501 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl501, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys502Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys502Slc
	var yyhl502 bool = l >= 0
	for yyj502 := 0; ; yyj502++ {
		if yyhl502 {
			if yyj502 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys502Slc = r.DecodeBytes(yys502Slc, true, true)
		yys502 := string(yys502Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys502 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym504 := z.DecBinary()
				_ = yym504
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv506 := &x.Template
				yym507 := z.DecBinary()
				_ = yym507
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv506) {
				} else {
					z.DecFallback(yyv506, false)
				}
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv508 := &x.Strategy
				yyv508.CodecDecodeSelf(d)
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int32)
				}
				yym511 := z.DecBinary()
				_ = yym511
				if false {
				} else {
					*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
				}
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys502)
		} // end switch yys502
	} // end for yyj502
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj514 int
	var yyb514 bool
	var yyhl514 bool = l >= 0
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym516 := z.DecBinary()
		_ = yym516
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv518 := &x.Template
		yym519 := z.DecBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv518) {
		} else {
			z.DecFallback(yyv518, false)
		}
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv520 := &x.Strategy
		yyv520.CodecDecodeSelf(d)
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int32)
		}
		yym523 := z.DecBinary()
		_ = yym523
		if false {
		} else {
			*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
		}
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj514++
	if yyhl514 {
		yyb514 = yyj514 > l
	} else {
		yyb514 = r.CheckBreak()
	}
	if yyb514 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	for {
		yyj514++
		if yyhl514 {
			yyb514 = yyj514 > l
		} else {
			yyb514 = r.CheckBreak()
		}
		if yyb514 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj514-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym526 := z.EncBinary()
		_ = yym526
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep527 := !z.EncBinary()
			yy2arr527 := z.EncBasicHandle().StructToArray
			var yyq527 [5]bool
			_, _, _ = yysep527, yyq527, yy2arr527
			const yyr527 bool = false
			yyq527[0] = x.Kind != ""
			yyq527[1] = x.APIVersion != ""
			yyq527[3] = len(x.UpdatedAnnotations) != 0
			var yynn527 int
			if yyr527 || yy2arr527 {
				r.EncodeArrayStart(5)
			} else {
				yynn527 = 2
				for _, b := range yyq527 {
					if b {
						yynn527++
					}
				}
				r.EncodeMapStart(yynn527)
				yynn527 = 0
			}
			if yyr527 || yy2arr527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq527[0] {
					yym529 := z.EncBinary()
					_ = yym529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq527[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym530 := z.EncBinary()
					_ = yym530
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr527 || yy2arr527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq527[1] {
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq527[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym533 := z.EncBinary()
					_ = yym533
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr527 || yy2arr527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym535 := z.EncBinary()
				_ = yym535
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym536 := z.EncBinary()
				_ = yym536
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr527 || yy2arr527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq527[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym538 := z.EncBinary()
						_ = yym538
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq527[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym539 := z.EncBinary()
						_ = yym539
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr527 || yy2arr527 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy541 := &x.RollbackTo
				yy541.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy542 := &x.RollbackTo
				yy542.CodecEncodeSelf(e)
			}
			if yyr527 || yy2arr527 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym543 := z.DecBinary()
	_ = yym543
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct544 := r.ContainerType()
		if yyct544 == codecSelferValueTypeMap1234 {
			yyl544 := r.ReadMapStart()
			if yyl544 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl544, d)
			}
		} else if yyct544 == codecSelferValueTypeArray1234 {
			yyl544 := r.ReadArrayStart()
			if yyl544 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl544, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys545Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys545Slc
	var yyhl545 bool = l >= 0
	for yyj545 := 0; ; yyj545++ {
		if yyhl545 {
			if yyj545 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys545Slc = r.DecodeBytes(yys545Slc, true, true)
		yys545 := string(yys545Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys545 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv549 := &x.UpdatedAnnotations
				yym550 := z.DecBinary()
				_ = yym550
				if false {
				} else {
					z.F.DecMapStringStringX(yyv549, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv551 := &x.RollbackTo
				yyv551.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys545)
		} // end switch yys545
	} // end for yyj545
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj552 int
	var yyb552 bool
	var yyhl552 bool = l >= 0
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv556 := &x.UpdatedAnnotations
		yym557 := z.DecBinary()
		_ = yym557
		if false {
		} else {
			z.F.DecMapStringStringX(yyv556, false, d)
		}
	}
	yyj552++
	if yyhl552 {
		yyb552 = yyj552 > l
	} else {
		yyb552 = r.CheckBreak()
	}
	if yyb552 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv558 := &x.RollbackTo
		yyv558.CodecDecodeSelf(d)
	}
	for {
		yyj552++
		if yyhl552 {
			yyb552 = yyj552 > l
		} else {
			yyb552 = r.CheckBreak()
		}
		if yyb552 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj552-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym559 := z.EncBinary()
		_ = yym559
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep560 := !z.EncBinary()
			yy2arr560 := z.EncBasicHandle().StructToArray
			var yyq560 [1]bool
			_, _, _ = yysep560, yyq560, yy2arr560
			const yyr560 bool = false
			yyq560[0] = x.Revision != 0
			var yynn560 int
			if yyr560 || yy2arr560 {
				r.EncodeArrayStart(1)
			} else {
				yynn560 = 0
				for _, b := range yyq560 {
					if b {
						yynn560++
					}
				}
				r.EncodeMapStart(yynn560)
				yynn560 = 0
			}
			if yyr560 || yy2arr560 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq560[0] {
					yym562 := z.EncBinary()
					_ = yym562
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq560[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym563 := z.EncBinary()
					_ = yym563
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr560 || yy2arr560 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym564 := z.DecBinary()
	_ = yym564
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct565 := r.ContainerType()
		if yyct565 == codecSelferValueTypeMap1234 {
			yyl565 := r.ReadMapStart()
			if yyl565 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl565, d)
			}
		} else if yyct565 == codecSelferValueTypeArray1234 {
			yyl565 := r.ReadArrayStart()
			if yyl565 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl565, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys566Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys566Slc
	var yyhl566 bool = l >= 0
	for yyj566 := 0; ; yyj566++ {
		if yyhl566 {
			if yyj566 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys566Slc = r.DecodeBytes(yys566Slc, true, true)
		yys566 := string(yys566Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys566 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys566)
		} // end switch yys566
	} // end for yyj566
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj568 int
	var yyb568 bool
	var yyhl568 bool = l >= 0
	yyj568++
	if yyhl568 {
		yyb568 = yyj568 > l
	} else {
		yyb568 = r.CheckBreak()
	}
	if yyb568 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj568++
		if yyhl568 {
			yyb568 = yyj568 > l
		} else {
			yyb568 = r.CheckBreak()
		}
		if yyb568 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj568-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym570 := z.EncBinary()
		_ = yym570
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep571 := !z.EncBinary()
			yy2arr571 := z.EncBasicHandle().StructToArray
			var yyq571 [2]bool
			_, _, _ = yysep571, yyq571, yy2arr571
			const yyr571 bool = false
			yyq571[0] = x.Type != ""
			yyq571[1] = x.RollingUpdate != nil
			var yynn571 int
			if yyr571 || yy2arr571 {
				r.EncodeArrayStart(2)
			} else {
				yynn571 = 0
				for _, b := range yyq571 {
					if b {
						yynn571++
					}
				}
				r.EncodeMapStart(yynn571)
				yynn571 = 0
			}
			if yyr571 || yy2arr571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq571[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq571[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr571 || yy2arr571 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq571[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq571[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr571 || yy2arr571 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym574 := z.DecBinary()
	_ = yym574
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct575 := r.ContainerType()
		if yyct575 == codecSelferValueTypeMap1234 {
			yyl575 := r.ReadMapStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl575, d)
			}
		} else if yyct575 == codecSelferValueTypeArray1234 {
			yyl575 := r.ReadArrayStart()
			if yyl575 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl575, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys576Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys576Slc
	var yyhl576 bool = l >= 0
	for yyj576 := 0; ; yyj576++ {
		if yyhl576 {
			if yyj576 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys576Slc = r.DecodeBytes(yys576Slc, true, true)
		yys576 := string(yys576Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys576 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys576)
		} // end switch yys576
	} // end for yyj576
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj579 int
	var yyb579 bool
	var yyhl579 bool = l >= 0
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj579++
	if yyhl579 {
		yyb579 = yyj579 > l
	} else {
		yyb579 = r.CheckBreak()
	}
	if yyb579 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj579++
		if yyhl579 {
			yyb579 = yyj579 > l
		} else {
			yyb579 = r.CheckBreak()
		}
		if yyb579 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj579-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym582 := z.EncBinary()
	_ = yym582
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym583 := z.DecBinary()
	_ = yym583
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym584 := z.EncBinary()
		_ = yym584
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep585 := !z.EncBinary()
			yy2arr585 := z.EncBasicHandle().StructToArray
			var yyq585 [2]bool
			_, _, _ = yysep585, yyq585, yy2arr585
			const yyr585 bool = false
			yyq585[0] = x.MaxUnavailable != nil
			yyq585[1] = x.MaxSurge != nil
			var yynn585 int
			if yyr585 || yy2arr585 {
				r.EncodeArrayStart(2)
			} else {
				yynn585 = 0
				for _, b := range yyq585 {
					if b {
						yynn585++
					}
				}
				r.EncodeMapStart(yynn585)
				yynn585 = 0
			}
			if yyr585 || yy2arr585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq585[0] {
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym587 := z.EncBinary()
						_ = yym587
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym587 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq585[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxUnavailable == nil {
						r.EncodeNil()
					} else {
						yym588 := z.EncBinary()
						_ = yym588
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxUnavailable) {
						} else if !yym588 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxUnavailable)
						} else {
							z.EncFallback(x.MaxUnavailable)
						}
					}
				}
			}
			if yyr585 || yy2arr585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq585[1] {
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym590 := z.EncBinary()
						_ = yym590
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym590 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq585[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxSurge == nil {
						r.EncodeNil()
					} else {
						yym591 := z.EncBinary()
						_ = yym591
						if false {
						} else if z.HasExtensions() && z.EncExt(x.MaxSurge) {
						} else if !yym591 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.MaxSurge)
						} else {
							z.EncFallback(x.MaxSurge)
						}
					}
				}
			}
			if yyr585 || yy2arr585 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym592 := z.DecBinary()
	_ = yym592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct593 := r.ContainerType()
		if yyct593 == codecSelferValueTypeMap1234 {
			yyl593 := r.ReadMapStart()
			if yyl593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl593, d)
			}
		} else if yyct593 == codecSelferValueTypeArray1234 {
			yyl593 := r.ReadArrayStart()
			if yyl593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys594Slc
	var yyhl594 bool = l >= 0
	for yyj594 := 0; ; yyj594++ {
		if yyhl594 {
			if yyj594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys594Slc = r.DecodeBytes(yys594Slc, true, true)
		yys594 := string(yys594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys594 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				if x.MaxUnavailable != nil {
					x.MaxUnavailable = nil
				}
			} else {
				if x.MaxUnavailable == nil {
					x.MaxUnavailable = new(pkg5_intstr.IntOrString)
				}
				yym596 := z.DecBinary()
				_ = yym596
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
				} else if !yym596 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxUnavailable)
				} else {
					z.DecFallback(x.MaxUnavailable, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				if x.MaxSurge != nil {
					x.MaxSurge = nil
				}
			} else {
				if x.MaxSurge == nil {
					x.MaxSurge = new(pkg5_intstr.IntOrString)
				}
				yym598 := z.DecBinary()
				_ = yym598
				if false {
				} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
				} else if !yym598 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.MaxSurge)
				} else {
					z.DecFallback(x.MaxSurge, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys594)
		} // end switch yys594
	} // end for yyj594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj599 int
	var yyb599 bool
	var yyhl599 bool = l >= 0
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxUnavailable != nil {
			x.MaxUnavailable = nil
		}
	} else {
		if x.MaxUnavailable == nil {
			x.MaxUnavailable = new(pkg5_intstr.IntOrString)
		}
		yym601 := z.DecBinary()
		_ = yym601
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxUnavailable) {
		} else if !yym601 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxUnavailable)
		} else {
			z.DecFallback(x.MaxUnavailable, false)
		}
	}
	yyj599++
	if yyhl599 {
		yyb599 = yyj599 > l
	} else {
		yyb599 = r.CheckBreak()
	}
	if yyb599 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxSurge != nil {
			x.MaxSurge = nil
		}
	} else {
		if x.MaxSurge == nil {
			x.MaxSurge = new(pkg5_intstr.IntOrString)
		}
		yym603 := z.DecBinary()
		_ = yym603
		if false {
		} else if z.HasExtensions() && z.DecExt(x.MaxSurge) {
		} else if !yym603 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.MaxSurge)
		} else {
			z.DecFallback(x.MaxSurge, false)
		}
	}
	for {
		yyj599++
		if yyhl599 {
			yyb599 = yyj599 > l
		} else {
			yyb599 = r.CheckBreak()
		}
		if yyb599 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj599-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym604 := z.EncBinary()
		_ = yym604
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep605 := !z.EncBinary()
			yy2arr605 := z.EncBasicHandle().StructToArray
			var yyq605 [5]bool
			_, _, _ = yysep605, yyq605, yy2arr605
			const yyr605 bool = false
			yyq605[0] = x.ObservedGeneration != 0
			yyq605[1] = x.Replicas != 0
			yyq605[2] = x.UpdatedReplicas != 0
			yyq605[3] = x.AvailableReplicas != 0
			yyq605[4] = x.UnavailableReplicas != 0
			var yynn605 int
			if yyr605 || yy2arr605 {
				r.EncodeArrayStart(5)
			} else {
				yynn605 = 0
				for _, b := range yyq605 {
					if b {
						yynn605++
					}
				}
				r.EncodeMapStart(yynn605)
				yynn605 = 0
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq605[0] {
					yym607 := z.EncBinary()
					_ = yym607
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq605[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym608 := z.EncBinary()
					_ = yym608
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq605[1] {
					yym610 := z.EncBinary()
					_ = yym610
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq605[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym611 := z.EncBinary()
					_ = yym611
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq605[2] {
					yym613 := z.EncBinary()
					_ = yym613
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq605[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym614 := z.EncBinary()
					_ = yym614
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq605[3] {
					yym616 := z.EncBinary()
					_ = yym616
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq605[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym617 := z.EncBinary()
					_ = yym617
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq605[4] {
					yym619 := z.EncBinary()
					_ = yym619
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq605[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr605 || yy2arr605 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym621 := z.DecBinary()
	_ = yym621
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct622 := r.ContainerType()
		if yyct622 == codecSelferValueTypeMap1234 {
			yyl622 := r.ReadMapStart()
			if yyl622 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl622, d)
			}
		} else if yyct622 == codecSelferValueTypeArray1234 {
			yyl622 := r.ReadArrayStart()
			if yyl622 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl622, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys623Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys623Slc
	var yyhl623 bool = l >= 0
	for yyj623 := 0; ; yyj623++ {
		if yyhl623 {
			if yyj623 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys623Slc = r.DecodeBytes(yys623Slc, true, true)
		yys623 := string(yys623Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys623 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys623)
		} // end switch yys623
	} // end for yyj623
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj629 int
	var yyb629 bool
	var yyhl629 bool = l >= 0
	yyj629++
	if yyhl629 {
		yyb629 = yyj629 > l
	} else {
		yyb629 = r.CheckBreak()
	}
	if yyb629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj629++
	if yyhl629 {
		yyb629 = yyj629 > l
	} else {
		yyb629 = r.CheckBreak()
	}
	if yyb629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj629++
	if yyhl629 {
		yyb629 = yyj629 > l
	} else {
		yyb629 = r.CheckBreak()
	}
	if yyb629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int32(r.DecodeInt(32))
	}
	yyj629++
	if yyhl629 {
		yyb629 = yyj629 > l
	} else {
		yyb629 = r.CheckBreak()
	}
	if yyb629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj629++
	if yyhl629 {
		yyb629 = yyj629 > l
	} else {
		yyb629 = r.CheckBreak()
	}
	if yyb629 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int32(r.DecodeInt(32))
	}
	for {
		yyj629++
		if yyhl629 {
			yyb629 = yyj629 > l
		} else {
			yyb629 = r.CheckBreak()
		}
		if yyb629 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj629-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym635 := z.EncBinary()
		_ = yym635
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep636 := !z.EncBinary()
			yy2arr636 := z.EncBasicHandle().StructToArray
			var yyq636 [4]bool
			_, _, _ = yysep636, yyq636, yy2arr636
			const yyr636 bool = false
			yyq636[0] = x.Kind != ""
			yyq636[1] = x.APIVersion != ""
			yyq636[2] = true
			var yynn636 int
			if yyr636 || yy2arr636 {
				r.EncodeArrayStart(4)
			} else {
				yynn636 = 1
				for _, b := range yyq636 {
					if b {
						yynn636++
					}
				}
				r.EncodeMapStart(yynn636)
				yynn636 = 0
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq636[0] {
					yym638 := z.EncBinary()
					_ = yym638
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq636[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq636[1] {
					yym641 := z.EncBinary()
					_ = yym641
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq636[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq636[2] {
					yy644 := &x.ListMeta
					yym645 := z.EncBinary()
					_ = yym645
					if false {
					} else if z.HasExtensions() && z.EncExt(yy644) {
					} else {
						z.EncFallback(yy644)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq636[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy646 := &x.ListMeta
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else if z.HasExtensions() && z.EncExt(yy646) {
					} else {
						z.EncFallback(yy646)
					}
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym649 := z.EncBinary()
					_ = yym649
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr636 || yy2arr636 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym651 := z.DecBinary()
	_ = yym651
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct652 := r.ContainerType()
		if yyct652 == codecSelferValueTypeMap1234 {
			yyl652 := r.ReadMapStart()
			if yyl652 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl652, d)
			}
		} else if yyct652 == codecSelferValueTypeArray1234 {
			yyl652 := r.ReadArrayStart()
			if yyl652 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl652, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys653Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys653Slc
	var yyhl653 bool = l >= 0
	for yyj653 := 0; ; yyj653++ {
		if yyhl653 {
			if yyj653 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys653Slc = r.DecodeBytes(yys653Slc, true, true)
		yys653 := string(yys653Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys653 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv656 := &x.ListMeta
				yym657 := z.DecBinary()
				_ = yym657
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv656) {
				} else {
					z.DecFallback(yyv656, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv658 := &x.Items
				yym659 := z.DecBinary()
				_ = yym659
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv658), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys653)
		} // end switch yys653
	} // end for yyj653
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj660 int
	var yyb660 bool
	var yyhl660 bool = l >= 0
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv663 := &x.ListMeta
		yym664 := z.DecBinary()
		_ = yym664
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv663) {
		} else {
			z.DecFallback(yyv663, false)
		}
	}
	yyj660++
	if yyhl660 {
		yyb660 = yyj660 > l
	} else {
		yyb660 = r.CheckBreak()
	}
	if yyb660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv665 := &x.Items
		yym666 := z.DecBinary()
		_ = yym666
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv665), d)
		}
	}
	for {
		yyj660++
		if yyhl660 {
			yyb660 = yyj660 > l
		} else {
			yyb660 = r.CheckBreak()
		}
		if yyb660 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj660-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym667 := z.EncBinary()
		_ = yym667
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep668 := !z.EncBinary()
			yy2arr668 := z.EncBasicHandle().StructToArray
			var yyq668 [2]bool
			_, _, _ = yysep668, yyq668, yy2arr668
			const yyr668 bool = false
			yyq668[0] = x.Selector != nil
			var yynn668 int
			if yyr668 || yy2arr668 {
				r.EncodeArrayStart(2)
			} else {
				yynn668 = 1
				for _, b := range yyq668 {
					if b {
						yynn668++
					}
				}
				r.EncodeMapStart(yynn668)
				yynn668 = 0
			}
			if yyr668 || yy2arr668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq668[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq668[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr668 || yy2arr668 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy671 := &x.Template
				yym672 := z.EncBinary()
				_ = yym672
				if false {
				} else if z.HasExtensions() && z.EncExt(yy671) {
				} else {
					z.EncFallback(yy671)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy673 := &x.Template
				yym674 := z.EncBinary()
				_ = yym674
				if false {
				} else if z.HasExtensions() && z.EncExt(yy673) {
				} else {
					z.EncFallback(yy673)
				}
			}
			if yyr668 || yy2arr668 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym675 := z.DecBinary()
	_ = yym675
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct676 := r.ContainerType()
		if yyct676 == codecSelferValueTypeMap1234 {
			yyl676 := r.ReadMapStart()
			if yyl676 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl676, d)
			}
		} else if yyct676 == codecSelferValueTypeArray1234 {
			yyl676 := r.ReadArrayStart()
			if yyl676 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl676, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys677Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys677Slc
	var yyhl677 bool = l >= 0
	for yyj677 := 0; ; yyj677++ {
		if yyhl677 {
			if yyj677 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys677Slc = r.DecodeBytes(yys677Slc, true, true)
		yys677 := string(yys677Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys677 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv679 := &x.Template
				yym680 := z.DecBinary()
				_ = yym680
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv679) {
				} else {
					z.DecFallback(yyv679, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys677)
		} // end switch yys677
	} // end for yyj677
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj681 int
	var yyb681 bool
	var yyhl681 bool = l >= 0
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj681++
	if yyhl681 {
		yyb681 = yyj681 > l
	} else {
		yyb681 = r.CheckBreak()
	}
	if yyb681 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv683 := &x.Template
		yym684 := z.DecBinary()
		_ = yym684
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv683) {
		} else {
			z.DecFallback(yyv683, false)
		}
	}
	for {
		yyj681++
		if yyhl681 {
			yyb681 = yyj681 > l
		} else {
			yyb681 = r.CheckBreak()
		}
		if yyb681 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj681-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym685 := z.EncBinary()
		_ = yym685
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep686 := !z.EncBinary()
			yy2arr686 := z.EncBasicHandle().StructToArray
			var yyq686 [4]bool
			_, _, _ = yysep686, yyq686, yy2arr686
			const yyr686 bool = false
			var yynn686 int
			if yyr686 || yy2arr686 {
				r.EncodeArrayStart(4)
			} else {
				yynn686 = 4
				for _, b := range yyq686 {
					if b {
						yynn686++
					}
				}
				r.EncodeMapStart(yynn686)
				yynn686 = 0
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym688 := z.EncBinary()
				_ = yym688
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym689 := z.EncBinary()
				_ = yym689
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym691 := z.EncBinary()
				_ = yym691
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym692 := z.EncBinary()
				_ = yym692
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym694 := z.EncBinary()
				_ = yym694
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym695 := z.EncBinary()
				_ = yym695
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym697 := z.EncBinary()
				_ = yym697
				if false {
				} else {
					r.EncodeInt(int64(x.NumberReady))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberReady"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym698 := z.EncBinary()
				_ = yym698
				if false {
				} else {
					r.EncodeInt(int64(x.NumberReady))
				}
			}
			if yyr686 || yy2arr686 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym699 := z.DecBinary()
	_ = yym699
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct700 := r.ContainerType()
		if yyct700 == codecSelferValueTypeMap1234 {
			yyl700 := r.ReadMapStart()
			if yyl700 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl700, d)
			}
		} else if yyct700 == codecSelferValueTypeArray1234 {
			yyl700 := r.ReadArrayStart()
			if yyl700 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl700, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys701Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys701Slc
	var yyhl701 bool = l >= 0
	for yyj701 := 0; ; yyj701++ {
		if yyhl701 {
			if yyj701 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys701Slc = r.DecodeBytes(yys701Slc, true, true)
		yys701 := string(yys701Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys701 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int32(r.DecodeInt(32))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberReady":
			if r.TryDecodeAsNil() {
				x.NumberReady = 0
			} else {
				x.NumberReady = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys701)
		} // end switch yys701
	} // end for yyj701
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj706 int
	var yyb706 bool
	var yyhl706 bool = l >= 0
	yyj706++
	if yyhl706 {
		yyb706 = yyj706 > l
	} else {
		yyb706 = r.CheckBreak()
	}
	if yyb706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj706++
	if yyhl706 {
		yyb706 = yyj706 > l
	} else {
		yyb706 = r.CheckBreak()
	}
	if yyb706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int32(r.DecodeInt(32))
	}
	yyj706++
	if yyhl706 {
		yyb706 = yyj706 > l
	} else {
		yyb706 = r.CheckBreak()
	}
	if yyb706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj706++
	if yyhl706 {
		yyb706 = yyj706 > l
	} else {
		yyb706 = r.CheckBreak()
	}
	if yyb706 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberReady = 0
	} else {
		x.NumberReady = int32(r.DecodeInt(32))
	}
	for {
		yyj706++
		if yyhl706 {
			yyb706 = yyj706 > l
		} else {
			yyb706 = r.CheckBreak()
		}
		if yyb706 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj706-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym711 := z.EncBinary()
		_ = yym711
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep712 := !z.EncBinary()
			yy2arr712 := z.EncBasicHandle().StructToArray
			var yyq712 [5]bool
			_, _, _ = yysep712, yyq712, yy2arr712
			const yyr712 bool = false
			yyq712[0] = x.Kind != ""
			yyq712[1] = x.APIVersion != ""
			yyq712[2] = true
			yyq712[3] = true
			yyq712[4] = true
			var yynn712 int
			if yyr712 || yy2arr712 {
				r.EncodeArrayStart(5)
			} else {
				yynn712 = 0
				for _, b := range yyq712 {
					if b {
						yynn712++
					}
				}
				r.EncodeMapStart(yynn712)
				yynn712 = 0
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[0] {
					yym714 := z.EncBinary()
					_ = yym714
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym715 := z.EncBinary()
					_ = yym715
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[1] {
					yym717 := z.EncBinary()
					_ = yym717
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq712[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym718 := z.EncBinary()
					_ = yym718
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[2] {
					yy720 := &x.ObjectMeta
					yym721 := z.EncBinary()
					_ = yym721
					if false {
					} else if z.HasExtensions() && z.EncExt(yy720) {
					} else {
						z.EncFallback(yy720)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq712[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy722 := &x.ObjectMeta
					yym723 := z.EncBinary()
					_ = yym723
					if false {
					} else if z.HasExtensions() && z.EncExt(yy722) {
					} else {
						z.EncFallback(yy722)
					}
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[3] {
					yy725 := &x.Spec
					yy725.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq712[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy726 := &x.Spec
					yy726.CodecEncodeSelf(e)
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq712[4] {
					yy728 := &x.Status
					yy728.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq712[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy729 := &x.Status
					yy729.CodecEncodeSelf(e)
				}
			}
			if yyr712 || yy2arr712 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym730 := z.DecBinary()
	_ = yym730
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct731 := r.ContainerType()
		if yyct731 == codecSelferValueTypeMap1234 {
			yyl731 := r.ReadMapStart()
			if yyl731 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl731, d)
			}
		} else if yyct731 == codecSelferValueTypeArray1234 {
			yyl731 := r.ReadArrayStart()
			if yyl731 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl731, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys732Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys732Slc
	var yyhl732 bool = l >= 0
	for yyj732 := 0; ; yyj732++ {
		if yyhl732 {
			if yyj732 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys732Slc = r.DecodeBytes(yys732Slc, true, true)
		yys732 := string(yys732Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys732 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv735 := &x.ObjectMeta
				yym736 := z.DecBinary()
				_ = yym736
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv735) {
				} else {
					z.DecFallback(yyv735, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv737 := &x.Spec
				yyv737.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv738 := &x.Status
				yyv738.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys732)
		} // end switch yys732
	} // end for yyj732
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj739 int
	var yyb739 bool
	var yyhl739 bool = l >= 0
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv742 := &x.ObjectMeta
		yym743 := z.DecBinary()
		_ = yym743
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv742) {
		} else {
			z.DecFallback(yyv742, false)
		}
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv744 := &x.Spec
		yyv744.CodecDecodeSelf(d)
	}
	yyj739++
	if yyhl739 {
		yyb739 = yyj739 > l
	} else {
		yyb739 = r.CheckBreak()
	}
	if yyb739 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv745 := &x.Status
		yyv745.CodecDecodeSelf(d)
	}
	for {
		yyj739++
		if yyhl739 {
			yyb739 = yyj739 > l
		} else {
			yyb739 = r.CheckBreak()
		}
		if yyb739 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj739-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym746 := z.EncBinary()
		_ = yym746
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep747 := !z.EncBinary()
			yy2arr747 := z.EncBasicHandle().StructToArray
			var yyq747 [4]bool
			_, _, _ = yysep747, yyq747, yy2arr747
			const yyr747 bool = false
			yyq747[0] = x.Kind != ""
			yyq747[1] = x.APIVersion != ""
			yyq747[2] = true
			var yynn747 int
			if yyr747 || yy2arr747 {
				r.EncodeArrayStart(4)
			} else {
				yynn747 = 1
				for _, b := range yyq747 {
					if b {
						yynn747++
					}
				}
				r.EncodeMapStart(yynn747)
				yynn747 = 0
			}
			if yyr747 || yy2arr747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq747[0] {
					yym749 := z.EncBinary()
					_ = yym749
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq747[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym750 := z.EncBinary()
					_ = yym750
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr747 || yy2arr747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq747[1] {
					yym752 := z.EncBinary()
					_ = yym752
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq747[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym753 := z.EncBinary()
					_ = yym753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr747 || yy2arr747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq747[2] {
					yy755 := &x.ListMeta
					yym756 := z.EncBinary()
					_ = yym756
					if false {
					} else if z.HasExtensions() && z.EncExt(yy755) {
					} else {
						z.EncFallback(yy755)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq747[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy757 := &x.ListMeta
					yym758 := z.EncBinary()
					_ = yym758
					if false {
					} else if z.HasExtensions() && z.EncExt(yy757) {
					} else {
						z.EncFallback(yy757)
					}
				}
			}
			if yyr747 || yy2arr747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym760 := z.EncBinary()
					_ = yym760
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym761 := z.EncBinary()
					_ = yym761
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr747 || yy2arr747 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym762 := z.DecBinary()
	_ = yym762
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct763 := r.ContainerType()
		if yyct763 == codecSelferValueTypeMap1234 {
			yyl763 := r.ReadMapStart()
			if yyl763 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl763, d)
			}
		} else if yyct763 == codecSelferValueTypeArray1234 {
			yyl763 := r.ReadArrayStart()
			if yyl763 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl763, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys764Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys764Slc
	var yyhl764 bool = l >= 0
	for yyj764 := 0; ; yyj764++ {
		if yyhl764 {
			if yyj764 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys764Slc = r.DecodeBytes(yys764Slc, true, true)
		yys764 := string(yys764Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys764 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv767 := &x.ListMeta
				yym768 := z.DecBinary()
				_ = yym768
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv767) {
				} else {
					z.DecFallback(yyv767, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv769 := &x.Items
				yym770 := z.DecBinary()
				_ = yym770
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv769), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys764)
		} // end switch yys764
	} // end for yyj764
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj771 int
	var yyb771 bool
	var yyhl771 bool = l >= 0
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv774 := &x.ListMeta
		yym775 := z.DecBinary()
		_ = yym775
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv774) {
		} else {
			z.DecFallback(yyv774, false)
		}
	}
	yyj771++
	if yyhl771 {
		yyb771 = yyj771 > l
	} else {
		yyb771 = r.CheckBreak()
	}
	if yyb771 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv776 := &x.Items
		yym777 := z.DecBinary()
		_ = yym777
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv776), d)
		}
	}
	for {
		yyj771++
		if yyhl771 {
			yyb771 = yyj771 > l
		} else {
			yyb771 = r.CheckBreak()
		}
		if yyb771 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj771-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym778 := z.EncBinary()
		_ = yym778
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep779 := !z.EncBinary()
			yy2arr779 := z.EncBasicHandle().StructToArray
			var yyq779 [4]bool
			_, _, _ = yysep779, yyq779, yy2arr779
			const yyr779 bool = false
			yyq779[0] = x.Kind != ""
			yyq779[1] = x.APIVersion != ""
			yyq779[2] = true
			var yynn779 int
			if yyr779 || yy2arr779 {
				r.EncodeArrayStart(4)
			} else {
				yynn779 = 1
				for _, b := range yyq779 {
					if b {
						yynn779++
					}
				}
				r.EncodeMapStart(yynn779)
				yynn779 = 0
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq779[0] {
					yym781 := z.EncBinary()
					_ = yym781
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq779[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym782 := z.EncBinary()
					_ = yym782
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq779[1] {
					yym784 := z.EncBinary()
					_ = yym784
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq779[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym785 := z.EncBinary()
					_ = yym785
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq779[2] {
					yy787 := &x.ListMeta
					yym788 := z.EncBinary()
					_ = yym788
					if false {
					} else if z.HasExtensions() && z.EncExt(yy787) {
					} else {
						z.EncFallback(yy787)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq779[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy789 := &x.ListMeta
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else if z.HasExtensions() && z.EncExt(yy789) {
					} else {
						z.EncFallback(yy789)
					}
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym792 := z.EncBinary()
					_ = yym792
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym793 := z.EncBinary()
					_ = yym793
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr779 || yy2arr779 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym794 := z.DecBinary()
	_ = yym794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct795 := r.ContainerType()
		if yyct795 == codecSelferValueTypeMap1234 {
			yyl795 := r.ReadMapStart()
			if yyl795 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl795, d)
			}
		} else if yyct795 == codecSelferValueTypeArray1234 {
			yyl795 := r.ReadArrayStart()
			if yyl795 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys796Slc
	var yyhl796 bool = l >= 0
	for yyj796 := 0; ; yyj796++ {
		if yyhl796 {
			if yyj796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys796Slc = r.DecodeBytes(yys796Slc, true, true)
		yys796 := string(yys796Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys796 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv799 := &x.ListMeta
				yym800 := z.DecBinary()
				_ = yym800
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv799) {
				} else {
					z.DecFallback(yyv799, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv801 := &x.Items
				yym802 := z.DecBinary()
				_ = yym802
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv801), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys796)
		} // end switch yys796
	} // end for yyj796
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj803 int
	var yyb803 bool
	var yyhl803 bool = l >= 0
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv806 := &x.ListMeta
		yym807 := z.DecBinary()
		_ = yym807
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv806) {
		} else {
			z.DecFallback(yyv806, false)
		}
	}
	yyj803++
	if yyhl803 {
		yyb803 = yyj803 > l
	} else {
		yyb803 = r.CheckBreak()
	}
	if yyb803 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv808 := &x.Items
		yym809 := z.DecBinary()
		_ = yym809
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv808), d)
		}
	}
	for {
		yyj803++
		if yyhl803 {
			yyb803 = yyj803 > l
		} else {
			yyb803 = r.CheckBreak()
		}
		if yyb803 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj803-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym810 := z.EncBinary()
		_ = yym810
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep811 := !z.EncBinary()
			yy2arr811 := z.EncBasicHandle().StructToArray
			var yyq811 [5]bool
			_, _, _ = yysep811, yyq811, yy2arr811
			const yyr811 bool = false
			yyq811[0] = x.Kind != ""
			yyq811[1] = x.APIVersion != ""
			yyq811[2] = true
			yyq811[3] = true
			yyq811[4] = true
			var yynn811 int
			if yyr811 || yy2arr811 {
				r.EncodeArrayStart(5)
			} else {
				yynn811 = 0
				for _, b := range yyq811 {
					if b {
						yynn811++
					}
				}
				r.EncodeMapStart(yynn811)
				yynn811 = 0
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq811[0] {
					yym813 := z.EncBinary()
					_ = yym813
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq811[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym814 := z.EncBinary()
					_ = yym814
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq811[1] {
					yym816 := z.EncBinary()
					_ = yym816
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq811[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym817 := z.EncBinary()
					_ = yym817
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq811[2] {
					yy819 := &x.ObjectMeta
					yym820 := z.EncBinary()
					_ = yym820
					if false {
					} else if z.HasExtensions() && z.EncExt(yy819) {
					} else {
						z.EncFallback(yy819)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq811[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy821 := &x.ObjectMeta
					yym822 := z.EncBinary()
					_ = yym822
					if false {
					} else if z.HasExtensions() && z.EncExt(yy821) {
					} else {
						z.EncFallback(yy821)
					}
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq811[3] {
					yy824 := &x.Spec
					yy824.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq811[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy825 := &x.Spec
					yy825.CodecEncodeSelf(e)
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq811[4] {
					yy827 := &x.Status
					yy827.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq811[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy828 := &x.Status
					yy828.CodecEncodeSelf(e)
				}
			}
			if yyr811 || yy2arr811 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym829 := z.DecBinary()
	_ = yym829
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct830 := r.ContainerType()
		if yyct830 == codecSelferValueTypeMap1234 {
			yyl830 := r.ReadMapStart()
			if yyl830 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl830, d)
			}
		} else if yyct830 == codecSelferValueTypeArray1234 {
			yyl830 := r.ReadArrayStart()
			if yyl830 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl830, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys831Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys831Slc
	var yyhl831 bool = l >= 0
	for yyj831 := 0; ; yyj831++ {
		if yyhl831 {
			if yyj831 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys831Slc = r.DecodeBytes(yys831Slc, true, true)
		yys831 := string(yys831Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys831 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv834 := &x.ObjectMeta
				yym835 := z.DecBinary()
				_ = yym835
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv834) {
				} else {
					z.DecFallback(yyv834, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv836 := &x.Spec
				yyv836.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv837 := &x.Status
				yyv837.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys831)
		} // end switch yys831
	} // end for yyj831
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj838 int
	var yyb838 bool
	var yyhl838 bool = l >= 0
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv841 := &x.ObjectMeta
		yym842 := z.DecBinary()
		_ = yym842
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv841) {
		} else {
			z.DecFallback(yyv841, false)
		}
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv843 := &x.Spec
		yyv843.CodecDecodeSelf(d)
	}
	yyj838++
	if yyhl838 {
		yyb838 = yyj838 > l
	} else {
		yyb838 = r.CheckBreak()
	}
	if yyb838 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv844 := &x.Status
		yyv844.CodecDecodeSelf(d)
	}
	for {
		yyj838++
		if yyhl838 {
			yyb838 = yyj838 > l
		} else {
			yyb838 = r.CheckBreak()
		}
		if yyb838 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj838-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym845 := z.EncBinary()
		_ = yym845
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep846 := !z.EncBinary()
			yy2arr846 := z.EncBasicHandle().StructToArray
			var yyq846 [4]bool
			_, _, _ = yysep846, yyq846, yy2arr846
			const yyr846 bool = false
			yyq846[0] = x.Kind != ""
			yyq846[1] = x.APIVersion != ""
			yyq846[2] = true
			var yynn846 int
			if yyr846 || yy2arr846 {
				r.EncodeArrayStart(4)
			} else {
				yynn846 = 1
				for _, b := range yyq846 {
					if b {
						yynn846++
					}
				}
				r.EncodeMapStart(yynn846)
				yynn846 = 0
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[0] {
					yym848 := z.EncBinary()
					_ = yym848
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym849 := z.EncBinary()
					_ = yym849
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[1] {
					yym851 := z.EncBinary()
					_ = yym851
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq846[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym852 := z.EncBinary()
					_ = yym852
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq846[2] {
					yy854 := &x.ListMeta
					yym855 := z.EncBinary()
					_ = yym855
					if false {
					} else if z.HasExtensions() && z.EncExt(yy854) {
					} else {
						z.EncFallback(yy854)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq846[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy856 := &x.ListMeta
					yym857 := z.EncBinary()
					_ = yym857
					if false {
					} else if z.HasExtensions() && z.EncExt(yy856) {
					} else {
						z.EncFallback(yy856)
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym860 := z.EncBinary()
					_ = yym860
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr846 || yy2arr846 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym861 := z.DecBinary()
	_ = yym861
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct862 := r.ContainerType()
		if yyct862 == codecSelferValueTypeMap1234 {
			yyl862 := r.ReadMapStart()
			if yyl862 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl862, d)
			}
		} else if yyct862 == codecSelferValueTypeArray1234 {
			yyl862 := r.ReadArrayStart()
			if yyl862 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl862, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys863Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys863Slc
	var yyhl863 bool = l >= 0
	for yyj863 := 0; ; yyj863++ {
		if yyhl863 {
			if yyj863 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys863Slc = r.DecodeBytes(yys863Slc, true, true)
		yys863 := string(yys863Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys863 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv866 := &x.ListMeta
				yym867 := z.DecBinary()
				_ = yym867
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv866) {
				} else {
					z.DecFallback(yyv866, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv868 := &x.Items
				yym869 := z.DecBinary()
				_ = yym869
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv868), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys863)
		} // end switch yys863
	} // end for yyj863
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj870 int
	var yyb870 bool
	var yyhl870 bool = l >= 0
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv873 := &x.ListMeta
		yym874 := z.DecBinary()
		_ = yym874
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv873) {
		} else {
			z.DecFallback(yyv873, false)
		}
	}
	yyj870++
	if yyhl870 {
		yyb870 = yyj870 > l
	} else {
		yyb870 = r.CheckBreak()
	}
	if yyb870 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv875 := &x.Items
		yym876 := z.DecBinary()
		_ = yym876
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv875), d)
		}
	}
	for {
		yyj870++
		if yyhl870 {
			yyb870 = yyj870 > l
		} else {
			yyb870 = r.CheckBreak()
		}
		if yyb870 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj870-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym877 := z.EncBinary()
		_ = yym877
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep878 := !z.EncBinary()
			yy2arr878 := z.EncBasicHandle().StructToArray
			var yyq878 [6]bool
			_, _, _ = yysep878, yyq878, yy2arr878
			const yyr878 bool = false
			yyq878[0] = x.Parallelism != nil
			yyq878[1] = x.Completions != nil
			yyq878[2] = x.ActiveDeadlineSeconds != nil
			yyq878[3] = x.Selector != nil
			yyq878[4] = x.AutoSelector != nil
			var yynn878 int
			if yyr878 || yy2arr878 {
				r.EncodeArrayStart(6)
			} else {
				yynn878 = 1
				for _, b := range yyq878 {
					if b {
						yynn878++
					}
				}
				r.EncodeMapStart(yynn878)
				yynn878 = 0
			}
			if yyr878 || yy2arr878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq878[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy880 := *x.Parallelism
						yym881 := z.EncBinary()
						_ = yym881
						if false {
						} else {
							r.EncodeInt(int64(yy880))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq878[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy882 := *x.Parallelism
						yym883 := z.EncBinary()
						_ = yym883
						if false {
						} else {
							r.EncodeInt(int64(yy882))
						}
					}
				}
			}
			if yyr878 || yy2arr878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq878[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy885 := *x.Completions
						yym886 := z.EncBinary()
						_ = yym886
						if false {
						} else {
							r.EncodeInt(int64(yy885))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq878[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy887 := *x.Completions
						yym888 := z.EncBinary()
						_ = yym888
						if false {
						} else {
							r.EncodeInt(int64(yy887))
						}
					}
				}
			}
			if yyr878 || yy2arr878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq878[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy890 := *x.ActiveDeadlineSeconds
						yym891 := z.EncBinary()
						_ = yym891
						if false {
						} else {
							r.EncodeInt(int64(yy890))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq878[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy892 := *x.ActiveDeadlineSeconds
						yym893 := z.EncBinary()
						_ = yym893
						if false {
						} else {
							r.EncodeInt(int64(yy892))
						}
					}
				}
			}
			if yyr878 || yy2arr878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq878[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq878[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr878 || yy2arr878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq878[4] {
					if x.AutoSelector == nil {
						r.EncodeNil()
					} else {
						yy896 := *x.AutoSelector
						yym897 := z.EncBinary()
						_ = yym897
						if false {
						} else {
							r.EncodeBool(bool(yy896))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq878[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("autoSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AutoSelector == nil {
						r.EncodeNil()
					} else {
						yy898 := *x.AutoSelector
						yym899 := z.EncBinary()
						_ = yym899
						if false {
						} else {
							r.EncodeBool(bool(yy898))
						}
					}
				}
			}
			if yyr878 || yy2arr878 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy901 := &x.Template
				yym902 := z.EncBinary()
				_ = yym902
				if false {
				} else if z.HasExtensions() && z.EncExt(yy901) {
				} else {
					z.EncFallback(yy901)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy903 := &x.Template
				yym904 := z.EncBinary()
				_ = yym904
				if false {
				} else if z.HasExtensions() && z.EncExt(yy903) {
				} else {
					z.EncFallback(yy903)
				}
			}
			if yyr878 || yy2arr878 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym905 := z.DecBinary()
	_ = yym905
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct906 := r.ContainerType()
		if yyct906 == codecSelferValueTypeMap1234 {
			yyl906 := r.ReadMapStart()
			if yyl906 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl906, d)
			}
		} else if yyct906 == codecSelferValueTypeArray1234 {
			yyl906 := r.ReadArrayStart()
			if yyl906 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl906, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys907Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys907Slc
	var yyhl907 bool = l >= 0
	for yyj907 := 0; ; yyj907++ {
		if yyhl907 {
			if yyj907 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys907Slc = r.DecodeBytes(yys907Slc, true, true)
		yys907 := string(yys907Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys907 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int32)
				}
				yym909 := z.DecBinary()
				_ = yym909
				if false {
				} else {
					*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int32)
				}
				yym911 := z.DecBinary()
				_ = yym911
				if false {
				} else {
					*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym913 := z.DecBinary()
				_ = yym913
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "autoSelector":
			if r.TryDecodeAsNil() {
				if x.AutoSelector != nil {
					x.AutoSelector = nil
				}
			} else {
				if x.AutoSelector == nil {
					x.AutoSelector = new(bool)
				}
				yym916 := z.DecBinary()
				_ = yym916
				if false {
				} else {
					*((*bool)(x.AutoSelector)) = r.DecodeBool()
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv917 := &x.Template
				yym918 := z.DecBinary()
				_ = yym918
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv917) {
				} else {
					z.DecFallback(yyv917, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys907)
		} // end switch yys907
	} // end for yyj907
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj919 int
	var yyb919 bool
	var yyhl919 bool = l >= 0
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int32)
		}
		yym921 := z.DecBinary()
		_ = yym921
		if false {
		} else {
			*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
		}
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int32)
		}
		yym923 := z.DecBinary()
		_ = yym923
		if false {
		} else {
			*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
		}
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym925 := z.DecBinary()
		_ = yym925
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AutoSelector != nil {
			x.AutoSelector = nil
		}
	} else {
		if x.AutoSelector == nil {
			x.AutoSelector = new(bool)
		}
		yym928 := z.DecBinary()
		_ = yym928
		if false {
		} else {
			*((*bool)(x.AutoSelector)) = r.DecodeBool()
		}
	}
	yyj919++
	if yyhl919 {
		yyb919 = yyj919 > l
	} else {
		yyb919 = r.CheckBreak()
	}
	if yyb919 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv929 := &x.Template
		yym930 := z.DecBinary()
		_ = yym930
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv929) {
		} else {
			z.DecFallback(yyv929, false)
		}
	}
	for {
		yyj919++
		if yyhl919 {
			yyb919 = yyj919 > l
		} else {
			yyb919 = r.CheckBreak()
		}
		if yyb919 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj919-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym931 := z.EncBinary()
		_ = yym931
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep932 := !z.EncBinary()
			yy2arr932 := z.EncBasicHandle().StructToArray
			var yyq932 [6]bool
			_, _, _ = yysep932, yyq932, yy2arr932
			const yyr932 bool = false
			yyq932[0] = len(x.Conditions) != 0
			yyq932[1] = x.StartTime != nil
			yyq932[2] = x.CompletionTime != nil
			yyq932[3] = x.Active != 0
			yyq932[4] = x.Succeeded != 0
			yyq932[5] = x.Failed != 0
			var yynn932 int
			if yyr932 || yy2arr932 {
				r.EncodeArrayStart(6)
			} else {
				yynn932 = 0
				for _, b := range yyq932 {
					if b {
						yynn932++
					}
				}
				r.EncodeMapStart(yynn932)
				yynn932 = 0
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym934 := z.EncBinary()
						_ = yym934
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq932[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym935 := z.EncBinary()
						_ = yym935
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym937 := z.EncBinary()
						_ = yym937
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym937 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym937 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq932[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym938 := z.EncBinary()
						_ = yym938
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym938 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym938 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym940 := z.EncBinary()
						_ = yym940
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym940 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym940 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq932[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym941 := z.EncBinary()
						_ = yym941
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym941 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym941 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[3] {
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq932[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym944 := z.EncBinary()
					_ = yym944
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[4] {
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq932[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym947 := z.EncBinary()
					_ = yym947
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq932[5] {
					yym949 := z.EncBinary()
					_ = yym949
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq932[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr932 || yy2arr932 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym951 := z.DecBinary()
	_ = yym951
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct952 := r.ContainerType()
		if yyct952 == codecSelferValueTypeMap1234 {
			yyl952 := r.ReadMapStart()
			if yyl952 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl952, d)
			}
		} else if yyct952 == codecSelferValueTypeArray1234 {
			yyl952 := r.ReadArrayStart()
			if yyl952 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl952, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys953Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys953Slc
	var yyhl953 bool = l >= 0
	for yyj953 := 0; ; yyj953++ {
		if yyhl953 {
			if yyj953 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys953Slc = r.DecodeBytes(yys953Slc, true, true)
		yys953 := string(yys953Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys953 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv954 := &x.Conditions
				yym955 := z.DecBinary()
				_ = yym955
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv954), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym957 := z.DecBinary()
				_ = yym957
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym957 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym957 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym959 := z.DecBinary()
				_ = yym959
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym959 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym959 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int32(r.DecodeInt(32))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int32(r.DecodeInt(32))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys953)
		} // end switch yys953
	} // end for yyj953
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj963 int
	var yyb963 bool
	var yyhl963 bool = l >= 0
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv964 := &x.Conditions
		yym965 := z.DecBinary()
		_ = yym965
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv964), d)
		}
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym967 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym967 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym969 := z.DecBinary()
		_ = yym969
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym969 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym969 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int32(r.DecodeInt(32))
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int32(r.DecodeInt(32))
	}
	yyj963++
	if yyhl963 {
		yyb963 = yyj963 > l
	} else {
		yyb963 = r.CheckBreak()
	}
	if yyb963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int32(r.DecodeInt(32))
	}
	for {
		yyj963++
		if yyhl963 {
			yyb963 = yyj963 > l
		} else {
			yyb963 = r.CheckBreak()
		}
		if yyb963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym973 := z.EncBinary()
	_ = yym973
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym974 := z.DecBinary()
	_ = yym974
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym975 := z.EncBinary()
		_ = yym975
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep976 := !z.EncBinary()
			yy2arr976 := z.EncBasicHandle().StructToArray
			var yyq976 [6]bool
			_, _, _ = yysep976, yyq976, yy2arr976
			const yyr976 bool = false
			yyq976[2] = true
			yyq976[3] = true
			yyq976[4] = x.Reason != ""
			yyq976[5] = x.Message != ""
			var yynn976 int
			if yyr976 || yy2arr976 {
				r.EncodeArrayStart(6)
			} else {
				yynn976 = 2
				for _, b := range yyq976 {
					if b {
						yynn976++
					}
				}
				r.EncodeMapStart(yynn976)
				yynn976 = 0
			}
			if yyr976 || yy2arr976 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr976 || yy2arr976 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym979 := z.EncBinary()
				_ = yym979
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym980 := z.EncBinary()
				_ = yym980
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr976 || yy2arr976 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq976[2] {
					yy982 := &x.LastProbeTime
					yym983 := z.EncBinary()
					_ = yym983
					if false {
					} else if z.HasExtensions() && z.EncExt(yy982) {
					} else if yym983 {
						z.EncBinaryMarshal(yy982)
					} else if !yym983 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy982)
					} else {
						z.EncFallback(yy982)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq976[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy984 := &x.LastProbeTime
					yym985 := z.EncBinary()
					_ = yym985
					if false {
					} else if z.HasExtensions() && z.EncExt(yy984) {
					} else if yym985 {
						z.EncBinaryMarshal(yy984)
					} else if !yym985 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy984)
					} else {
						z.EncFallback(yy984)
					}
				}
			}
			if yyr976 || yy2arr976 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq976[3] {
					yy987 := &x.LastTransitionTime
					yym988 := z.EncBinary()
					_ = yym988
					if false {
					} else if z.HasExtensions() && z.EncExt(yy987) {
					} else if yym988 {
						z.EncBinaryMarshal(yy987)
					} else if !yym988 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy987)
					} else {
						z.EncFallback(yy987)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq976[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy989 := &x.LastTransitionTime
					yym990 := z.EncBinary()
					_ = yym990
					if false {
					} else if z.HasExtensions() && z.EncExt(yy989) {
					} else if yym990 {
						z.EncBinaryMarshal(yy989)
					} else if !yym990 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy989)
					} else {
						z.EncFallback(yy989)
					}
				}
			}
			if yyr976 || yy2arr976 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq976[4] {
					yym992 := z.EncBinary()
					_ = yym992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq976[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym993 := z.EncBinary()
					_ = yym993
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr976 || yy2arr976 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq976[5] {
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq976[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym996 := z.EncBinary()
					_ = yym996
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr976 || yy2arr976 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym997 := z.DecBinary()
	_ = yym997
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct998 := r.ContainerType()
		if yyct998 == codecSelferValueTypeMap1234 {
			yyl998 := r.ReadMapStart()
			if yyl998 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl998, d)
			}
		} else if yyct998 == codecSelferValueTypeArray1234 {
			yyl998 := r.ReadArrayStart()
			if yyl998 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl998, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys999Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys999Slc
	var yyhl999 bool = l >= 0
	for yyj999 := 0; ; yyj999++ {
		if yyhl999 {
			if yyj999 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys999Slc = r.DecodeBytes(yys999Slc, true, true)
		yys999 := string(yys999Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys999 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv1002 := &x.LastProbeTime
				yym1003 := z.DecBinary()
				_ = yym1003
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1002) {
				} else if yym1003 {
					z.DecBinaryUnmarshal(yyv1002)
				} else if !yym1003 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1002)
				} else {
					z.DecFallback(yyv1002, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv1004 := &x.LastTransitionTime
				yym1005 := z.DecBinary()
				_ = yym1005
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1004) {
				} else if yym1005 {
					z.DecBinaryUnmarshal(yyv1004)
				} else if !yym1005 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1004)
				} else {
					z.DecFallback(yyv1004, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys999)
		} // end switch yys999
	} // end for yyj999
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1008 int
	var yyb1008 bool
	var yyhl1008 bool = l >= 0
	yyj1008++
	if yyhl1008 {
		yyb1008 = yyj1008 > l
	} else {
		yyb1008 = r.CheckBreak()
	}
	if yyb1008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj1008++
	if yyhl1008 {
		yyb1008 = yyj1008 > l
	} else {
		yyb1008 = r.CheckBreak()
	}
	if yyb1008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj1008++
	if yyhl1008 {
		yyb1008 = yyj1008 > l
	} else {
		yyb1008 = r.CheckBreak()
	}
	if yyb1008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv1011 := &x.LastProbeTime
		yym1012 := z.DecBinary()
		_ = yym1012
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1011) {
		} else if yym1012 {
			z.DecBinaryUnmarshal(yyv1011)
		} else if !yym1012 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1011)
		} else {
			z.DecFallback(yyv1011, false)
		}
	}
	yyj1008++
	if yyhl1008 {
		yyb1008 = yyj1008 > l
	} else {
		yyb1008 = r.CheckBreak()
	}
	if yyb1008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv1013 := &x.LastTransitionTime
		yym1014 := z.DecBinary()
		_ = yym1014
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1013) {
		} else if yym1014 {
			z.DecBinaryUnmarshal(yyv1013)
		} else if !yym1014 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1013)
		} else {
			z.DecFallback(yyv1013, false)
		}
	}
	yyj1008++
	if yyhl1008 {
		yyb1008 = yyj1008 > l
	} else {
		yyb1008 = r.CheckBreak()
	}
	if yyb1008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1008++
	if yyhl1008 {
		yyb1008 = yyj1008 > l
	} else {
		yyb1008 = r.CheckBreak()
	}
	if yyb1008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1008++
		if yyhl1008 {
			yyb1008 = yyj1008 > l
		} else {
			yyb1008 = r.CheckBreak()
		}
		if yyb1008 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1008-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1017 := z.EncBinary()
		_ = yym1017
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1018 := !z.EncBinary()
			yy2arr1018 := z.EncBasicHandle().StructToArray
			var yyq1018 [5]bool
			_, _, _ = yysep1018, yyq1018, yy2arr1018
			const yyr1018 bool = false
			yyq1018[0] = x.Kind != ""
			yyq1018[1] = x.APIVersion != ""
			yyq1018[2] = true
			yyq1018[3] = true
			yyq1018[4] = true
			var yynn1018 int
			if yyr1018 || yy2arr1018 {
				r.EncodeArrayStart(5)
			} else {
				yynn1018 = 0
				for _, b := range yyq1018 {
					if b {
						yynn1018++
					}
				}
				r.EncodeMapStart(yynn1018)
				yynn1018 = 0
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1018[0] {
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1018[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1021 := z.EncBinary()
					_ = yym1021
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1018[1] {
					yym1023 := z.EncBinary()
					_ = yym1023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1018[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1024 := z.EncBinary()
					_ = yym1024
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1018[2] {
					yy1026 := &x.ObjectMeta
					yym1027 := z.EncBinary()
					_ = yym1027
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1026) {
					} else {
						z.EncFallback(yy1026)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1028 := &x.ObjectMeta
					yym1029 := z.EncBinary()
					_ = yym1029
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1028) {
					} else {
						z.EncFallback(yy1028)
					}
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1018[3] {
					yy1031 := &x.Spec
					yy1031.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1032 := &x.Spec
					yy1032.CodecEncodeSelf(e)
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1018[4] {
					yy1034 := &x.Status
					yy1034.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1018[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1035 := &x.Status
					yy1035.CodecEncodeSelf(e)
				}
			}
			if yyr1018 || yy2arr1018 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1036 := z.DecBinary()
	_ = yym1036
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1037 := r.ContainerType()
		if yyct1037 == codecSelferValueTypeMap1234 {
			yyl1037 := r.ReadMapStart()
			if yyl1037 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1037, d)
			}
		} else if yyct1037 == codecSelferValueTypeArray1234 {
			yyl1037 := r.ReadArrayStart()
			if yyl1037 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1037, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1038Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1038Slc
	var yyhl1038 bool = l >= 0
	for yyj1038 := 0; ; yyj1038++ {
		if yyhl1038 {
			if yyj1038 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1038Slc = r.DecodeBytes(yys1038Slc, true, true)
		yys1038 := string(yys1038Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1038 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1041 := &x.ObjectMeta
				yym1042 := z.DecBinary()
				_ = yym1042
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1041) {
				} else {
					z.DecFallback(yyv1041, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv1043 := &x.Spec
				yyv1043.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv1044 := &x.Status
				yyv1044.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1038)
		} // end switch yys1038
	} // end for yyj1038
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1045 int
	var yyb1045 bool
	var yyhl1045 bool = l >= 0
	yyj1045++
	if yyhl1045 {
		yyb1045 = yyj1045 > l
	} else {
		yyb1045 = r.CheckBreak()
	}
	if yyb1045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1045++
	if yyhl1045 {
		yyb1045 = yyj1045 > l
	} else {
		yyb1045 = r.CheckBreak()
	}
	if yyb1045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1045++
	if yyhl1045 {
		yyb1045 = yyj1045 > l
	} else {
		yyb1045 = r.CheckBreak()
	}
	if yyb1045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1048 := &x.ObjectMeta
		yym1049 := z.DecBinary()
		_ = yym1049
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1048) {
		} else {
			z.DecFallback(yyv1048, false)
		}
	}
	yyj1045++
	if yyhl1045 {
		yyb1045 = yyj1045 > l
	} else {
		yyb1045 = r.CheckBreak()
	}
	if yyb1045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv1050 := &x.Spec
		yyv1050.CodecDecodeSelf(d)
	}
	yyj1045++
	if yyhl1045 {
		yyb1045 = yyj1045 > l
	} else {
		yyb1045 = r.CheckBreak()
	}
	if yyb1045 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv1051 := &x.Status
		yyv1051.CodecDecodeSelf(d)
	}
	for {
		yyj1045++
		if yyhl1045 {
			yyb1045 = yyj1045 > l
		} else {
			yyb1045 = r.CheckBreak()
		}
		if yyb1045 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1045-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1052 := z.EncBinary()
		_ = yym1052
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1053 := !z.EncBinary()
			yy2arr1053 := z.EncBasicHandle().StructToArray
			var yyq1053 [4]bool
			_, _, _ = yysep1053, yyq1053, yy2arr1053
			const yyr1053 bool = false
			yyq1053[0] = x.Kind != ""
			yyq1053[1] = x.APIVersion != ""
			yyq1053[2] = true
			var yynn1053 int
			if yyr1053 || yy2arr1053 {
				r.EncodeArrayStart(4)
			} else {
				yynn1053 = 1
				for _, b := range yyq1053 {
					if b {
						yynn1053++
					}
				}
				r.EncodeMapStart(yynn1053)
				yynn1053 = 0
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1053[0] {
					yym1055 := z.EncBinary()
					_ = yym1055
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1053[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1056 := z.EncBinary()
					_ = yym1056
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1053[1] {
					yym1058 := z.EncBinary()
					_ = yym1058
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1053[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1059 := z.EncBinary()
					_ = yym1059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1053[2] {
					yy1061 := &x.ListMeta
					yym1062 := z.EncBinary()
					_ = yym1062
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1061) {
					} else {
						z.EncFallback(yy1061)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1053[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1063 := &x.ListMeta
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1063) {
					} else {
						z.EncFallback(yy1063)
					}
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1066 := z.EncBinary()
					_ = yym1066
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1067 := z.EncBinary()
					_ = yym1067
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr1053 || yy2arr1053 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1068 := z.DecBinary()
	_ = yym1068
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1069 := r.ContainerType()
		if yyct1069 == codecSelferValueTypeMap1234 {
			yyl1069 := r.ReadMapStart()
			if yyl1069 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1069, d)
			}
		} else if yyct1069 == codecSelferValueTypeArray1234 {
			yyl1069 := r.ReadArrayStart()
			if yyl1069 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1069, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1070Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1070Slc
	var yyhl1070 bool = l >= 0
	for yyj1070 := 0; ; yyj1070++ {
		if yyhl1070 {
			if yyj1070 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1070Slc = r.DecodeBytes(yys1070Slc, true, true)
		yys1070 := string(yys1070Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1070 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1073 := &x.ListMeta
				yym1074 := z.DecBinary()
				_ = yym1074
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1073) {
				} else {
					z.DecFallback(yyv1073, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1075 := &x.Items
				yym1076 := z.DecBinary()
				_ = yym1076
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv1075), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1070)
		} // end switch yys1070
	} // end for yyj1070
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1077 int
	var yyb1077 bool
	var yyhl1077 bool = l >= 0
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1080 := &x.ListMeta
		yym1081 := z.DecBinary()
		_ = yym1081
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1080) {
		} else {
			z.DecFallback(yyv1080, false)
		}
	}
	yyj1077++
	if yyhl1077 {
		yyb1077 = yyj1077 > l
	} else {
		yyb1077 = r.CheckBreak()
	}
	if yyb1077 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1082 := &x.Items
		yym1083 := z.DecBinary()
		_ = yym1083
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv1082), d)
		}
	}
	for {
		yyj1077++
		if yyhl1077 {
			yyb1077 = yyj1077 > l
		} else {
			yyb1077 = r.CheckBreak()
		}
		if yyb1077 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1077-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1084 := z.EncBinary()
		_ = yym1084
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1085 := !z.EncBinary()
			yy2arr1085 := z.EncBasicHandle().StructToArray
			var yyq1085 [3]bool
			_, _, _ = yysep1085, yyq1085, yy2arr1085
			const yyr1085 bool = false
			yyq1085[0] = x.Backend != nil
			yyq1085[1] = len(x.TLS) != 0
			yyq1085[2] = len(x.Rules) != 0
			var yynn1085 int
			if yyr1085 || yy2arr1085 {
				r.EncodeArrayStart(3)
			} else {
				yynn1085 = 0
				for _, b := range yyq1085 {
					if b {
						yynn1085++
					}
				}
				r.EncodeMapStart(yynn1085)
				yynn1085 = 0
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1085[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[1] {
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym1088 := z.EncBinary()
						_ = yym1088
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1085[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tls"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym1089 := z.EncBinary()
						_ = yym1089
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1085[2] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1091 := z.EncBinary()
						_ = yym1091
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1085[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym1092 := z.EncBinary()
						_ = yym1092
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr1085 || yy2arr1085 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1093 := z.DecBinary()
	_ = yym1093
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1094 := r.ContainerType()
		if yyct1094 == codecSelferValueTypeMap1234 {
			yyl1094 := r.ReadMapStart()
			if yyl1094 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1094, d)
			}
		} else if yyct1094 == codecSelferValueTypeArray1234 {
			yyl1094 := r.ReadArrayStart()
			if yyl1094 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1094, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1095Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1095Slc
	var yyhl1095 bool = l >= 0
	for yyj1095 := 0; ; yyj1095++ {
		if yyhl1095 {
			if yyj1095 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1095Slc = r.DecodeBytes(yys1095Slc, true, true)
		yys1095 := string(yys1095Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1095 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "tls":
			if r.TryDecodeAsNil() {
				x.TLS = nil
			} else {
				yyv1097 := &x.TLS
				yym1098 := z.DecBinary()
				_ = yym1098
				if false {
				} else {
					h.decSliceIngressTLS((*[]IngressTLS)(yyv1097), d)
				}
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv1099 := &x.Rules
				yym1100 := z.DecBinary()
				_ = yym1100
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv1099), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1095)
		} // end switch yys1095
	} // end for yyj1095
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1101 int
	var yyb1101 bool
	var yyhl1101 bool = l >= 0
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TLS = nil
	} else {
		yyv1103 := &x.TLS
		yym1104 := z.DecBinary()
		_ = yym1104
		if false {
		} else {
			h.decSliceIngressTLS((*[]IngressTLS)(yyv1103), d)
		}
	}
	yyj1101++
	if yyhl1101 {
		yyb1101 = yyj1101 > l
	} else {
		yyb1101 = r.CheckBreak()
	}
	if yyb1101 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv1105 := &x.Rules
		yym1106 := z.DecBinary()
		_ = yym1106
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv1105), d)
		}
	}
	for {
		yyj1101++
		if yyhl1101 {
			yyb1101 = yyj1101 > l
		} else {
			yyb1101 = r.CheckBreak()
		}
		if yyb1101 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1101-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressTLS) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1107 := z.EncBinary()
		_ = yym1107
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1108 := !z.EncBinary()
			yy2arr1108 := z.EncBasicHandle().StructToArray
			var yyq1108 [2]bool
			_, _, _ = yysep1108, yyq1108, yy2arr1108
			const yyr1108 bool = false
			yyq1108[0] = len(x.Hosts) != 0
			yyq1108[1] = x.SecretName != ""
			var yynn1108 int
			if yyr1108 || yy2arr1108 {
				r.EncodeArrayStart(2)
			} else {
				yynn1108 = 0
				for _, b := range yyq1108 {
					if b {
						yynn1108++
					}
				}
				r.EncodeMapStart(yynn1108)
				yynn1108 = 0
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1108[0] {
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym1110 := z.EncBinary()
						_ = yym1110
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1108[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hosts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym1111 := z.EncBinary()
						_ = yym1111
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				}
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1108[1] {
					yym1113 := z.EncBinary()
					_ = yym1113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1108[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1114 := z.EncBinary()
					_ = yym1114
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr1108 || yy2arr1108 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressTLS) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1115 := z.DecBinary()
	_ = yym1115
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1116 := r.ContainerType()
		if yyct1116 == codecSelferValueTypeMap1234 {
			yyl1116 := r.ReadMapStart()
			if yyl1116 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1116, d)
			}
		} else if yyct1116 == codecSelferValueTypeArray1234 {
			yyl1116 := r.ReadArrayStart()
			if yyl1116 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1116, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressTLS) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1117Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1117Slc
	var yyhl1117 bool = l >= 0
	for yyj1117 := 0; ; yyj1117++ {
		if yyhl1117 {
			if yyj1117 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1117Slc = r.DecodeBytes(yys1117Slc, true, true)
		yys1117 := string(yys1117Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1117 {
		case "hosts":
			if r.TryDecodeAsNil() {
				x.Hosts = nil
			} else {
				yyv1118 := &x.Hosts
				yym1119 := z.DecBinary()
				_ = yym1119
				if false {
				} else {
					z.F.DecSliceStringX(yyv1118, false, d)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1117)
		} // end switch yys1117
	} // end for yyj1117
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressTLS) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1121 int
	var yyb1121 bool
	var yyhl1121 bool = l >= 0
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hosts = nil
	} else {
		yyv1122 := &x.Hosts
		yym1123 := z.DecBinary()
		_ = yym1123
		if false {
		} else {
			z.F.DecSliceStringX(yyv1122, false, d)
		}
	}
	yyj1121++
	if yyhl1121 {
		yyb1121 = yyj1121 > l
	} else {
		yyb1121 = r.CheckBreak()
	}
	if yyb1121 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj1121++
		if yyhl1121 {
			yyb1121 = yyj1121 > l
		} else {
			yyb1121 = r.CheckBreak()
		}
		if yyb1121 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1121-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1125 := z.EncBinary()
		_ = yym1125
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1126 := !z.EncBinary()
			yy2arr1126 := z.EncBasicHandle().StructToArray
			var yyq1126 [1]bool
			_, _, _ = yysep1126, yyq1126, yy2arr1126
			const yyr1126 bool = false
			yyq1126[0] = true
			var yynn1126 int
			if yyr1126 || yy2arr1126 {
				r.EncodeArrayStart(1)
			} else {
				yynn1126 = 0
				for _, b := range yyq1126 {
					if b {
						yynn1126++
					}
				}
				r.EncodeMapStart(yynn1126)
				yynn1126 = 0
			}
			if yyr1126 || yy2arr1126 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1126[0] {
					yy1128 := &x.LoadBalancer
					yym1129 := z.EncBinary()
					_ = yym1129
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1128) {
					} else {
						z.EncFallback(yy1128)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1126[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1130 := &x.LoadBalancer
					yym1131 := z.EncBinary()
					_ = yym1131
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1130) {
					} else {
						z.EncFallback(yy1130)
					}
				}
			}
			if yyr1126 || yy2arr1126 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1132 := z.DecBinary()
	_ = yym1132
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1133 := r.ContainerType()
		if yyct1133 == codecSelferValueTypeMap1234 {
			yyl1133 := r.ReadMapStart()
			if yyl1133 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1133, d)
			}
		} else if yyct1133 == codecSelferValueTypeArray1234 {
			yyl1133 := r.ReadArrayStart()
			if yyl1133 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1133, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1134Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1134Slc
	var yyhl1134 bool = l >= 0
	for yyj1134 := 0; ; yyj1134++ {
		if yyhl1134 {
			if yyj1134 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1134Slc = r.DecodeBytes(yys1134Slc, true, true)
		yys1134 := string(yys1134Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1134 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
			} else {
				yyv1135 := &x.LoadBalancer
				yym1136 := z.DecBinary()
				_ = yym1136
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1135) {
				} else {
					z.DecFallback(yyv1135, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1134)
		} // end switch yys1134
	} // end for yyj1134
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1137 int
	var yyb1137 bool
	var yyhl1137 bool = l >= 0
	yyj1137++
	if yyhl1137 {
		yyb1137 = yyj1137 > l
	} else {
		yyb1137 = r.CheckBreak()
	}
	if yyb1137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_v1.LoadBalancerStatus{}
	} else {
		yyv1138 := &x.LoadBalancer
		yym1139 := z.DecBinary()
		_ = yym1139
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1138) {
		} else {
			z.DecFallback(yyv1138, false)
		}
	}
	for {
		yyj1137++
		if yyhl1137 {
			yyb1137 = yyj1137 > l
		} else {
			yyb1137 = r.CheckBreak()
		}
		if yyb1137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1140 := z.EncBinary()
		_ = yym1140
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1141 := !z.EncBinary()
			yy2arr1141 := z.EncBasicHandle().StructToArray
			var yyq1141 [2]bool
			_, _, _ = yysep1141, yyq1141, yy2arr1141
			const yyr1141 bool = false
			yyq1141[0] = x.Host != ""
			yyq1141[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn1141 int
			if yyr1141 || yy2arr1141 {
				r.EncodeArrayStart(2)
			} else {
				yynn1141 = 0
				for _, b := range yyq1141 {
					if b {
						yynn1141++
					}
				}
				r.EncodeMapStart(yynn1141)
				yynn1141 = 0
			}
			if yyr1141 || yy2arr1141 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1141[0] {
					yym1143 := z.EncBinary()
					_ = yym1143
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1141[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1144 := z.EncBinary()
					_ = yym1144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn1145 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn1145 = true
				goto LABEL1145
			}
		LABEL1145:
			if yyr1141 || yy2arr1141 {
				if yyn1145 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1141[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1141[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1145 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1141 || yy2arr1141 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1146 := z.DecBinary()
	_ = yym1146
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1147 := r.ContainerType()
		if yyct1147 == codecSelferValueTypeMap1234 {
			yyl1147 := r.ReadMapStart()
			if yyl1147 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1147, d)
			}
		} else if yyct1147 == codecSelferValueTypeArray1234 {
			yyl1147 := r.ReadArrayStart()
			if yyl1147 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1147, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1148Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1148Slc
	var yyhl1148 bool = l >= 0
	for yyj1148 := 0; ; yyj1148++ {
		if yyhl1148 {
			if yyj1148 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1148Slc = r.DecodeBytes(yys1148Slc, true, true)
		yys1148 := string(yys1148Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1148 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1148)
		} // end switch yys1148
	} // end for yyj1148
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1151 int
	var yyb1151 bool
	var yyhl1151 bool = l >= 0
	yyj1151++
	if yyhl1151 {
		yyb1151 = yyj1151 > l
	} else {
		yyb1151 = r.CheckBreak()
	}
	if yyb1151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj1151++
	if yyhl1151 {
		yyb1151 = yyj1151 > l
	} else {
		yyb1151 = r.CheckBreak()
	}
	if yyb1151 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1151++
		if yyhl1151 {
			yyb1151 = yyj1151 > l
		} else {
			yyb1151 = r.CheckBreak()
		}
		if yyb1151 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1151-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1154 := z.EncBinary()
		_ = yym1154
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1155 := !z.EncBinary()
			yy2arr1155 := z.EncBasicHandle().StructToArray
			var yyq1155 [1]bool
			_, _, _ = yysep1155, yyq1155, yy2arr1155
			const yyr1155 bool = false
			yyq1155[0] = x.HTTP != nil
			var yynn1155 int
			if yyr1155 || yy2arr1155 {
				r.EncodeArrayStart(1)
			} else {
				yynn1155 = 0
				for _, b := range yyq1155 {
					if b {
						yynn1155++
					}
				}
				r.EncodeMapStart(yynn1155)
				yynn1155 = 0
			}
			if yyr1155 || yy2arr1155 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1155[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1155[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1155 || yy2arr1155 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1157 := z.DecBinary()
	_ = yym1157
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1158 := r.ContainerType()
		if yyct1158 == codecSelferValueTypeMap1234 {
			yyl1158 := r.ReadMapStart()
			if yyl1158 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1158, d)
			}
		} else if yyct1158 == codecSelferValueTypeArray1234 {
			yyl1158 := r.ReadArrayStart()
			if yyl1158 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1158, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1159Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1159Slc
	var yyhl1159 bool = l >= 0
	for yyj1159 := 0; ; yyj1159++ {
		if yyhl1159 {
			if yyj1159 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1159Slc = r.DecodeBytes(yys1159Slc, true, true)
		yys1159 := string(yys1159Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1159 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1159)
		} // end switch yys1159
	} // end for yyj1159
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1161 int
	var yyb1161 bool
	var yyhl1161 bool = l >= 0
	yyj1161++
	if yyhl1161 {
		yyb1161 = yyj1161 > l
	} else {
		yyb1161 = r.CheckBreak()
	}
	if yyb1161 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj1161++
		if yyhl1161 {
			yyb1161 = yyj1161 > l
		} else {
			yyb1161 = r.CheckBreak()
		}
		if yyb1161 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1161-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1163 := z.EncBinary()
		_ = yym1163
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1164 := !z.EncBinary()
			yy2arr1164 := z.EncBasicHandle().StructToArray
			var yyq1164 [1]bool
			_, _, _ = yysep1164, yyq1164, yy2arr1164
			const yyr1164 bool = false
			var yynn1164 int
			if yyr1164 || yy2arr1164 {
				r.EncodeArrayStart(1)
			} else {
				yynn1164 = 1
				for _, b := range yyq1164 {
					if b {
						yynn1164++
					}
				}
				r.EncodeMapStart(yynn1164)
				yynn1164 = 0
			}
			if yyr1164 || yy2arr1164 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1166 := z.EncBinary()
					_ = yym1166
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym1167 := z.EncBinary()
					_ = yym1167
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr1164 || yy2arr1164 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1168 := z.DecBinary()
	_ = yym1168
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1169 := r.ContainerType()
		if yyct1169 == codecSelferValueTypeMap1234 {
			yyl1169 := r.ReadMapStart()
			if yyl1169 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1169, d)
			}
		} else if yyct1169 == codecSelferValueTypeArray1234 {
			yyl1169 := r.ReadArrayStart()
			if yyl1169 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1169, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1170Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1170Slc
	var yyhl1170 bool = l >= 0
	for yyj1170 := 0; ; yyj1170++ {
		if yyhl1170 {
			if yyj1170 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1170Slc = r.DecodeBytes(yys1170Slc, true, true)
		yys1170 := string(yys1170Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1170 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv1171 := &x.Paths
				yym1172 := z.DecBinary()
				_ = yym1172
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1171), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1170)
		} // end switch yys1170
	} // end for yyj1170
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1173 int
	var yyb1173 bool
	var yyhl1173 bool = l >= 0
	yyj1173++
	if yyhl1173 {
		yyb1173 = yyj1173 > l
	} else {
		yyb1173 = r.CheckBreak()
	}
	if yyb1173 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv1174 := &x.Paths
		yym1175 := z.DecBinary()
		_ = yym1175
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv1174), d)
		}
	}
	for {
		yyj1173++
		if yyhl1173 {
			yyb1173 = yyj1173 > l
		} else {
			yyb1173 = r.CheckBreak()
		}
		if yyb1173 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1173-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1176 := z.EncBinary()
		_ = yym1176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1177 := !z.EncBinary()
			yy2arr1177 := z.EncBasicHandle().StructToArray
			var yyq1177 [2]bool
			_, _, _ = yysep1177, yyq1177, yy2arr1177
			const yyr1177 bool = false
			yyq1177[0] = x.Path != ""
			var yynn1177 int
			if yyr1177 || yy2arr1177 {
				r.EncodeArrayStart(2)
			} else {
				yynn1177 = 1
				for _, b := range yyq1177 {
					if b {
						yynn1177++
					}
				}
				r.EncodeMapStart(yynn1177)
				yynn1177 = 0
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1177[0] {
					yym1179 := z.EncBinary()
					_ = yym1179
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1177[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1180 := z.EncBinary()
					_ = yym1180
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1182 := &x.Backend
				yy1182.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1183 := &x.Backend
				yy1183.CodecEncodeSelf(e)
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1184 := z.DecBinary()
	_ = yym1184
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1185 := r.ContainerType()
		if yyct1185 == codecSelferValueTypeMap1234 {
			yyl1185 := r.ReadMapStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1185, d)
			}
		} else if yyct1185 == codecSelferValueTypeArray1234 {
			yyl1185 := r.ReadArrayStart()
			if yyl1185 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1185, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1186Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1186Slc
	var yyhl1186 bool = l >= 0
	for yyj1186 := 0; ; yyj1186++ {
		if yyhl1186 {
			if yyj1186 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1186Slc = r.DecodeBytes(yys1186Slc, true, true)
		yys1186 := string(yys1186Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1186 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv1188 := &x.Backend
				yyv1188.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1186)
		} // end switch yys1186
	} // end for yyj1186
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1189 int
	var yyb1189 bool
	var yyhl1189 bool = l >= 0
	yyj1189++
	if yyhl1189 {
		yyb1189 = yyj1189 > l
	} else {
		yyb1189 = r.CheckBreak()
	}
	if yyb1189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1189++
	if yyhl1189 {
		yyb1189 = yyj1189 > l
	} else {
		yyb1189 = r.CheckBreak()
	}
	if yyb1189 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv1191 := &x.Backend
		yyv1191.CodecDecodeSelf(d)
	}
	for {
		yyj1189++
		if yyhl1189 {
			yyb1189 = yyj1189 > l
		} else {
			yyb1189 = r.CheckBreak()
		}
		if yyb1189 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1189-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1192 := z.EncBinary()
		_ = yym1192
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1193 := !z.EncBinary()
			yy2arr1193 := z.EncBasicHandle().StructToArray
			var yyq1193 [2]bool
			_, _, _ = yysep1193, yyq1193, yy2arr1193
			const yyr1193 bool = false
			var yynn1193 int
			if yyr1193 || yy2arr1193 {
				r.EncodeArrayStart(2)
			} else {
				yynn1193 = 2
				for _, b := range yyq1193 {
					if b {
						yynn1193++
					}
				}
				r.EncodeMapStart(yynn1193)
				yynn1193 = 0
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1195 := z.EncBinary()
				_ = yym1195
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1196 := z.EncBinary()
				_ = yym1196
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1198 := &x.ServicePort
				yym1199 := z.EncBinary()
				_ = yym1199
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1198) {
				} else if !yym1199 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1198)
				} else {
					z.EncFallback(yy1198)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1200 := &x.ServicePort
				yym1201 := z.EncBinary()
				_ = yym1201
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1200) {
				} else if !yym1201 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy1200)
				} else {
					z.EncFallback(yy1200)
				}
			}
			if yyr1193 || yy2arr1193 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1202 := z.DecBinary()
	_ = yym1202
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1203 := r.ContainerType()
		if yyct1203 == codecSelferValueTypeMap1234 {
			yyl1203 := r.ReadMapStart()
			if yyl1203 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1203, d)
			}
		} else if yyct1203 == codecSelferValueTypeArray1234 {
			yyl1203 := r.ReadArrayStart()
			if yyl1203 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1203, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1204Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1204Slc
	var yyhl1204 bool = l >= 0
	for yyj1204 := 0; ; yyj1204++ {
		if yyhl1204 {
			if yyj1204 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1204Slc = r.DecodeBytes(yys1204Slc, true, true)
		yys1204 := string(yys1204Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1204 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg5_intstr.IntOrString{}
			} else {
				yyv1206 := &x.ServicePort
				yym1207 := z.DecBinary()
				_ = yym1207
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1206) {
				} else if !yym1207 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1206)
				} else {
					z.DecFallback(yyv1206, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1204)
		} // end switch yys1204
	} // end for yyj1204
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1208 int
	var yyb1208 bool
	var yyhl1208 bool = l >= 0
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg5_intstr.IntOrString{}
	} else {
		yyv1210 := &x.ServicePort
		yym1211 := z.DecBinary()
		_ = yym1211
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1210) {
		} else if !yym1211 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1210)
		} else {
			z.DecFallback(yyv1210, false)
		}
	}
	for {
		yyj1208++
		if yyhl1208 {
			yyb1208 = yyj1208 > l
		} else {
			yyb1208 = r.CheckBreak()
		}
		if yyb1208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1212 := z.EncBinary()
		_ = yym1212
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1213 := !z.EncBinary()
			yy2arr1213 := z.EncBasicHandle().StructToArray
			var yyq1213 [4]bool
			_, _, _ = yysep1213, yyq1213, yy2arr1213
			const yyr1213 bool = false
			yyq1213[0] = x.Kind != ""
			yyq1213[1] = x.APIVersion != ""
			var yynn1213 int
			if yyr1213 || yy2arr1213 {
				r.EncodeArrayStart(4)
			} else {
				yynn1213 = 2
				for _, b := range yyq1213 {
					if b {
						yynn1213++
					}
				}
				r.EncodeMapStart(yynn1213)
				yynn1213 = 0
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1213[0] {
					yym1215 := z.EncBinary()
					_ = yym1215
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1213[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1216 := z.EncBinary()
					_ = yym1216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1213[1] {
					yym1218 := z.EncBinary()
					_ = yym1218
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1213[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1219 := z.EncBinary()
					_ = yym1219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1221 := z.EncBinary()
				_ = yym1221
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1222 := z.EncBinary()
				_ = yym1222
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1224 := z.EncBinary()
				_ = yym1224
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1225 := z.EncBinary()
				_ = yym1225
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr1213 || yy2arr1213 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1226 := z.DecBinary()
	_ = yym1226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1227 := r.ContainerType()
		if yyct1227 == codecSelferValueTypeMap1234 {
			yyl1227 := r.ReadMapStart()
			if yyl1227 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1227, d)
			}
		} else if yyct1227 == codecSelferValueTypeArray1234 {
			yyl1227 := r.ReadArrayStart()
			if yyl1227 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1227, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1228Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1228Slc
	var yyhl1228 bool = l >= 0
	for yyj1228 := 0; ; yyj1228++ {
		if yyhl1228 {
			if yyj1228 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1228Slc = r.DecodeBytes(yys1228Slc, true, true)
		yys1228 := string(yys1228Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1228 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1228)
		} // end switch yys1228
	} // end for yyj1228
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1233 int
	var yyb1233 bool
	var yyhl1233 bool = l >= 0
	yyj1233++
	if yyhl1233 {
		yyb1233 = yyj1233 > l
	} else {
		yyb1233 = r.CheckBreak()
	}
	if yyb1233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1233++
	if yyhl1233 {
		yyb1233 = yyj1233 > l
	} else {
		yyb1233 = r.CheckBreak()
	}
	if yyb1233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1233++
	if yyhl1233 {
		yyb1233 = yyj1233 > l
	} else {
		yyb1233 = r.CheckBreak()
	}
	if yyb1233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj1233++
	if yyhl1233 {
		yyb1233 = yyj1233 > l
	} else {
		yyb1233 = r.CheckBreak()
	}
	if yyb1233 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj1233++
		if yyhl1233 {
			yyb1233 = yyj1233 > l
		} else {
			yyb1233 = r.CheckBreak()
		}
		if yyb1233 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1233-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1238 := z.EncBinary()
		_ = yym1238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1239 := !z.EncBinary()
			yy2arr1239 := z.EncBasicHandle().StructToArray
			var yyq1239 [2]bool
			_, _, _ = yysep1239, yyq1239, yy2arr1239
			const yyr1239 bool = false
			yyq1239[0] = len(x.MatchLabels) != 0
			yyq1239[1] = len(x.MatchExpressions) != 0
			var yynn1239 int
			if yyr1239 || yy2arr1239 {
				r.EncodeArrayStart(2)
			} else {
				yynn1239 = 0
				for _, b := range yyq1239 {
					if b {
						yynn1239++
					}
				}
				r.EncodeMapStart(yynn1239)
				yynn1239 = 0
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1241 := z.EncBinary()
						_ = yym1241
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym1242 := z.EncBinary()
						_ = yym1242
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1244 := z.EncBinary()
						_ = yym1244
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym1245 := z.EncBinary()
						_ = yym1245
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1246 := z.DecBinary()
	_ = yym1246
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1247 := r.ContainerType()
		if yyct1247 == codecSelferValueTypeMap1234 {
			yyl1247 := r.ReadMapStart()
			if yyl1247 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1247, d)
			}
		} else if yyct1247 == codecSelferValueTypeArray1234 {
			yyl1247 := r.ReadArrayStart()
			if yyl1247 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1247, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1248Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1248Slc
	var yyhl1248 bool = l >= 0
	for yyj1248 := 0; ; yyj1248++ {
		if yyhl1248 {
			if yyj1248 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1248Slc = r.DecodeBytes(yys1248Slc, true, true)
		yys1248 := string(yys1248Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1248 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv1249 := &x.MatchLabels
				yym1250 := z.DecBinary()
				_ = yym1250
				if false {
				} else {
					z.F.DecMapStringStringX(yyv1249, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1251 := &x.MatchExpressions
				yym1252 := z.DecBinary()
				_ = yym1252
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1251), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1248)
		} // end switch yys1248
	} // end for yyj1248
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1253 int
	var yyb1253 bool
	var yyhl1253 bool = l >= 0
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv1254 := &x.MatchLabels
		yym1255 := z.DecBinary()
		_ = yym1255
		if false {
		} else {
			z.F.DecMapStringStringX(yyv1254, false, d)
		}
	}
	yyj1253++
	if yyhl1253 {
		yyb1253 = yyj1253 > l
	} else {
		yyb1253 = r.CheckBreak()
	}
	if yyb1253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1256 := &x.MatchExpressions
		yym1257 := z.DecBinary()
		_ = yym1257
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv1256), d)
		}
	}
	for {
		yyj1253++
		if yyhl1253 {
			yyb1253 = yyj1253 > l
		} else {
			yyb1253 = r.CheckBreak()
		}
		if yyb1253 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1253-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1258 := z.EncBinary()
		_ = yym1258
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1259 := !z.EncBinary()
			yy2arr1259 := z.EncBasicHandle().StructToArray
			var yyq1259 [3]bool
			_, _, _ = yysep1259, yyq1259, yy2arr1259
			const yyr1259 bool = false
			yyq1259[2] = len(x.Values) != 0
			var yynn1259 int
			if yyr1259 || yy2arr1259 {
				r.EncodeArrayStart(3)
			} else {
				yynn1259 = 2
				for _, b := range yyq1259 {
					if b {
						yynn1259++
					}
				}
				r.EncodeMapStart(yynn1259)
				yynn1259 = 0
			}
			if yyr1259 || yy2arr1259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1261 := z.EncBinary()
				_ = yym1261
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1262 := z.EncBinary()
				_ = yym1262
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1259 || yy2arr1259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1259 || yy2arr1259 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1259[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1265 := z.EncBinary()
						_ = yym1265
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1259[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1266 := z.EncBinary()
						_ = yym1266
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1259 || yy2arr1259 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1267 := z.DecBinary()
	_ = yym1267
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1268 := r.ContainerType()
		if yyct1268 == codecSelferValueTypeMap1234 {
			yyl1268 := r.ReadMapStart()
			if yyl1268 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1268, d)
			}
		} else if yyct1268 == codecSelferValueTypeArray1234 {
			yyl1268 := r.ReadArrayStart()
			if yyl1268 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1268, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1269Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1269Slc
	var yyhl1269 bool = l >= 0
	for yyj1269 := 0; ; yyj1269++ {
		if yyhl1269 {
			if yyj1269 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1269Slc = r.DecodeBytes(yys1269Slc, true, true)
		yys1269 := string(yys1269Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1269 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1272 := &x.Values
				yym1273 := z.DecBinary()
				_ = yym1273
				if false {
				} else {
					z.F.DecSliceStringX(yyv1272, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1269)
		} // end switch yys1269
	} // end for yyj1269
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1274 int
	var yyb1274 bool
	var yyhl1274 bool = l >= 0
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj1274++
	if yyhl1274 {
		yyb1274 = yyj1274 > l
	} else {
		yyb1274 = r.CheckBreak()
	}
	if yyb1274 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1277 := &x.Values
		yym1278 := z.DecBinary()
		_ = yym1278
		if false {
		} else {
			z.F.DecSliceStringX(yyv1277, false, d)
		}
	}
	for {
		yyj1274++
		if yyhl1274 {
			yyb1274 = yyj1274 > l
		} else {
			yyb1274 = r.CheckBreak()
		}
		if yyb1274 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1274-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1279 := z.EncBinary()
	_ = yym1279
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1280 := z.DecBinary()
	_ = yym1280
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1281 := z.EncBinary()
		_ = yym1281
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1282 := !z.EncBinary()
			yy2arr1282 := z.EncBasicHandle().StructToArray
			var yyq1282 [5]bool
			_, _, _ = yysep1282, yyq1282, yy2arr1282
			const yyr1282 bool = false
			yyq1282[0] = x.Kind != ""
			yyq1282[1] = x.APIVersion != ""
			yyq1282[2] = true
			yyq1282[3] = true
			yyq1282[4] = true
			var yynn1282 int
			if yyr1282 || yy2arr1282 {
				r.EncodeArrayStart(5)
			} else {
				yynn1282 = 0
				for _, b := range yyq1282 {
					if b {
						yynn1282++
					}
				}
				r.EncodeMapStart(yynn1282)
				yynn1282 = 0
			}
			if yyr1282 || yy2arr1282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1282[0] {
					yym1284 := z.EncBinary()
					_ = yym1284
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1282[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1285 := z.EncBinary()
					_ = yym1285
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1282 || yy2arr1282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1282[1] {
					yym1287 := z.EncBinary()
					_ = yym1287
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1282[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1288 := z.EncBinary()
					_ = yym1288
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1282 || yy2arr1282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1282[2] {
					yy1290 := &x.ObjectMeta
					yym1291 := z.EncBinary()
					_ = yym1291
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1290) {
					} else {
						z.EncFallback(yy1290)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1282[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1292 := &x.ObjectMeta
					yym1293 := z.EncBinary()
					_ = yym1293
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1292) {
					} else {
						z.EncFallback(yy1292)
					}
				}
			}
			if yyr1282 || yy2arr1282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1282[3] {
					yy1295 := &x.Spec
					yy1295.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1282[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1296 := &x.Spec
					yy1296.CodecEncodeSelf(e)
				}
			}
			if yyr1282 || yy2arr1282 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1282[4] {
					yy1298 := &x.Status
					yy1298.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1282[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1299 := &x.Status
					yy1299.CodecEncodeSelf(e)
				}
			}
			if yyr1282 || yy2arr1282 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1300 := z.DecBinary()
	_ = yym1300
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1301 := r.ContainerType()
		if yyct1301 == codecSelferValueTypeMap1234 {
			yyl1301 := r.ReadMapStart()
			if yyl1301 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1301, d)
			}
		} else if yyct1301 == codecSelferValueTypeArray1234 {
			yyl1301 := r.ReadArrayStart()
			if yyl1301 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1301, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1302Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1302Slc
	var yyhl1302 bool = l >= 0
	for yyj1302 := 0; ; yyj1302++ {
		if yyhl1302 {
			if yyj1302 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1302Slc = r.DecodeBytes(yys1302Slc, true, true)
		yys1302 := string(yys1302Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1302 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1305 := &x.ObjectMeta
				yym1306 := z.DecBinary()
				_ = yym1306
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1305) {
				} else {
					z.DecFallback(yyv1305, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv1307 := &x.Spec
				yyv1307.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv1308 := &x.Status
				yyv1308.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1302)
		} // end switch yys1302
	} // end for yyj1302
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1309 int
	var yyb1309 bool
	var yyhl1309 bool = l >= 0
	yyj1309++
	if yyhl1309 {
		yyb1309 = yyj1309 > l
	} else {
		yyb1309 = r.CheckBreak()
	}
	if yyb1309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1309++
	if yyhl1309 {
		yyb1309 = yyj1309 > l
	} else {
		yyb1309 = r.CheckBreak()
	}
	if yyb1309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1309++
	if yyhl1309 {
		yyb1309 = yyj1309 > l
	} else {
		yyb1309 = r.CheckBreak()
	}
	if yyb1309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1312 := &x.ObjectMeta
		yym1313 := z.DecBinary()
		_ = yym1313
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1312) {
		} else {
			z.DecFallback(yyv1312, false)
		}
	}
	yyj1309++
	if yyhl1309 {
		yyb1309 = yyj1309 > l
	} else {
		yyb1309 = r.CheckBreak()
	}
	if yyb1309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv1314 := &x.Spec
		yyv1314.CodecDecodeSelf(d)
	}
	yyj1309++
	if yyhl1309 {
		yyb1309 = yyj1309 > l
	} else {
		yyb1309 = r.CheckBreak()
	}
	if yyb1309 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv1315 := &x.Status
		yyv1315.CodecDecodeSelf(d)
	}
	for {
		yyj1309++
		if yyhl1309 {
			yyb1309 = yyj1309 > l
		} else {
			yyb1309 = r.CheckBreak()
		}
		if yyb1309 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1309-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1316 := z.EncBinary()
		_ = yym1316
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1317 := !z.EncBinary()
			yy2arr1317 := z.EncBasicHandle().StructToArray
			var yyq1317 [4]bool
			_, _, _ = yysep1317, yyq1317, yy2arr1317
			const yyr1317 bool = false
			yyq1317[0] = x.Kind != ""
			yyq1317[1] = x.APIVersion != ""
			yyq1317[2] = true
			var yynn1317 int
			if yyr1317 || yy2arr1317 {
				r.EncodeArrayStart(4)
			} else {
				yynn1317 = 1
				for _, b := range yyq1317 {
					if b {
						yynn1317++
					}
				}
				r.EncodeMapStart(yynn1317)
				yynn1317 = 0
			}
			if yyr1317 || yy2arr1317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1317[0] {
					yym1319 := z.EncBinary()
					_ = yym1319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1317[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1320 := z.EncBinary()
					_ = yym1320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1317 || yy2arr1317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1317[1] {
					yym1322 := z.EncBinary()
					_ = yym1322
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1317[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1323 := z.EncBinary()
					_ = yym1323
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1317 || yy2arr1317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1317[2] {
					yy1325 := &x.ListMeta
					yym1326 := z.EncBinary()
					_ = yym1326
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1325) {
					} else {
						z.EncFallback(yy1325)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1317[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1327 := &x.ListMeta
					yym1328 := z.EncBinary()
					_ = yym1328
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1327) {
					} else {
						z.EncFallback(yy1327)
					}
				}
			}
			if yyr1317 || yy2arr1317 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1330 := z.EncBinary()
					_ = yym1330
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1331 := z.EncBinary()
					_ = yym1331
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr1317 || yy2arr1317 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1332 := z.DecBinary()
	_ = yym1332
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1333 := r.ContainerType()
		if yyct1333 == codecSelferValueTypeMap1234 {
			yyl1333 := r.ReadMapStart()
			if yyl1333 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1333, d)
			}
		} else if yyct1333 == codecSelferValueTypeArray1234 {
			yyl1333 := r.ReadArrayStart()
			if yyl1333 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1333, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1334Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1334Slc
	var yyhl1334 bool = l >= 0
	for yyj1334 := 0; ; yyj1334++ {
		if yyhl1334 {
			if yyj1334 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1334Slc = r.DecodeBytes(yys1334Slc, true, true)
		yys1334 := string(yys1334Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1334 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1337 := &x.ListMeta
				yym1338 := z.DecBinary()
				_ = yym1338
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1337) {
				} else {
					z.DecFallback(yyv1337, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1339 := &x.Items
				yym1340 := z.DecBinary()
				_ = yym1340
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv1339), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1334)
		} // end switch yys1334
	} // end for yyj1334
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1341 int
	var yyb1341 bool
	var yyhl1341 bool = l >= 0
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1344 := &x.ListMeta
		yym1345 := z.DecBinary()
		_ = yym1345
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1344) {
		} else {
			z.DecFallback(yyv1344, false)
		}
	}
	yyj1341++
	if yyhl1341 {
		yyb1341 = yyj1341 > l
	} else {
		yyb1341 = r.CheckBreak()
	}
	if yyb1341 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1346 := &x.Items
		yym1347 := z.DecBinary()
		_ = yym1347
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv1346), d)
		}
	}
	for {
		yyj1341++
		if yyhl1341 {
			yyb1341 = yyj1341 > l
		} else {
			yyb1341 = r.CheckBreak()
		}
		if yyb1341 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1341-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1348 := z.EncBinary()
		_ = yym1348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1349 := !z.EncBinary()
			yy2arr1349 := z.EncBasicHandle().StructToArray
			var yyq1349 [4]bool
			_, _, _ = yysep1349, yyq1349, yy2arr1349
			const yyr1349 bool = false
			yyq1349[0] = x.Replicas != nil
			yyq1349[1] = x.MinReadySeconds != 0
			yyq1349[2] = x.Selector != nil
			yyq1349[3] = true
			var yynn1349 int
			if yyr1349 || yy2arr1349 {
				r.EncodeArrayStart(4)
			} else {
				yynn1349 = 0
				for _, b := range yyq1349 {
					if b {
						yynn1349++
					}
				}
				r.EncodeMapStart(yynn1349)
				yynn1349 = 0
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1349[0] {
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1351 := *x.Replicas
						yym1352 := z.EncBinary()
						_ = yym1352
						if false {
						} else {
							r.EncodeInt(int64(yy1351))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1349[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Replicas == nil {
						r.EncodeNil()
					} else {
						yy1353 := *x.Replicas
						yym1354 := z.EncBinary()
						_ = yym1354
						if false {
						} else {
							r.EncodeInt(int64(yy1353))
						}
					}
				}
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1349[1] {
					yym1356 := z.EncBinary()
					_ = yym1356
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1349[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1357 := z.EncBinary()
					_ = yym1357
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1349[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1349[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1349[3] {
					yy1360 := &x.Template
					yym1361 := z.EncBinary()
					_ = yym1361
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1360) {
					} else {
						z.EncFallback(yy1360)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1349[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1362 := &x.Template
					yym1363 := z.EncBinary()
					_ = yym1363
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1362) {
					} else {
						z.EncFallback(yy1362)
					}
				}
			}
			if yyr1349 || yy2arr1349 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1364 := z.DecBinary()
	_ = yym1364
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1365 := r.ContainerType()
		if yyct1365 == codecSelferValueTypeMap1234 {
			yyl1365 := r.ReadMapStart()
			if yyl1365 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1365, d)
			}
		} else if yyct1365 == codecSelferValueTypeArray1234 {
			yyl1365 := r.ReadArrayStart()
			if yyl1365 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1365, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1366Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1366Slc
	var yyhl1366 bool = l >= 0
	for yyj1366 := 0; ; yyj1366++ {
		if yyhl1366 {
			if yyj1366 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1366Slc = r.DecodeBytes(yys1366Slc, true, true)
		yys1366 := string(yys1366Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1366 {
		case "replicas":
			if r.TryDecodeAsNil() {
				if x.Replicas != nil {
					x.Replicas = nil
				}
			} else {
				if x.Replicas == nil {
					x.Replicas = new(int32)
				}
				yym1368 := z.DecBinary()
				_ = yym1368
				if false {
				} else {
					*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
				}
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv1371 := &x.Template
				yym1372 := z.DecBinary()
				_ = yym1372
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1371) {
				} else {
					z.DecFallback(yyv1371, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1366)
		} // end switch yys1366
	} // end for yyj1366
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1373 int
	var yyb1373 bool
	var yyhl1373 bool = l >= 0
	yyj1373++
	if yyhl1373 {
		yyb1373 = yyj1373 > l
	} else {
		yyb1373 = r.CheckBreak()
	}
	if yyb1373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Replicas != nil {
			x.Replicas = nil
		}
	} else {
		if x.Replicas == nil {
			x.Replicas = new(int32)
		}
		yym1375 := z.DecBinary()
		_ = yym1375
		if false {
		} else {
			*((*int32)(x.Replicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj1373++
	if yyhl1373 {
		yyb1373 = yyj1373 > l
	} else {
		yyb1373 = r.CheckBreak()
	}
	if yyb1373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj1373++
	if yyhl1373 {
		yyb1373 = yyj1373 > l
	} else {
		yyb1373 = r.CheckBreak()
	}
	if yyb1373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj1373++
	if yyhl1373 {
		yyb1373 = yyj1373 > l
	} else {
		yyb1373 = r.CheckBreak()
	}
	if yyb1373 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv1378 := &x.Template
		yym1379 := z.DecBinary()
		_ = yym1379
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1378) {
		} else {
			z.DecFallback(yyv1378, false)
		}
	}
	for {
		yyj1373++
		if yyhl1373 {
			yyb1373 = yyj1373 > l
		} else {
			yyb1373 = r.CheckBreak()
		}
		if yyb1373 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1373-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1380 := z.EncBinary()
		_ = yym1380
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1381 := !z.EncBinary()
			yy2arr1381 := z.EncBasicHandle().StructToArray
			var yyq1381 [6]bool
			_, _, _ = yysep1381, yyq1381, yy2arr1381
			const yyr1381 bool = false
			yyq1381[1] = x.FullyLabeledReplicas != 0
			yyq1381[2] = x.ReadyReplicas != 0
			yyq1381[3] = x.AvailableReplicas != 0
			yyq1381[4] = x.ObservedGeneration != 0
			yyq1381[5] = len(x.Conditions) != 0
			var yynn1381 int
			if yyr1381 || yy2arr1381 {
				r.EncodeArrayStart(6)
			} else {
				yynn1381 = 1
				for _, b := range yyq1381 {
					if b {
						yynn1381++
					}
				}
				r.EncodeMapStart(yynn1381)
				yynn1381 = 0
			}
			if yyr1381 || yy2arr1381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1383 := z.EncBinary()
				_ = yym1383
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1384 := z.EncBinary()
				_ = yym1384
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr1381 || yy2arr1381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1381[1] {
					yym1386 := z.EncBinary()
					_ = yym1386
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1381[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1387 := z.EncBinary()
					_ = yym1387
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr1381 || yy2arr1381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1381[2] {
					yym1389 := z.EncBinary()
					_ = yym1389
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1381[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr1381 || yy2arr1381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1381[3] {
					yym1392 := z.EncBinary()
					_ = yym1392
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1381[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1393 := z.EncBinary()
					_ = yym1393
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr1381 || yy2arr1381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1381[4] {
					yym1395 := z.EncBinary()
					_ = yym1395
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1381[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1396 := z.EncBinary()
					_ = yym1396
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr1381 || yy2arr1381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1381[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1398 := z.EncBinary()
						_ = yym1398
						if false {
						} else {
							h.encSliceReplicaSetCondition(([]ReplicaSetCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1381[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym1399 := z.EncBinary()
						_ = yym1399
						if false {
						} else {
							h.encSliceReplicaSetCondition(([]ReplicaSetCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr1381 || yy2arr1381 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1400 := z.DecBinary()
	_ = yym1400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1401 := r.ContainerType()
		if yyct1401 == codecSelferValueTypeMap1234 {
			yyl1401 := r.ReadMapStart()
			if yyl1401 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1401, d)
			}
		} else if yyct1401 == codecSelferValueTypeArray1234 {
			yyl1401 := r.ReadArrayStart()
			if yyl1401 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1401, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1402Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1402Slc
	var yyhl1402 bool = l >= 0
	for yyj1402 := 0; ; yyj1402++ {
		if yyhl1402 {
			if yyj1402 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1402Slc = r.DecodeBytes(yys1402Slc, true, true)
		yys1402 := string(yys1402Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1402 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv1408 := &x.Conditions
				yym1409 := z.DecBinary()
				_ = yym1409
				if false {
				} else {
					h.decSliceReplicaSetCondition((*[]ReplicaSetCondition)(yyv1408), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1402)
		} // end switch yys1402
	} // end for yyj1402
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1410 int
	var yyb1410 bool
	var yyhl1410 bool = l >= 0
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj1410++
	if yyhl1410 {
		yyb1410 = yyj1410 > l
	} else {
		yyb1410 = r.CheckBreak()
	}
	if yyb1410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv1416 := &x.Conditions
		yym1417 := z.DecBinary()
		_ = yym1417
		if false {
		} else {
			h.decSliceReplicaSetCondition((*[]ReplicaSetCondition)(yyv1416), d)
		}
	}
	for {
		yyj1410++
		if yyhl1410 {
			yyb1410 = yyj1410 > l
		} else {
			yyb1410 = r.CheckBreak()
		}
		if yyb1410 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1410-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicaSetConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1418 := z.EncBinary()
	_ = yym1418
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicaSetConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1419 := z.DecBinary()
	_ = yym1419
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSetCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1420 := z.EncBinary()
		_ = yym1420
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1421 := !z.EncBinary()
			yy2arr1421 := z.EncBasicHandle().StructToArray
			var yyq1421 [6]bool
			_, _, _ = yysep1421, yyq1421, yy2arr1421
			const yyr1421 bool = false
			yyq1421[2] = true
			yyq1421[3] = true
			yyq1421[4] = x.Reason != ""
			yyq1421[5] = x.Message != ""
			var yynn1421 int
			if yyr1421 || yy2arr1421 {
				r.EncodeArrayStart(6)
			} else {
				yynn1421 = 2
				for _, b := range yyq1421 {
					if b {
						yynn1421++
					}
				}
				r.EncodeMapStart(yynn1421)
				yynn1421 = 0
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1424 := z.EncBinary()
				_ = yym1424
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1425 := z.EncBinary()
				_ = yym1425
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1421[2] {
					yy1427 := &x.LastProbeTime
					yym1428 := z.EncBinary()
					_ = yym1428
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1427) {
					} else if yym1428 {
						z.EncBinaryMarshal(yy1427)
					} else if !yym1428 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1427)
					} else {
						z.EncFallback(yy1427)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1421[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1429 := &x.LastProbeTime
					yym1430 := z.EncBinary()
					_ = yym1430
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1429) {
					} else if yym1430 {
						z.EncBinaryMarshal(yy1429)
					} else if !yym1430 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1429)
					} else {
						z.EncFallback(yy1429)
					}
				}
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1421[3] {
					yy1432 := &x.LastTransitionTime
					yym1433 := z.EncBinary()
					_ = yym1433
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1432) {
					} else if yym1433 {
						z.EncBinaryMarshal(yy1432)
					} else if !yym1433 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1432)
					} else {
						z.EncFallback(yy1432)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1421[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1434 := &x.LastTransitionTime
					yym1435 := z.EncBinary()
					_ = yym1435
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1434) {
					} else if yym1435 {
						z.EncBinaryMarshal(yy1434)
					} else if !yym1435 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1434)
					} else {
						z.EncFallback(yy1434)
					}
				}
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1421[4] {
					yym1437 := z.EncBinary()
					_ = yym1437
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1421[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1438 := z.EncBinary()
					_ = yym1438
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1421[5] {
					yym1440 := z.EncBinary()
					_ = yym1440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1421[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1441 := z.EncBinary()
					_ = yym1441
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1421 || yy2arr1421 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1442 := z.DecBinary()
	_ = yym1442
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1443 := r.ContainerType()
		if yyct1443 == codecSelferValueTypeMap1234 {
			yyl1443 := r.ReadMapStart()
			if yyl1443 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1443, d)
			}
		} else if yyct1443 == codecSelferValueTypeArray1234 {
			yyl1443 := r.ReadArrayStart()
			if yyl1443 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1443, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1444Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1444Slc
	var yyhl1444 bool = l >= 0
	for yyj1444 := 0; ; yyj1444++ {
		if yyhl1444 {
			if yyj1444 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1444Slc = r.DecodeBytes(yys1444Slc, true, true)
		yys1444 := string(yys1444Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1444 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicaSetConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv1447 := &x.LastProbeTime
				yym1448 := z.DecBinary()
				_ = yym1448
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1447) {
				} else if yym1448 {
					z.DecBinaryUnmarshal(yyv1447)
				} else if !yym1448 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1447)
				} else {
					z.DecFallback(yyv1447, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv1449 := &x.LastTransitionTime
				yym1450 := z.DecBinary()
				_ = yym1450
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1449) {
				} else if yym1450 {
					z.DecBinaryUnmarshal(yyv1449)
				} else if !yym1450 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1449)
				} else {
					z.DecFallback(yyv1449, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1444)
		} // end switch yys1444
	} // end for yyj1444
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1453 int
	var yyb1453 bool
	var yyhl1453 bool = l >= 0
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicaSetConditionType(r.DecodeString())
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv1456 := &x.LastProbeTime
		yym1457 := z.DecBinary()
		_ = yym1457
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1456) {
		} else if yym1457 {
			z.DecBinaryUnmarshal(yyv1456)
		} else if !yym1457 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1456)
		} else {
			z.DecFallback(yyv1456, false)
		}
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv1458 := &x.LastTransitionTime
		yym1459 := z.DecBinary()
		_ = yym1459
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1458) {
		} else if yym1459 {
			z.DecBinaryUnmarshal(yyv1458)
		} else if !yym1459 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1458)
		} else {
			z.DecFallback(yyv1458, false)
		}
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1453++
	if yyhl1453 {
		yyb1453 = yyj1453 > l
	} else {
		yyb1453 = r.CheckBreak()
	}
	if yyb1453 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1453++
		if yyhl1453 {
			yyb1453 = yyj1453 > l
		} else {
			yyb1453 = r.CheckBreak()
		}
		if yyb1453 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1453-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1462 := z.EncBinary()
		_ = yym1462
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1463 := !z.EncBinary()
			yy2arr1463 := z.EncBasicHandle().StructToArray
			var yyq1463 [4]bool
			_, _, _ = yysep1463, yyq1463, yy2arr1463
			const yyr1463 bool = false
			yyq1463[0] = x.Kind != ""
			yyq1463[1] = x.APIVersion != ""
			yyq1463[2] = true
			yyq1463[3] = true
			var yynn1463 int
			if yyr1463 || yy2arr1463 {
				r.EncodeArrayStart(4)
			} else {
				yynn1463 = 0
				for _, b := range yyq1463 {
					if b {
						yynn1463++
					}
				}
				r.EncodeMapStart(yynn1463)
				yynn1463 = 0
			}
			if yyr1463 || yy2arr1463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1463[0] {
					yym1465 := z.EncBinary()
					_ = yym1465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1463[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1466 := z.EncBinary()
					_ = yym1466
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1463 || yy2arr1463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1463[1] {
					yym1468 := z.EncBinary()
					_ = yym1468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1463[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1469 := z.EncBinary()
					_ = yym1469
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1463 || yy2arr1463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1463[2] {
					yy1471 := &x.ObjectMeta
					yym1472 := z.EncBinary()
					_ = yym1472
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1471) {
					} else {
						z.EncFallback(yy1471)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1463[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1473 := &x.ObjectMeta
					yym1474 := z.EncBinary()
					_ = yym1474
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1473) {
					} else {
						z.EncFallback(yy1473)
					}
				}
			}
			if yyr1463 || yy2arr1463 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1463[3] {
					yy1476 := &x.Spec
					yy1476.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1463[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1477 := &x.Spec
					yy1477.CodecEncodeSelf(e)
				}
			}
			if yyr1463 || yy2arr1463 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1478 := z.DecBinary()
	_ = yym1478
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1479 := r.ContainerType()
		if yyct1479 == codecSelferValueTypeMap1234 {
			yyl1479 := r.ReadMapStart()
			if yyl1479 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1479, d)
			}
		} else if yyct1479 == codecSelferValueTypeArray1234 {
			yyl1479 := r.ReadArrayStart()
			if yyl1479 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1479, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1480Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1480Slc
	var yyhl1480 bool = l >= 0
	for yyj1480 := 0; ; yyj1480++ {
		if yyhl1480 {
			if yyj1480 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1480Slc = r.DecodeBytes(yys1480Slc, true, true)
		yys1480 := string(yys1480Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1480 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1483 := &x.ObjectMeta
				yym1484 := z.DecBinary()
				_ = yym1484
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1483) {
				} else {
					z.DecFallback(yyv1483, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSecurityPolicySpec{}
			} else {
				yyv1485 := &x.Spec
				yyv1485.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1480)
		} // end switch yys1480
	} // end for yyj1480
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1486 int
	var yyb1486 bool
	var yyhl1486 bool = l >= 0
	yyj1486++
	if yyhl1486 {
		yyb1486 = yyj1486 > l
	} else {
		yyb1486 = r.CheckBreak()
	}
	if yyb1486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1486++
	if yyhl1486 {
		yyb1486 = yyj1486 > l
	} else {
		yyb1486 = r.CheckBreak()
	}
	if yyb1486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1486++
	if yyhl1486 {
		yyb1486 = yyj1486 > l
	} else {
		yyb1486 = r.CheckBreak()
	}
	if yyb1486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1489 := &x.ObjectMeta
		yym1490 := z.DecBinary()
		_ = yym1490
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1489) {
		} else {
			z.DecFallback(yyv1489, false)
		}
	}
	yyj1486++
	if yyhl1486 {
		yyb1486 = yyj1486 > l
	} else {
		yyb1486 = r.CheckBreak()
	}
	if yyb1486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSecurityPolicySpec{}
	} else {
		yyv1491 := &x.Spec
		yyv1491.CodecDecodeSelf(d)
	}
	for {
		yyj1486++
		if yyhl1486 {
			yyb1486 = yyj1486 > l
		} else {
			yyb1486 = r.CheckBreak()
		}
		if yyb1486 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1486-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1492 := z.EncBinary()
		_ = yym1492
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1493 := !z.EncBinary()
			yy2arr1493 := z.EncBasicHandle().StructToArray
			var yyq1493 [14]bool
			_, _, _ = yysep1493, yyq1493, yy2arr1493
			const yyr1493 bool = false
			yyq1493[0] = x.Privileged != false
			yyq1493[1] = len(x.DefaultAddCapabilities) != 0
			yyq1493[2] = len(x.RequiredDropCapabilities) != 0
			yyq1493[3] = len(x.AllowedCapabilities) != 0
			yyq1493[4] = len(x.Volumes) != 0
			yyq1493[5] = x.HostNetwork != false
			yyq1493[6] = len(x.HostPorts) != 0
			yyq1493[7] = x.HostPID != false
			yyq1493[8] = x.HostIPC != false
			yyq1493[13] = x.ReadOnlyRootFilesystem != false
			var yynn1493 int
			if yyr1493 || yy2arr1493 {
				r.EncodeArrayStart(14)
			} else {
				yynn1493 = 4
				for _, b := range yyq1493 {
					if b {
						yynn1493++
					}
				}
				r.EncodeMapStart(yynn1493)
				yynn1493 = 0
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1493[0] {
					yym1495 := z.EncBinary()
					_ = yym1495
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1493[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1496 := z.EncBinary()
					_ = yym1496
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				}
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1493[1] {
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1498 := z.EncBinary()
						_ = yym1498
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1493[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultAddCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1499 := z.EncBinary()
						_ = yym1499
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				}
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1493[2] {
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1501 := z.EncBinary()
						_ = yym1501
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1493[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDropCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1502 := z.EncBinary()
						_ = yym1502
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				}
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1493[3] {
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1504 := z.EncBinary()
						_ = yym1504
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.AllowedCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1493[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allowedCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1505 := z.EncBinary()
						_ = yym1505
						if false {
						} else {
							h.encSlicev1_Capability(([]pkg2_v1.Capability)(x.AllowedCapabilities), e)
						}
					}
				}
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1493[4] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1507 := z.EncBinary()
						_ = yym1507
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1493[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1508 := z.EncBinary()
						_ = yym1508
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1493[5] {
					yym1510 := z.EncBinary()
					_ = yym1510
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1493[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1511 := z.EncBinary()
					_ = yym1511
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1493[6] {
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1513 := z.EncBinary()
						_ = yym1513
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1493[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPorts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1514 := z.EncBinary()
						_ = yym1514
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				}
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1493[7] {
					yym1516 := z.EncBinary()
					_ = yym1516
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1493[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1517 := z.EncBinary()
					_ = yym1517
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1493[8] {
					yym1519 := z.EncBinary()
					_ = yym1519
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1493[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1520 := z.EncBinary()
					_ = yym1520
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1522 := &x.SELinux
				yy1522.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("seLinux"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1523 := &x.SELinux
				yy1523.CodecEncodeSelf(e)
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1525 := &x.RunAsUser
				yy1525.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1526 := &x.RunAsUser
				yy1526.CodecEncodeSelf(e)
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1528 := &x.SupplementalGroups
				yy1528.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1529 := &x.SupplementalGroups
				yy1529.CodecEncodeSelf(e)
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1531 := &x.FSGroup
				yy1531.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1532 := &x.FSGroup
				yy1532.CodecEncodeSelf(e)
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1493[13] {
					yym1534 := z.EncBinary()
					_ = yym1534
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1493[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1535 := z.EncBinary()
					_ = yym1535
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				}
			}
			if yyr1493 || yy2arr1493 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1536 := z.DecBinary()
	_ = yym1536
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1537 := r.ContainerType()
		if yyct1537 == codecSelferValueTypeMap1234 {
			yyl1537 := r.ReadMapStart()
			if yyl1537 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1537, d)
			}
		} else if yyct1537 == codecSelferValueTypeArray1234 {
			yyl1537 := r.ReadArrayStart()
			if yyl1537 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1537, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1538Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1538Slc
	var yyhl1538 bool = l >= 0
	for yyj1538 := 0; ; yyj1538++ {
		if yyhl1538 {
			if yyj1538 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1538Slc = r.DecodeBytes(yys1538Slc, true, true)
		yys1538 := string(yys1538Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1538 {
		case "privileged":
			if r.TryDecodeAsNil() {
				x.Privileged = false
			} else {
				x.Privileged = bool(r.DecodeBool())
			}
		case "defaultAddCapabilities":
			if r.TryDecodeAsNil() {
				x.DefaultAddCapabilities = nil
			} else {
				yyv1540 := &x.DefaultAddCapabilities
				yym1541 := z.DecBinary()
				_ = yym1541
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1540), d)
				}
			}
		case "requiredDropCapabilities":
			if r.TryDecodeAsNil() {
				x.RequiredDropCapabilities = nil
			} else {
				yyv1542 := &x.RequiredDropCapabilities
				yym1543 := z.DecBinary()
				_ = yym1543
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1542), d)
				}
			}
		case "allowedCapabilities":
			if r.TryDecodeAsNil() {
				x.AllowedCapabilities = nil
			} else {
				yyv1544 := &x.AllowedCapabilities
				yym1545 := z.DecBinary()
				_ = yym1545
				if false {
				} else {
					h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1544), d)
				}
			}
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1546 := &x.Volumes
				yym1547 := z.DecBinary()
				_ = yym1547
				if false {
				} else {
					h.decSliceFSType((*[]FSType)(yyv1546), d)
				}
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPorts":
			if r.TryDecodeAsNil() {
				x.HostPorts = nil
			} else {
				yyv1549 := &x.HostPorts
				yym1550 := z.DecBinary()
				_ = yym1550
				if false {
				} else {
					h.decSliceHostPortRange((*[]HostPortRange)(yyv1549), d)
				}
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinux":
			if r.TryDecodeAsNil() {
				x.SELinux = SELinuxStrategyOptions{}
			} else {
				yyv1553 := &x.SELinux
				yyv1553.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				x.RunAsUser = RunAsUserStrategyOptions{}
			} else {
				yyv1554 := &x.RunAsUser
				yyv1554.CodecDecodeSelf(d)
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
			} else {
				yyv1555 := &x.SupplementalGroups
				yyv1555.CodecDecodeSelf(d)
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				x.FSGroup = FSGroupStrategyOptions{}
			} else {
				yyv1556 := &x.FSGroup
				yyv1556.CodecDecodeSelf(d)
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				x.ReadOnlyRootFilesystem = false
			} else {
				x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1538)
		} // end switch yys1538
	} // end for yyj1538
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1558 int
	var yyb1558 bool
	var yyhl1558 bool = l >= 0
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Privileged = false
	} else {
		x.Privileged = bool(r.DecodeBool())
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultAddCapabilities = nil
	} else {
		yyv1560 := &x.DefaultAddCapabilities
		yym1561 := z.DecBinary()
		_ = yym1561
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1560), d)
		}
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDropCapabilities = nil
	} else {
		yyv1562 := &x.RequiredDropCapabilities
		yym1563 := z.DecBinary()
		_ = yym1563
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1562), d)
		}
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AllowedCapabilities = nil
	} else {
		yyv1564 := &x.AllowedCapabilities
		yym1565 := z.DecBinary()
		_ = yym1565
		if false {
		} else {
			h.decSlicev1_Capability((*[]pkg2_v1.Capability)(yyv1564), d)
		}
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1566 := &x.Volumes
		yym1567 := z.DecBinary()
		_ = yym1567
		if false {
		} else {
			h.decSliceFSType((*[]FSType)(yyv1566), d)
		}
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPorts = nil
	} else {
		yyv1569 := &x.HostPorts
		yym1570 := z.DecBinary()
		_ = yym1570
		if false {
		} else {
			h.decSliceHostPortRange((*[]HostPortRange)(yyv1569), d)
		}
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SELinux = SELinuxStrategyOptions{}
	} else {
		yyv1573 := &x.SELinux
		yyv1573.CodecDecodeSelf(d)
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RunAsUser = RunAsUserStrategyOptions{}
	} else {
		yyv1574 := &x.RunAsUser
		yyv1574.CodecDecodeSelf(d)
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
	} else {
		yyv1575 := &x.SupplementalGroups
		yyv1575.CodecDecodeSelf(d)
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSGroup = FSGroupStrategyOptions{}
	} else {
		yyv1576 := &x.FSGroup
		yyv1576.CodecDecodeSelf(d)
	}
	yyj1558++
	if yyhl1558 {
		yyb1558 = yyj1558 > l
	} else {
		yyb1558 = r.CheckBreak()
	}
	if yyb1558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnlyRootFilesystem = false
	} else {
		x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
	}
	for {
		yyj1558++
		if yyhl1558 {
			yyb1558 = yyj1558 > l
		} else {
			yyb1558 = r.CheckBreak()
		}
		if yyb1558 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1558-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1578 := z.EncBinary()
	_ = yym1578
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1579 := z.DecBinary()
	_ = yym1579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPortRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1580 := z.EncBinary()
		_ = yym1580
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1581 := !z.EncBinary()
			yy2arr1581 := z.EncBasicHandle().StructToArray
			var yyq1581 [2]bool
			_, _, _ = yysep1581, yyq1581, yy2arr1581
			const yyr1581 bool = false
			var yynn1581 int
			if yyr1581 || yy2arr1581 {
				r.EncodeArrayStart(2)
			} else {
				yynn1581 = 2
				for _, b := range yyq1581 {
					if b {
						yynn1581++
					}
				}
				r.EncodeMapStart(yynn1581)
				yynn1581 = 0
			}
			if yyr1581 || yy2arr1581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1583 := z.EncBinary()
				_ = yym1583
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1584 := z.EncBinary()
				_ = yym1584
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1581 || yy2arr1581 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1586 := z.EncBinary()
				_ = yym1586
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1587 := z.EncBinary()
				_ = yym1587
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1581 || yy2arr1581 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPortRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1588 := z.DecBinary()
	_ = yym1588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1589 := r.ContainerType()
		if yyct1589 == codecSelferValueTypeMap1234 {
			yyl1589 := r.ReadMapStart()
			if yyl1589 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1589, d)
			}
		} else if yyct1589 == codecSelferValueTypeArray1234 {
			yyl1589 := r.ReadArrayStart()
			if yyl1589 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1589, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPortRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1590Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1590Slc
	var yyhl1590 bool = l >= 0
	for yyj1590 := 0; ; yyj1590++ {
		if yyhl1590 {
			if yyj1590 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1590Slc = r.DecodeBytes(yys1590Slc, true, true)
		yys1590 := string(yys1590Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1590 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int32(r.DecodeInt(32))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1590)
		} // end switch yys1590
	} // end for yyj1590
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPortRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1593 int
	var yyb1593 bool
	var yyhl1593 bool = l >= 0
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int32(r.DecodeInt(32))
	}
	yyj1593++
	if yyhl1593 {
		yyb1593 = yyj1593 > l
	} else {
		yyb1593 = r.CheckBreak()
	}
	if yyb1593 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int32(r.DecodeInt(32))
	}
	for {
		yyj1593++
		if yyhl1593 {
			yyb1593 = yyj1593 > l
		} else {
			yyb1593 = r.CheckBreak()
		}
		if yyb1593 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1593-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1596 := z.EncBinary()
		_ = yym1596
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1597 := !z.EncBinary()
			yy2arr1597 := z.EncBasicHandle().StructToArray
			var yyq1597 [2]bool
			_, _, _ = yysep1597, yyq1597, yy2arr1597
			const yyr1597 bool = false
			yyq1597[1] = x.SELinuxOptions != nil
			var yynn1597 int
			if yyr1597 || yy2arr1597 {
				r.EncodeArrayStart(2)
			} else {
				yynn1597 = 1
				for _, b := range yyq1597 {
					if b {
						yynn1597++
					}
				}
				r.EncodeMapStart(yynn1597)
				yynn1597 = 0
			}
			if yyr1597 || yy2arr1597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1597 || yy2arr1597 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1597[1] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						yym1600 := z.EncBinary()
						_ = yym1600
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SELinuxOptions) {
						} else {
							z.EncFallback(x.SELinuxOptions)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1597[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						yym1601 := z.EncBinary()
						_ = yym1601
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SELinuxOptions) {
						} else {
							z.EncFallback(x.SELinuxOptions)
						}
					}
				}
			}
			if yyr1597 || yy2arr1597 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1602 := z.DecBinary()
	_ = yym1602
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1603 := r.ContainerType()
		if yyct1603 == codecSelferValueTypeMap1234 {
			yyl1603 := r.ReadMapStart()
			if yyl1603 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1603, d)
			}
		} else if yyct1603 == codecSelferValueTypeArray1234 {
			yyl1603 := r.ReadArrayStart()
			if yyl1603 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1603, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1604Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1604Slc
	var yyhl1604 bool = l >= 0
	for yyj1604 := 0; ; yyj1604++ {
		if yyhl1604 {
			if yyj1604 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1604Slc = r.DecodeBytes(yys1604Slc, true, true)
		yys1604 := string(yys1604Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1604 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SELinuxStrategy(r.DecodeString())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(pkg2_v1.SELinuxOptions)
				}
				yym1607 := z.DecBinary()
				_ = yym1607
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SELinuxOptions) {
				} else {
					z.DecFallback(x.SELinuxOptions, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1604)
		} // end switch yys1604
	} // end for yyj1604
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1608 int
	var yyb1608 bool
	var yyhl1608 bool = l >= 0
	yyj1608++
	if yyhl1608 {
		yyb1608 = yyj1608 > l
	} else {
		yyb1608 = r.CheckBreak()
	}
	if yyb1608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SELinuxStrategy(r.DecodeString())
	}
	yyj1608++
	if yyhl1608 {
		yyb1608 = yyj1608 > l
	} else {
		yyb1608 = r.CheckBreak()
	}
	if yyb1608 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(pkg2_v1.SELinuxOptions)
		}
		yym1611 := z.DecBinary()
		_ = yym1611
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SELinuxOptions) {
		} else {
			z.DecFallback(x.SELinuxOptions, false)
		}
	}
	for {
		yyj1608++
		if yyhl1608 {
			yyb1608 = yyj1608 > l
		} else {
			yyb1608 = r.CheckBreak()
		}
		if yyb1608 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1608-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SELinuxStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1612 := z.EncBinary()
	_ = yym1612
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SELinuxStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1613 := z.DecBinary()
	_ = yym1613
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RunAsUserStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1614 := z.EncBinary()
		_ = yym1614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1615 := !z.EncBinary()
			yy2arr1615 := z.EncBasicHandle().StructToArray
			var yyq1615 [2]bool
			_, _, _ = yysep1615, yyq1615, yy2arr1615
			const yyr1615 bool = false
			yyq1615[1] = len(x.Ranges) != 0
			var yynn1615 int
			if yyr1615 || yy2arr1615 {
				r.EncodeArrayStart(2)
			} else {
				yynn1615 = 1
				for _, b := range yyq1615 {
					if b {
						yynn1615++
					}
				}
				r.EncodeMapStart(yynn1615)
				yynn1615 = 0
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1615[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1618 := z.EncBinary()
						_ = yym1618
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1615[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1619 := z.EncBinary()
						_ = yym1619
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1615 || yy2arr1615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RunAsUserStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1620 := z.DecBinary()
	_ = yym1620
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1621 := r.ContainerType()
		if yyct1621 == codecSelferValueTypeMap1234 {
			yyl1621 := r.ReadMapStart()
			if yyl1621 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1621, d)
			}
		} else if yyct1621 == codecSelferValueTypeArray1234 {
			yyl1621 := r.ReadArrayStart()
			if yyl1621 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1621, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1622Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1622Slc
	var yyhl1622 bool = l >= 0
	for yyj1622 := 0; ; yyj1622++ {
		if yyhl1622 {
			if yyj1622 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1622Slc = r.DecodeBytes(yys1622Slc, true, true)
		yys1622 := string(yys1622Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1622 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = RunAsUserStrategy(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1624 := &x.Ranges
				yym1625 := z.DecBinary()
				_ = yym1625
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1624), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1622)
		} // end switch yys1622
	} // end for yyj1622
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1626 int
	var yyb1626 bool
	var yyhl1626 bool = l >= 0
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = RunAsUserStrategy(r.DecodeString())
	}
	yyj1626++
	if yyhl1626 {
		yyb1626 = yyj1626 > l
	} else {
		yyb1626 = r.CheckBreak()
	}
	if yyb1626 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1628 := &x.Ranges
		yym1629 := z.DecBinary()
		_ = yym1629
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1628), d)
		}
	}
	for {
		yyj1626++
		if yyhl1626 {
			yyb1626 = yyj1626 > l
		} else {
			yyb1626 = r.CheckBreak()
		}
		if yyb1626 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1626-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IDRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1630 := z.EncBinary()
		_ = yym1630
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1631 := !z.EncBinary()
			yy2arr1631 := z.EncBasicHandle().StructToArray
			var yyq1631 [2]bool
			_, _, _ = yysep1631, yyq1631, yy2arr1631
			const yyr1631 bool = false
			var yynn1631 int
			if yyr1631 || yy2arr1631 {
				r.EncodeArrayStart(2)
			} else {
				yynn1631 = 2
				for _, b := range yyq1631 {
					if b {
						yynn1631++
					}
				}
				r.EncodeMapStart(yynn1631)
				yynn1631 = 0
			}
			if yyr1631 || yy2arr1631 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1633 := z.EncBinary()
				_ = yym1633
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1634 := z.EncBinary()
				_ = yym1634
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1631 || yy2arr1631 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1636 := z.EncBinary()
				_ = yym1636
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1637 := z.EncBinary()
				_ = yym1637
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1631 || yy2arr1631 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IDRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1638 := z.DecBinary()
	_ = yym1638
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1639 := r.ContainerType()
		if yyct1639 == codecSelferValueTypeMap1234 {
			yyl1639 := r.ReadMapStart()
			if yyl1639 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1639, d)
			}
		} else if yyct1639 == codecSelferValueTypeArray1234 {
			yyl1639 := r.ReadArrayStart()
			if yyl1639 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1639, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IDRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1640Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1640Slc
	var yyhl1640 bool = l >= 0
	for yyj1640 := 0; ; yyj1640++ {
		if yyhl1640 {
			if yyj1640 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1640Slc = r.DecodeBytes(yys1640Slc, true, true)
		yys1640 := string(yys1640Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1640 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int64(r.DecodeInt(64))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1640)
		} // end switch yys1640
	} // end for yyj1640
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IDRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1643 int
	var yyb1643 bool
	var yyhl1643 bool = l >= 0
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int64(r.DecodeInt(64))
	}
	yyj1643++
	if yyhl1643 {
		yyb1643 = yyj1643 > l
	} else {
		yyb1643 = r.CheckBreak()
	}
	if yyb1643 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int64(r.DecodeInt(64))
	}
	for {
		yyj1643++
		if yyhl1643 {
			yyb1643 = yyj1643 > l
		} else {
			yyb1643 = r.CheckBreak()
		}
		if yyb1643 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1643-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RunAsUserStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1646 := z.EncBinary()
	_ = yym1646
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RunAsUserStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1647 := z.DecBinary()
	_ = yym1647
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *FSGroupStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1648 := z.EncBinary()
		_ = yym1648
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1649 := !z.EncBinary()
			yy2arr1649 := z.EncBasicHandle().StructToArray
			var yyq1649 [2]bool
			_, _, _ = yysep1649, yyq1649, yy2arr1649
			const yyr1649 bool = false
			yyq1649[0] = x.Rule != ""
			yyq1649[1] = len(x.Ranges) != 0
			var yynn1649 int
			if yyr1649 || yy2arr1649 {
				r.EncodeArrayStart(2)
			} else {
				yynn1649 = 0
				for _, b := range yyq1649 {
					if b {
						yynn1649++
					}
				}
				r.EncodeMapStart(yynn1649)
				yynn1649 = 0
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1649[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1649[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1649[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1652 := z.EncBinary()
						_ = yym1652
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1653 := z.EncBinary()
						_ = yym1653
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FSGroupStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1654 := z.DecBinary()
	_ = yym1654
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1655 := r.ContainerType()
		if yyct1655 == codecSelferValueTypeMap1234 {
			yyl1655 := r.ReadMapStart()
			if yyl1655 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1655, d)
			}
		} else if yyct1655 == codecSelferValueTypeArray1234 {
			yyl1655 := r.ReadArrayStart()
			if yyl1655 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1655, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1656Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1656Slc
	var yyhl1656 bool = l >= 0
	for yyj1656 := 0; ; yyj1656++ {
		if yyhl1656 {
			if yyj1656 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1656Slc = r.DecodeBytes(yys1656Slc, true, true)
		yys1656 := string(yys1656Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1656 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = FSGroupStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1658 := &x.Ranges
				yym1659 := z.DecBinary()
				_ = yym1659
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1658), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1656)
		} // end switch yys1656
	} // end for yyj1656
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1660 int
	var yyb1660 bool
	var yyhl1660 bool = l >= 0
	yyj1660++
	if yyhl1660 {
		yyb1660 = yyj1660 > l
	} else {
		yyb1660 = r.CheckBreak()
	}
	if yyb1660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = FSGroupStrategyType(r.DecodeString())
	}
	yyj1660++
	if yyhl1660 {
		yyb1660 = yyj1660 > l
	} else {
		yyb1660 = r.CheckBreak()
	}
	if yyb1660 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1662 := &x.Ranges
		yym1663 := z.DecBinary()
		_ = yym1663
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1662), d)
		}
	}
	for {
		yyj1660++
		if yyhl1660 {
			yyb1660 = yyj1660 > l
		} else {
			yyb1660 = r.CheckBreak()
		}
		if yyb1660 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1660-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSGroupStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1664 := z.EncBinary()
	_ = yym1664
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSGroupStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1665 := z.DecBinary()
	_ = yym1665
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1666 := z.EncBinary()
		_ = yym1666
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1667 := !z.EncBinary()
			yy2arr1667 := z.EncBasicHandle().StructToArray
			var yyq1667 [2]bool
			_, _, _ = yysep1667, yyq1667, yy2arr1667
			const yyr1667 bool = false
			yyq1667[0] = x.Rule != ""
			yyq1667[1] = len(x.Ranges) != 0
			var yynn1667 int
			if yyr1667 || yy2arr1667 {
				r.EncodeArrayStart(2)
			} else {
				yynn1667 = 0
				for _, b := range yyq1667 {
					if b {
						yynn1667++
					}
				}
				r.EncodeMapStart(yynn1667)
				yynn1667 = 0
			}
			if yyr1667 || yy2arr1667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1667[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1667[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1667 || yy2arr1667 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1667[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1670 := z.EncBinary()
						_ = yym1670
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1667[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1671 := z.EncBinary()
						_ = yym1671
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1667 || yy2arr1667 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1672 := z.DecBinary()
	_ = yym1672
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1673 := r.ContainerType()
		if yyct1673 == codecSelferValueTypeMap1234 {
			yyl1673 := r.ReadMapStart()
			if yyl1673 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1673, d)
			}
		} else if yyct1673 == codecSelferValueTypeArray1234 {
			yyl1673 := r.ReadArrayStart()
			if yyl1673 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1673, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1674Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1674Slc
	var yyhl1674 bool = l >= 0
	for yyj1674 := 0; ; yyj1674++ {
		if yyhl1674 {
			if yyj1674 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1674Slc = r.DecodeBytes(yys1674Slc, true, true)
		yys1674 := string(yys1674Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1674 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1676 := &x.Ranges
				yym1677 := z.DecBinary()
				_ = yym1677
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1676), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1674)
		} // end switch yys1674
	} // end for yyj1674
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1678 int
	var yyb1678 bool
	var yyhl1678 bool = l >= 0
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
	}
	yyj1678++
	if yyhl1678 {
		yyb1678 = yyj1678 > l
	} else {
		yyb1678 = r.CheckBreak()
	}
	if yyb1678 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1680 := &x.Ranges
		yym1681 := z.DecBinary()
		_ = yym1681
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1680), d)
		}
	}
	for {
		yyj1678++
		if yyhl1678 {
			yyb1678 = yyj1678 > l
		} else {
			yyb1678 = r.CheckBreak()
		}
		if yyb1678 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1678-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SupplementalGroupsStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1682 := z.EncBinary()
	_ = yym1682
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SupplementalGroupsStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1683 := z.DecBinary()
	_ = yym1683
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSecurityPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1684 := z.EncBinary()
		_ = yym1684
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1685 := !z.EncBinary()
			yy2arr1685 := z.EncBasicHandle().StructToArray
			var yyq1685 [4]bool
			_, _, _ = yysep1685, yyq1685, yy2arr1685
			const yyr1685 bool = false
			yyq1685[0] = x.Kind != ""
			yyq1685[1] = x.APIVersion != ""
			yyq1685[2] = true
			var yynn1685 int
			if yyr1685 || yy2arr1685 {
				r.EncodeArrayStart(4)
			} else {
				yynn1685 = 1
				for _, b := range yyq1685 {
					if b {
						yynn1685++
					}
				}
				r.EncodeMapStart(yynn1685)
				yynn1685 = 0
			}
			if yyr1685 || yy2arr1685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1685[0] {
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1685[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1688 := z.EncBinary()
					_ = yym1688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1685 || yy2arr1685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1685[1] {
					yym1690 := z.EncBinary()
					_ = yym1690
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1685[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1691 := z.EncBinary()
					_ = yym1691
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1685 || yy2arr1685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1685[2] {
					yy1693 := &x.ListMeta
					yym1694 := z.EncBinary()
					_ = yym1694
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1693) {
					} else {
						z.EncFallback(yy1693)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1685[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1695 := &x.ListMeta
					yym1696 := z.EncBinary()
					_ = yym1696
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1695) {
					} else {
						z.EncFallback(yy1695)
					}
				}
			}
			if yyr1685 || yy2arr1685 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1698 := z.EncBinary()
					_ = yym1698
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1699 := z.EncBinary()
					_ = yym1699
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			}
			if yyr1685 || yy2arr1685 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1700 := z.DecBinary()
	_ = yym1700
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1701 := r.ContainerType()
		if yyct1701 == codecSelferValueTypeMap1234 {
			yyl1701 := r.ReadMapStart()
			if yyl1701 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1701, d)
			}
		} else if yyct1701 == codecSelferValueTypeArray1234 {
			yyl1701 := r.ReadArrayStart()
			if yyl1701 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1701, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1702Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1702Slc
	var yyhl1702 bool = l >= 0
	for yyj1702 := 0; ; yyj1702++ {
		if yyhl1702 {
			if yyj1702 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1702Slc = r.DecodeBytes(yys1702Slc, true, true)
		yys1702 := string(yys1702Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1702 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1705 := &x.ListMeta
				yym1706 := z.DecBinary()
				_ = yym1706
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1705) {
				} else {
					z.DecFallback(yyv1705, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1707 := &x.Items
				yym1708 := z.DecBinary()
				_ = yym1708
				if false {
				} else {
					h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1707), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1702)
		} // end switch yys1702
	} // end for yyj1702
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1709 int
	var yyb1709 bool
	var yyhl1709 bool = l >= 0
	yyj1709++
	if yyhl1709 {
		yyb1709 = yyj1709 > l
	} else {
		yyb1709 = r.CheckBreak()
	}
	if yyb1709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1709++
	if yyhl1709 {
		yyb1709 = yyj1709 > l
	} else {
		yyb1709 = r.CheckBreak()
	}
	if yyb1709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1709++
	if yyhl1709 {
		yyb1709 = yyj1709 > l
	} else {
		yyb1709 = r.CheckBreak()
	}
	if yyb1709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1712 := &x.ListMeta
		yym1713 := z.DecBinary()
		_ = yym1713
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1712) {
		} else {
			z.DecFallback(yyv1712, false)
		}
	}
	yyj1709++
	if yyhl1709 {
		yyb1709 = yyj1709 > l
	} else {
		yyb1709 = r.CheckBreak()
	}
	if yyb1709 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1714 := &x.Items
		yym1715 := z.DecBinary()
		_ = yym1715
		if false {
		} else {
			h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1714), d)
		}
	}
	for {
		yyj1709++
		if yyhl1709 {
			yyb1709 = yyj1709 > l
		} else {
			yyb1709 = r.CheckBreak()
		}
		if yyb1709 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1709-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1716 := z.EncBinary()
		_ = yym1716
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1717 := !z.EncBinary()
			yy2arr1717 := z.EncBasicHandle().StructToArray
			var yyq1717 [4]bool
			_, _, _ = yysep1717, yyq1717, yy2arr1717
			const yyr1717 bool = false
			yyq1717[0] = x.Kind != ""
			yyq1717[1] = x.APIVersion != ""
			yyq1717[2] = true
			yyq1717[3] = true
			var yynn1717 int
			if yyr1717 || yy2arr1717 {
				r.EncodeArrayStart(4)
			} else {
				yynn1717 = 0
				for _, b := range yyq1717 {
					if b {
						yynn1717++
					}
				}
				r.EncodeMapStart(yynn1717)
				yynn1717 = 0
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1717[0] {
					yym1719 := z.EncBinary()
					_ = yym1719
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1717[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1720 := z.EncBinary()
					_ = yym1720
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1717[1] {
					yym1722 := z.EncBinary()
					_ = yym1722
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1717[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1723 := z.EncBinary()
					_ = yym1723
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1717[2] {
					yy1725 := &x.ObjectMeta
					yym1726 := z.EncBinary()
					_ = yym1726
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1725) {
					} else {
						z.EncFallback(yy1725)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1717[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1727 := &x.ObjectMeta
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1727) {
					} else {
						z.EncFallback(yy1727)
					}
				}
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1717[3] {
					yy1730 := &x.Spec
					yy1730.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1717[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1731 := &x.Spec
					yy1731.CodecEncodeSelf(e)
				}
			}
			if yyr1717 || yy2arr1717 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1732 := z.DecBinary()
	_ = yym1732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1733 := r.ContainerType()
		if yyct1733 == codecSelferValueTypeMap1234 {
			yyl1733 := r.ReadMapStart()
			if yyl1733 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1733, d)
			}
		} else if yyct1733 == codecSelferValueTypeArray1234 {
			yyl1733 := r.ReadArrayStart()
			if yyl1733 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1733, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1734Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1734Slc
	var yyhl1734 bool = l >= 0
	for yyj1734 := 0; ; yyj1734++ {
		if yyhl1734 {
			if yyj1734 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1734Slc = r.DecodeBytes(yys1734Slc, true, true)
		yys1734 := string(yys1734Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1734 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv1737 := &x.ObjectMeta
				yym1738 := z.DecBinary()
				_ = yym1738
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1737) {
				} else {
					z.DecFallback(yyv1737, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NetworkPolicySpec{}
			} else {
				yyv1739 := &x.Spec
				yyv1739.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1734)
		} // end switch yys1734
	} // end for yyj1734
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1740 int
	var yyb1740 bool
	var yyhl1740 bool = l >= 0
	yyj1740++
	if yyhl1740 {
		yyb1740 = yyj1740 > l
	} else {
		yyb1740 = r.CheckBreak()
	}
	if yyb1740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1740++
	if yyhl1740 {
		yyb1740 = yyj1740 > l
	} else {
		yyb1740 = r.CheckBreak()
	}
	if yyb1740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1740++
	if yyhl1740 {
		yyb1740 = yyj1740 > l
	} else {
		yyb1740 = r.CheckBreak()
	}
	if yyb1740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv1743 := &x.ObjectMeta
		yym1744 := z.DecBinary()
		_ = yym1744
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1743) {
		} else {
			z.DecFallback(yyv1743, false)
		}
	}
	yyj1740++
	if yyhl1740 {
		yyb1740 = yyj1740 > l
	} else {
		yyb1740 = r.CheckBreak()
	}
	if yyb1740 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NetworkPolicySpec{}
	} else {
		yyv1745 := &x.Spec
		yyv1745.CodecDecodeSelf(d)
	}
	for {
		yyj1740++
		if yyhl1740 {
			yyb1740 = yyj1740 > l
		} else {
			yyb1740 = r.CheckBreak()
		}
		if yyb1740 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1740-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1746 := z.EncBinary()
		_ = yym1746
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1747 := !z.EncBinary()
			yy2arr1747 := z.EncBasicHandle().StructToArray
			var yyq1747 [2]bool
			_, _, _ = yysep1747, yyq1747, yy2arr1747
			const yyr1747 bool = false
			yyq1747[1] = len(x.Ingress) != 0
			var yynn1747 int
			if yyr1747 || yy2arr1747 {
				r.EncodeArrayStart(2)
			} else {
				yynn1747 = 1
				for _, b := range yyq1747 {
					if b {
						yynn1747++
					}
				}
				r.EncodeMapStart(yynn1747)
				yynn1747 = 0
			}
			if yyr1747 || yy2arr1747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1749 := &x.PodSelector
				yy1749.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1750 := &x.PodSelector
				yy1750.CodecEncodeSelf(e)
			}
			if yyr1747 || yy2arr1747 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1747[1] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1752 := z.EncBinary()
						_ = yym1752
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1747[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1753 := z.EncBinary()
						_ = yym1753
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1747 || yy2arr1747 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1754 := z.DecBinary()
	_ = yym1754
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1755 := r.ContainerType()
		if yyct1755 == codecSelferValueTypeMap1234 {
			yyl1755 := r.ReadMapStart()
			if yyl1755 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1755, d)
			}
		} else if yyct1755 == codecSelferValueTypeArray1234 {
			yyl1755 := r.ReadArrayStart()
			if yyl1755 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1755, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1756Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1756Slc
	var yyhl1756 bool = l >= 0
	for yyj1756 := 0; ; yyj1756++ {
		if yyhl1756 {
			if yyj1756 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1756Slc = r.DecodeBytes(yys1756Slc, true, true)
		yys1756 := string(yys1756Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1756 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				x.PodSelector = LabelSelector{}
			} else {
				yyv1757 := &x.PodSelector
				yyv1757.CodecDecodeSelf(d)
			}
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1758 := &x.Ingress
				yym1759 := z.DecBinary()
				_ = yym1759
				if false {
				} else {
					h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1758), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1756)
		} // end switch yys1756
	} // end for yyj1756
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1760 int
	var yyb1760 bool
	var yyhl1760 bool = l >= 0
	yyj1760++
	if yyhl1760 {
		yyb1760 = yyj1760 > l
	} else {
		yyb1760 = r.CheckBreak()
	}
	if yyb1760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSelector = LabelSelector{}
	} else {
		yyv1761 := &x.PodSelector
		yyv1761.CodecDecodeSelf(d)
	}
	yyj1760++
	if yyhl1760 {
		yyb1760 = yyj1760 > l
	} else {
		yyb1760 = r.CheckBreak()
	}
	if yyb1760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1762 := &x.Ingress
		yym1763 := z.DecBinary()
		_ = yym1763
		if false {
		} else {
			h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1762), d)
		}
	}
	for {
		yyj1760++
		if yyhl1760 {
			yyb1760 = yyj1760 > l
		} else {
			yyb1760 = r.CheckBreak()
		}
		if yyb1760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyIngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1764 := z.EncBinary()
		_ = yym1764
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1765 := !z.EncBinary()
			yy2arr1765 := z.EncBasicHandle().StructToArray
			var yyq1765 [2]bool
			_, _, _ = yysep1765, yyq1765, yy2arr1765
			const yyr1765 bool = false
			yyq1765[0] = len(x.Ports) != 0
			yyq1765[1] = len(x.From) != 0
			var yynn1765 int
			if yyr1765 || yy2arr1765 {
				r.EncodeArrayStart(2)
			} else {
				yynn1765 = 0
				for _, b := range yyq1765 {
					if b {
						yynn1765++
					}
				}
				r.EncodeMapStart(yynn1765)
				yynn1765 = 0
			}
			if yyr1765 || yy2arr1765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1765[0] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1767 := z.EncBinary()
						_ = yym1767
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1765[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1768 := z.EncBinary()
						_ = yym1768
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1765 || yy2arr1765 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1765[1] {
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1770 := z.EncBinary()
						_ = yym1770
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1765[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("from"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1771 := z.EncBinary()
						_ = yym1771
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				}
			}
			if yyr1765 || yy2arr1765 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyIngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1772 := z.DecBinary()
	_ = yym1772
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1773 := r.ContainerType()
		if yyct1773 == codecSelferValueTypeMap1234 {
			yyl1773 := r.ReadMapStart()
			if yyl1773 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1773, d)
			}
		} else if yyct1773 == codecSelferValueTypeArray1234 {
			yyl1773 := r.ReadArrayStart()
			if yyl1773 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1773, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1774Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1774Slc
	var yyhl1774 bool = l >= 0
	for yyj1774 := 0; ; yyj1774++ {
		if yyhl1774 {
			if yyj1774 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1774Slc = r.DecodeBytes(yys1774Slc, true, true)
		yys1774 := string(yys1774Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1774 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1775 := &x.Ports
				yym1776 := z.DecBinary()
				_ = yym1776
				if false {
				} else {
					h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1775), d)
				}
			}
		case "from":
			if r.TryDecodeAsNil() {
				x.From = nil
			} else {
				yyv1777 := &x.From
				yym1778 := z.DecBinary()
				_ = yym1778
				if false {
				} else {
					h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1777), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1774)
		} // end switch yys1774
	} // end for yyj1774
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1779 int
	var yyb1779 bool
	var yyhl1779 bool = l >= 0
	yyj1779++
	if yyhl1779 {
		yyb1779 = yyj1779 > l
	} else {
		yyb1779 = r.CheckBreak()
	}
	if yyb1779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1780 := &x.Ports
		yym1781 := z.DecBinary()
		_ = yym1781
		if false {
		} else {
			h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1780), d)
		}
	}
	yyj1779++
	if yyhl1779 {
		yyb1779 = yyj1779 > l
	} else {
		yyb1779 = r.CheckBreak()
	}
	if yyb1779 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.From = nil
	} else {
		yyv1782 := &x.From
		yym1783 := z.DecBinary()
		_ = yym1783
		if false {
		} else {
			h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1782), d)
		}
	}
	for {
		yyj1779++
		if yyhl1779 {
			yyb1779 = yyj1779 > l
		} else {
			yyb1779 = r.CheckBreak()
		}
		if yyb1779 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1779-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1784 := z.EncBinary()
		_ = yym1784
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1785 := !z.EncBinary()
			yy2arr1785 := z.EncBasicHandle().StructToArray
			var yyq1785 [2]bool
			_, _, _ = yysep1785, yyq1785, yy2arr1785
			const yyr1785 bool = false
			yyq1785[0] = x.Protocol != nil
			yyq1785[1] = x.Port != nil
			var yynn1785 int
			if yyr1785 || yy2arr1785 {
				r.EncodeArrayStart(2)
			} else {
				yynn1785 = 0
				for _, b := range yyq1785 {
					if b {
						yynn1785++
					}
				}
				r.EncodeMapStart(yynn1785)
				yynn1785 = 0
			}
			if yyr1785 || yy2arr1785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1785[0] {
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1787 := *x.Protocol
						yym1788 := z.EncBinary()
						_ = yym1788
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1787) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1787))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1785[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1789 := *x.Protocol
						yym1790 := z.EncBinary()
						_ = yym1790
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1789) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1789))
						}
					}
				}
			}
			if yyr1785 || yy2arr1785 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1785[1] {
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1792 := z.EncBinary()
						_ = yym1792
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1792 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1785[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1793 := z.EncBinary()
						_ = yym1793
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1793 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				}
			}
			if yyr1785 || yy2arr1785 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1794 := z.DecBinary()
	_ = yym1794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1795 := r.ContainerType()
		if yyct1795 == codecSelferValueTypeMap1234 {
			yyl1795 := r.ReadMapStart()
			if yyl1795 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1795, d)
			}
		} else if yyct1795 == codecSelferValueTypeArray1234 {
			yyl1795 := r.ReadArrayStart()
			if yyl1795 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1796Slc
	var yyhl1796 bool = l >= 0
	for yyj1796 := 0; ; yyj1796++ {
		if yyhl1796 {
			if yyj1796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1796Slc = r.DecodeBytes(yys1796Slc, true, true)
		yys1796 := string(yys1796Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1796 {
		case "protocol":
			if r.TryDecodeAsNil() {
				if x.Protocol != nil {
					x.Protocol = nil
				}
			} else {
				if x.Protocol == nil {
					x.Protocol = new(pkg2_v1.Protocol)
				}
				yym1798 := z.DecBinary()
				_ = yym1798
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Protocol) {
				} else {
					*((*string)(x.Protocol)) = r.DecodeString()
				}
			}
		case "port":
			if r.TryDecodeAsNil() {
				if x.Port != nil {
					x.Port = nil
				}
			} else {
				if x.Port == nil {
					x.Port = new(pkg5_intstr.IntOrString)
				}
				yym1800 := z.DecBinary()
				_ = yym1800
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Port) {
				} else if !yym1800 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Port)
				} else {
					z.DecFallback(x.Port, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1796)
		} // end switch yys1796
	} // end for yyj1796
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1801 int
	var yyb1801 bool
	var yyhl1801 bool = l >= 0
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Protocol != nil {
			x.Protocol = nil
		}
	} else {
		if x.Protocol == nil {
			x.Protocol = new(pkg2_v1.Protocol)
		}
		yym1803 := z.DecBinary()
		_ = yym1803
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Protocol) {
		} else {
			*((*string)(x.Protocol)) = r.DecodeString()
		}
	}
	yyj1801++
	if yyhl1801 {
		yyb1801 = yyj1801 > l
	} else {
		yyb1801 = r.CheckBreak()
	}
	if yyb1801 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Port != nil {
			x.Port = nil
		}
	} else {
		if x.Port == nil {
			x.Port = new(pkg5_intstr.IntOrString)
		}
		yym1805 := z.DecBinary()
		_ = yym1805
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Port) {
		} else if !yym1805 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Port)
		} else {
			z.DecFallback(x.Port, false)
		}
	}
	for {
		yyj1801++
		if yyhl1801 {
			yyb1801 = yyj1801 > l
		} else {
			yyb1801 = r.CheckBreak()
		}
		if yyb1801 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1801-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPeer) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1806 := z.EncBinary()
		_ = yym1806
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1807 := !z.EncBinary()
			yy2arr1807 := z.EncBasicHandle().StructToArray
			var yyq1807 [2]bool
			_, _, _ = yysep1807, yyq1807, yy2arr1807
			const yyr1807 bool = false
			yyq1807[0] = x.PodSelector != nil
			yyq1807[1] = x.NamespaceSelector != nil
			var yynn1807 int
			if yyr1807 || yy2arr1807 {
				r.EncodeArrayStart(2)
			} else {
				yynn1807 = 0
				for _, b := range yyq1807 {
					if b {
						yynn1807++
					}
				}
				r.EncodeMapStart(yynn1807)
				yynn1807 = 0
			}
			if yyr1807 || yy2arr1807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1807[0] {
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						x.PodSelector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1807[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						x.PodSelector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1807 || yy2arr1807 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1807[1] {
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						x.NamespaceSelector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1807[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespaceSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						x.NamespaceSelector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1807 || yy2arr1807 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPeer) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1810 := z.DecBinary()
	_ = yym1810
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1811 := r.ContainerType()
		if yyct1811 == codecSelferValueTypeMap1234 {
			yyl1811 := r.ReadMapStart()
			if yyl1811 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1811, d)
			}
		} else if yyct1811 == codecSelferValueTypeArray1234 {
			yyl1811 := r.ReadArrayStart()
			if yyl1811 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1811, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1812Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1812Slc
	var yyhl1812 bool = l >= 0
	for yyj1812 := 0; ; yyj1812++ {
		if yyhl1812 {
			if yyj1812 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1812Slc = r.DecodeBytes(yys1812Slc, true, true)
		yys1812 := string(yys1812Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1812 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				if x.PodSelector != nil {
					x.PodSelector = nil
				}
			} else {
				if x.PodSelector == nil {
					x.PodSelector = new(LabelSelector)
				}
				x.PodSelector.CodecDecodeSelf(d)
			}
		case "namespaceSelector":
			if r.TryDecodeAsNil() {
				if x.NamespaceSelector != nil {
					x.NamespaceSelector = nil
				}
			} else {
				if x.NamespaceSelector == nil {
					x.NamespaceSelector = new(LabelSelector)
				}
				x.NamespaceSelector.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1812)
		} // end switch yys1812
	} // end for yyj1812
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1815 int
	var yyb1815 bool
	var yyhl1815 bool = l >= 0
	yyj1815++
	if yyhl1815 {
		yyb1815 = yyj1815 > l
	} else {
		yyb1815 = r.CheckBreak()
	}
	if yyb1815 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodSelector != nil {
			x.PodSelector = nil
		}
	} else {
		if x.PodSelector == nil {
			x.PodSelector = new(LabelSelector)
		}
		x.PodSelector.CodecDecodeSelf(d)
	}
	yyj1815++
	if yyhl1815 {
		yyb1815 = yyj1815 > l
	} else {
		yyb1815 = r.CheckBreak()
	}
	if yyb1815 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NamespaceSelector != nil {
			x.NamespaceSelector = nil
		}
	} else {
		if x.NamespaceSelector == nil {
			x.NamespaceSelector = new(LabelSelector)
		}
		x.NamespaceSelector.CodecDecodeSelf(d)
	}
	for {
		yyj1815++
		if yyhl1815 {
			yyb1815 = yyj1815 > l
		} else {
			yyb1815 = r.CheckBreak()
		}
		if yyb1815 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1815-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1818 := z.EncBinary()
		_ = yym1818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1819 := !z.EncBinary()
			yy2arr1819 := z.EncBasicHandle().StructToArray
			var yyq1819 [4]bool
			_, _, _ = yysep1819, yyq1819, yy2arr1819
			const yyr1819 bool = false
			yyq1819[0] = x.Kind != ""
			yyq1819[1] = x.APIVersion != ""
			yyq1819[2] = true
			var yynn1819 int
			if yyr1819 || yy2arr1819 {
				r.EncodeArrayStart(4)
			} else {
				yynn1819 = 1
				for _, b := range yyq1819 {
					if b {
						yynn1819++
					}
				}
				r.EncodeMapStart(yynn1819)
				yynn1819 = 0
			}
			if yyr1819 || yy2arr1819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1819[0] {
					yym1821 := z.EncBinary()
					_ = yym1821
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1819[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1822 := z.EncBinary()
					_ = yym1822
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1819 || yy2arr1819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1819[1] {
					yym1824 := z.EncBinary()
					_ = yym1824
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1819[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1825 := z.EncBinary()
					_ = yym1825
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1819 || yy2arr1819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1819[2] {
					yy1827 := &x.ListMeta
					yym1828 := z.EncBinary()
					_ = yym1828
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1827) {
					} else {
						z.EncFallback(yy1827)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1819[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1829 := &x.ListMeta
					yym1830 := z.EncBinary()
					_ = yym1830
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1829) {
					} else {
						z.EncFallback(yy1829)
					}
				}
			}
			if yyr1819 || yy2arr1819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1832 := z.EncBinary()
					_ = yym1832
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1833 := z.EncBinary()
					_ = yym1833
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			}
			if yyr1819 || yy2arr1819 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1834 := z.DecBinary()
	_ = yym1834
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1835 := r.ContainerType()
		if yyct1835 == codecSelferValueTypeMap1234 {
			yyl1835 := r.ReadMapStart()
			if yyl1835 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1835, d)
			}
		} else if yyct1835 == codecSelferValueTypeArray1234 {
			yyl1835 := r.ReadArrayStart()
			if yyl1835 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1835, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1836Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1836Slc
	var yyhl1836 bool = l >= 0
	for yyj1836 := 0; ; yyj1836++ {
		if yyhl1836 {
			if yyj1836 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1836Slc = r.DecodeBytes(yys1836Slc, true, true)
		yys1836 := string(yys1836Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1836 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1839 := &x.ListMeta
				yym1840 := z.DecBinary()
				_ = yym1840
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1839) {
				} else {
					z.DecFallback(yyv1839, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1841 := &x.Items
				yym1842 := z.DecBinary()
				_ = yym1842
				if false {
				} else {
					h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1841), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1836)
		} // end switch yys1836
	} // end for yyj1836
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1843 int
	var yyb1843 bool
	var yyhl1843 bool = l >= 0
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1846 := &x.ListMeta
		yym1847 := z.DecBinary()
		_ = yym1847
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1846) {
		} else {
			z.DecFallback(yyv1846, false)
		}
	}
	yyj1843++
	if yyhl1843 {
		yyb1843 = yyj1843 > l
	} else {
		yyb1843 = r.CheckBreak()
	}
	if yyb1843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1848 := &x.Items
		yym1849 := z.DecBinary()
		_ = yym1849
		if false {
		} else {
			h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1848), d)
		}
	}
	for {
		yyj1843++
		if yyhl1843 {
			yyb1843 = yyj1843 > l
		} else {
			yyb1843 = r.CheckBreak()
		}
		if yyb1843 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1843-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1850 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1851 := &yyv1850
		yy1851.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1852 := *v
	yyh1852, yyl1852 := z.DecSliceHelperStart()
	var yyc1852 bool
	if yyl1852 == 0 {
		if yyv1852 == nil {
			yyv1852 = []CustomMetricTarget{}
			yyc1852 = true
		} else if len(yyv1852) != 0 {
			yyv1852 = yyv1852[:0]
			yyc1852 = true
		}
	} else if yyl1852 > 0 {
		var yyrr1852, yyrl1852 int
		var yyrt1852 bool
		if yyl1852 > cap(yyv1852) {

			yyrg1852 := len(yyv1852) > 0
			yyv21852 := yyv1852
			yyrl1852, yyrt1852 = z.DecInferLen(yyl1852, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1852 {
				if yyrl1852 <= cap(yyv1852) {
					yyv1852 = yyv1852[:yyrl1852]
				} else {
					yyv1852 = make([]CustomMetricTarget, yyrl1852)
				}
			} else {
				yyv1852 = make([]CustomMetricTarget, yyrl1852)
			}
			yyc1852 = true
			yyrr1852 = len(yyv1852)
			if yyrg1852 {
				copy(yyv1852, yyv21852)
			}
		} else if yyl1852 != len(yyv1852) {
			yyv1852 = yyv1852[:yyl1852]
			yyc1852 = true
		}
		yyj1852 := 0
		for ; yyj1852 < yyrr1852; yyj1852++ {
			yyh1852.ElemContainerState(yyj1852)
			if r.TryDecodeAsNil() {
				yyv1852[yyj1852] = CustomMetricTarget{}
			} else {
				yyv1853 := &yyv1852[yyj1852]
				yyv1853.CodecDecodeSelf(d)
			}

		}
		if yyrt1852 {
			for ; yyj1852 < yyl1852; yyj1852++ {
				yyv1852 = append(yyv1852, CustomMetricTarget{})
				yyh1852.ElemContainerState(yyj1852)
				if r.TryDecodeAsNil() {
					yyv1852[yyj1852] = CustomMetricTarget{}
				} else {
					yyv1854 := &yyv1852[yyj1852]
					yyv1854.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1852 := 0
		for ; !r.CheckBreak(); yyj1852++ {

			if yyj1852 >= len(yyv1852) {
				yyv1852 = append(yyv1852, CustomMetricTarget{}) // var yyz1852 CustomMetricTarget
				yyc1852 = true
			}
			yyh1852.ElemContainerState(yyj1852)
			if yyj1852 < len(yyv1852) {
				if r.TryDecodeAsNil() {
					yyv1852[yyj1852] = CustomMetricTarget{}
				} else {
					yyv1855 := &yyv1852[yyj1852]
					yyv1855.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1852 < len(yyv1852) {
			yyv1852 = yyv1852[:yyj1852]
			yyc1852 = true
		} else if yyj1852 == 0 && yyv1852 == nil {
			yyv1852 = []CustomMetricTarget{}
			yyc1852 = true
		}
	}
	yyh1852.End()
	if yyc1852 {
		*v = yyv1852
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1856 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1857 := &yyv1856
		yy1857.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1858 := *v
	yyh1858, yyl1858 := z.DecSliceHelperStart()
	var yyc1858 bool
	if yyl1858 == 0 {
		if yyv1858 == nil {
			yyv1858 = []CustomMetricCurrentStatus{}
			yyc1858 = true
		} else if len(yyv1858) != 0 {
			yyv1858 = yyv1858[:0]
			yyc1858 = true
		}
	} else if yyl1858 > 0 {
		var yyrr1858, yyrl1858 int
		var yyrt1858 bool
		if yyl1858 > cap(yyv1858) {

			yyrg1858 := len(yyv1858) > 0
			yyv21858 := yyv1858
			yyrl1858, yyrt1858 = z.DecInferLen(yyl1858, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1858 {
				if yyrl1858 <= cap(yyv1858) {
					yyv1858 = yyv1858[:yyrl1858]
				} else {
					yyv1858 = make([]CustomMetricCurrentStatus, yyrl1858)
				}
			} else {
				yyv1858 = make([]CustomMetricCurrentStatus, yyrl1858)
			}
			yyc1858 = true
			yyrr1858 = len(yyv1858)
			if yyrg1858 {
				copy(yyv1858, yyv21858)
			}
		} else if yyl1858 != len(yyv1858) {
			yyv1858 = yyv1858[:yyl1858]
			yyc1858 = true
		}
		yyj1858 := 0
		for ; yyj1858 < yyrr1858; yyj1858++ {
			yyh1858.ElemContainerState(yyj1858)
			if r.TryDecodeAsNil() {
				yyv1858[yyj1858] = CustomMetricCurrentStatus{}
			} else {
				yyv1859 := &yyv1858[yyj1858]
				yyv1859.CodecDecodeSelf(d)
			}

		}
		if yyrt1858 {
			for ; yyj1858 < yyl1858; yyj1858++ {
				yyv1858 = append(yyv1858, CustomMetricCurrentStatus{})
				yyh1858.ElemContainerState(yyj1858)
				if r.TryDecodeAsNil() {
					yyv1858[yyj1858] = CustomMetricCurrentStatus{}
				} else {
					yyv1860 := &yyv1858[yyj1858]
					yyv1860.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1858 := 0
		for ; !r.CheckBreak(); yyj1858++ {

			if yyj1858 >= len(yyv1858) {
				yyv1858 = append(yyv1858, CustomMetricCurrentStatus{}) // var yyz1858 CustomMetricCurrentStatus
				yyc1858 = true
			}
			yyh1858.ElemContainerState(yyj1858)
			if yyj1858 < len(yyv1858) {
				if r.TryDecodeAsNil() {
					yyv1858[yyj1858] = CustomMetricCurrentStatus{}
				} else {
					yyv1861 := &yyv1858[yyj1858]
					yyv1861.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1858 < len(yyv1858) {
			yyv1858 = yyv1858[:yyj1858]
			yyc1858 = true
		} else if yyj1858 == 0 && yyv1858 == nil {
			yyv1858 = []CustomMetricCurrentStatus{}
			yyc1858 = true
		}
	}
	yyh1858.End()
	if yyc1858 {
		*v = yyv1858
	}
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1862 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1863 := &yyv1862
		yy1863.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1864 := *v
	yyh1864, yyl1864 := z.DecSliceHelperStart()
	var yyc1864 bool
	if yyl1864 == 0 {
		if yyv1864 == nil {
			yyv1864 = []HorizontalPodAutoscaler{}
			yyc1864 = true
		} else if len(yyv1864) != 0 {
			yyv1864 = yyv1864[:0]
			yyc1864 = true
		}
	} else if yyl1864 > 0 {
		var yyrr1864, yyrl1864 int
		var yyrt1864 bool
		if yyl1864 > cap(yyv1864) {

			yyrg1864 := len(yyv1864) > 0
			yyv21864 := yyv1864
			yyrl1864, yyrt1864 = z.DecInferLen(yyl1864, z.DecBasicHandle().MaxInitLen, 376)
			if yyrt1864 {
				if yyrl1864 <= cap(yyv1864) {
					yyv1864 = yyv1864[:yyrl1864]
				} else {
					yyv1864 = make([]HorizontalPodAutoscaler, yyrl1864)
				}
			} else {
				yyv1864 = make([]HorizontalPodAutoscaler, yyrl1864)
			}
			yyc1864 = true
			yyrr1864 = len(yyv1864)
			if yyrg1864 {
				copy(yyv1864, yyv21864)
			}
		} else if yyl1864 != len(yyv1864) {
			yyv1864 = yyv1864[:yyl1864]
			yyc1864 = true
		}
		yyj1864 := 0
		for ; yyj1864 < yyrr1864; yyj1864++ {
			yyh1864.ElemContainerState(yyj1864)
			if r.TryDecodeAsNil() {
				yyv1864[yyj1864] = HorizontalPodAutoscaler{}
			} else {
				yyv1865 := &yyv1864[yyj1864]
				yyv1865.CodecDecodeSelf(d)
			}

		}
		if yyrt1864 {
			for ; yyj1864 < yyl1864; yyj1864++ {
				yyv1864 = append(yyv1864, HorizontalPodAutoscaler{})
				yyh1864.ElemContainerState(yyj1864)
				if r.TryDecodeAsNil() {
					yyv1864[yyj1864] = HorizontalPodAutoscaler{}
				} else {
					yyv1866 := &yyv1864[yyj1864]
					yyv1866.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1864 := 0
		for ; !r.CheckBreak(); yyj1864++ {

			if yyj1864 >= len(yyv1864) {
				yyv1864 = append(yyv1864, HorizontalPodAutoscaler{}) // var yyz1864 HorizontalPodAutoscaler
				yyc1864 = true
			}
			yyh1864.ElemContainerState(yyj1864)
			if yyj1864 < len(yyv1864) {
				if r.TryDecodeAsNil() {
					yyv1864[yyj1864] = HorizontalPodAutoscaler{}
				} else {
					yyv1867 := &yyv1864[yyj1864]
					yyv1867.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1864 < len(yyv1864) {
			yyv1864 = yyv1864[:yyj1864]
			yyc1864 = true
		} else if yyj1864 == 0 && yyv1864 == nil {
			yyv1864 = []HorizontalPodAutoscaler{}
			yyc1864 = true
		}
	}
	yyh1864.End()
	if yyc1864 {
		*v = yyv1864
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1868 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1869 := &yyv1868
		yy1869.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1870 := *v
	yyh1870, yyl1870 := z.DecSliceHelperStart()
	var yyc1870 bool
	if yyl1870 == 0 {
		if yyv1870 == nil {
			yyv1870 = []APIVersion{}
			yyc1870 = true
		} else if len(yyv1870) != 0 {
			yyv1870 = yyv1870[:0]
			yyc1870 = true
		}
	} else if yyl1870 > 0 {
		var yyrr1870, yyrl1870 int
		var yyrt1870 bool
		if yyl1870 > cap(yyv1870) {

			yyrg1870 := len(yyv1870) > 0
			yyv21870 := yyv1870
			yyrl1870, yyrt1870 = z.DecInferLen(yyl1870, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1870 {
				if yyrl1870 <= cap(yyv1870) {
					yyv1870 = yyv1870[:yyrl1870]
				} else {
					yyv1870 = make([]APIVersion, yyrl1870)
				}
			} else {
				yyv1870 = make([]APIVersion, yyrl1870)
			}
			yyc1870 = true
			yyrr1870 = len(yyv1870)
			if yyrg1870 {
				copy(yyv1870, yyv21870)
			}
		} else if yyl1870 != len(yyv1870) {
			yyv1870 = yyv1870[:yyl1870]
			yyc1870 = true
		}
		yyj1870 := 0
		for ; yyj1870 < yyrr1870; yyj1870++ {
			yyh1870.ElemContainerState(yyj1870)
			if r.TryDecodeAsNil() {
				yyv1870[yyj1870] = APIVersion{}
			} else {
				yyv1871 := &yyv1870[yyj1870]
				yyv1871.CodecDecodeSelf(d)
			}

		}
		if yyrt1870 {
			for ; yyj1870 < yyl1870; yyj1870++ {
				yyv1870 = append(yyv1870, APIVersion{})
				yyh1870.ElemContainerState(yyj1870)
				if r.TryDecodeAsNil() {
					yyv1870[yyj1870] = APIVersion{}
				} else {
					yyv1872 := &yyv1870[yyj1870]
					yyv1872.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1870 := 0
		for ; !r.CheckBreak(); yyj1870++ {

			if yyj1870 >= len(yyv1870) {
				yyv1870 = append(yyv1870, APIVersion{}) // var yyz1870 APIVersion
				yyc1870 = true
			}
			yyh1870.ElemContainerState(yyj1870)
			if yyj1870 < len(yyv1870) {
				if r.TryDecodeAsNil() {
					yyv1870[yyj1870] = APIVersion{}
				} else {
					yyv1873 := &yyv1870[yyj1870]
					yyv1873.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1870 < len(yyv1870) {
			yyv1870 = yyv1870[:yyj1870]
			yyc1870 = true
		} else if yyj1870 == 0 && yyv1870 == nil {
			yyv1870 = []APIVersion{}
			yyc1870 = true
		}
	}
	yyh1870.End()
	if yyc1870 {
		*v = yyv1870
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1874 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1875 := &yyv1874
		yy1875.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1876 := *v
	yyh1876, yyl1876 := z.DecSliceHelperStart()
	var yyc1876 bool
	if yyl1876 == 0 {
		if yyv1876 == nil {
			yyv1876 = []ThirdPartyResource{}
			yyc1876 = true
		} else if len(yyv1876) != 0 {
			yyv1876 = yyv1876[:0]
			yyc1876 = true
		}
	} else if yyl1876 > 0 {
		var yyrr1876, yyrl1876 int
		var yyrt1876 bool
		if yyl1876 > cap(yyv1876) {

			yyrg1876 := len(yyv1876) > 0
			yyv21876 := yyv1876
			yyrl1876, yyrt1876 = z.DecInferLen(yyl1876, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt1876 {
				if yyrl1876 <= cap(yyv1876) {
					yyv1876 = yyv1876[:yyrl1876]
				} else {
					yyv1876 = make([]ThirdPartyResource, yyrl1876)
				}
			} else {
				yyv1876 = make([]ThirdPartyResource, yyrl1876)
			}
			yyc1876 = true
			yyrr1876 = len(yyv1876)
			if yyrg1876 {
				copy(yyv1876, yyv21876)
			}
		} else if yyl1876 != len(yyv1876) {
			yyv1876 = yyv1876[:yyl1876]
			yyc1876 = true
		}
		yyj1876 := 0
		for ; yyj1876 < yyrr1876; yyj1876++ {
			yyh1876.ElemContainerState(yyj1876)
			if r.TryDecodeAsNil() {
				yyv1876[yyj1876] = ThirdPartyResource{}
			} else {
				yyv1877 := &yyv1876[yyj1876]
				yyv1877.CodecDecodeSelf(d)
			}

		}
		if yyrt1876 {
			for ; yyj1876 < yyl1876; yyj1876++ {
				yyv1876 = append(yyv1876, ThirdPartyResource{})
				yyh1876.ElemContainerState(yyj1876)
				if r.TryDecodeAsNil() {
					yyv1876[yyj1876] = ThirdPartyResource{}
				} else {
					yyv1878 := &yyv1876[yyj1876]
					yyv1878.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1876 := 0
		for ; !r.CheckBreak(); yyj1876++ {

			if yyj1876 >= len(yyv1876) {
				yyv1876 = append(yyv1876, ThirdPartyResource{}) // var yyz1876 ThirdPartyResource
				yyc1876 = true
			}
			yyh1876.ElemContainerState(yyj1876)
			if yyj1876 < len(yyv1876) {
				if r.TryDecodeAsNil() {
					yyv1876[yyj1876] = ThirdPartyResource{}
				} else {
					yyv1879 := &yyv1876[yyj1876]
					yyv1879.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1876 < len(yyv1876) {
			yyv1876 = yyv1876[:yyj1876]
			yyc1876 = true
		} else if yyj1876 == 0 && yyv1876 == nil {
			yyv1876 = []ThirdPartyResource{}
			yyc1876 = true
		}
	}
	yyh1876.End()
	if yyc1876 {
		*v = yyv1876
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1880 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1881 := &yyv1880
		yy1881.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1882 := *v
	yyh1882, yyl1882 := z.DecSliceHelperStart()
	var yyc1882 bool
	if yyl1882 == 0 {
		if yyv1882 == nil {
			yyv1882 = []Deployment{}
			yyc1882 = true
		} else if len(yyv1882) != 0 {
			yyv1882 = yyv1882[:0]
			yyc1882 = true
		}
	} else if yyl1882 > 0 {
		var yyrr1882, yyrl1882 int
		var yyrt1882 bool
		if yyl1882 > cap(yyv1882) {

			yyrg1882 := len(yyv1882) > 0
			yyv21882 := yyv1882
			yyrl1882, yyrt1882 = z.DecInferLen(yyl1882, z.DecBasicHandle().MaxInitLen, 824)
			if yyrt1882 {
				if yyrl1882 <= cap(yyv1882) {
					yyv1882 = yyv1882[:yyrl1882]
				} else {
					yyv1882 = make([]Deployment, yyrl1882)
				}
			} else {
				yyv1882 = make([]Deployment, yyrl1882)
			}
			yyc1882 = true
			yyrr1882 = len(yyv1882)
			if yyrg1882 {
				copy(yyv1882, yyv21882)
			}
		} else if yyl1882 != len(yyv1882) {
			yyv1882 = yyv1882[:yyl1882]
			yyc1882 = true
		}
		yyj1882 := 0
		for ; yyj1882 < yyrr1882; yyj1882++ {
			yyh1882.ElemContainerState(yyj1882)
			if r.TryDecodeAsNil() {
				yyv1882[yyj1882] = Deployment{}
			} else {
				yyv1883 := &yyv1882[yyj1882]
				yyv1883.CodecDecodeSelf(d)
			}

		}
		if yyrt1882 {
			for ; yyj1882 < yyl1882; yyj1882++ {
				yyv1882 = append(yyv1882, Deployment{})
				yyh1882.ElemContainerState(yyj1882)
				if r.TryDecodeAsNil() {
					yyv1882[yyj1882] = Deployment{}
				} else {
					yyv1884 := &yyv1882[yyj1882]
					yyv1884.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1882 := 0
		for ; !r.CheckBreak(); yyj1882++ {

			if yyj1882 >= len(yyv1882) {
				yyv1882 = append(yyv1882, Deployment{}) // var yyz1882 Deployment
				yyc1882 = true
			}
			yyh1882.ElemContainerState(yyj1882)
			if yyj1882 < len(yyv1882) {
				if r.TryDecodeAsNil() {
					yyv1882[yyj1882] = Deployment{}
				} else {
					yyv1885 := &yyv1882[yyj1882]
					yyv1885.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1882 < len(yyv1882) {
			yyv1882 = yyv1882[:yyj1882]
			yyc1882 = true
		} else if yyj1882 == 0 && yyv1882 == nil {
			yyv1882 = []Deployment{}
			yyc1882 = true
		}
	}
	yyh1882.End()
	if yyc1882 {
		*v = yyv1882
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1886 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1887 := &yyv1886
		yy1887.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1888 := *v
	yyh1888, yyl1888 := z.DecSliceHelperStart()
	var yyc1888 bool
	if yyl1888 == 0 {
		if yyv1888 == nil {
			yyv1888 = []DaemonSet{}
			yyc1888 = true
		} else if len(yyv1888) != 0 {
			yyv1888 = yyv1888[:0]
			yyc1888 = true
		}
	} else if yyl1888 > 0 {
		var yyrr1888, yyrl1888 int
		var yyrt1888 bool
		if yyl1888 > cap(yyv1888) {

			yyrg1888 := len(yyv1888) > 0
			yyv21888 := yyv1888
			yyrl1888, yyrt1888 = z.DecInferLen(yyl1888, z.DecBasicHandle().MaxInitLen, 752)
			if yyrt1888 {
				if yyrl1888 <= cap(yyv1888) {
					yyv1888 = yyv1888[:yyrl1888]
				} else {
					yyv1888 = make([]DaemonSet, yyrl1888)
				}
			} else {
				yyv1888 = make([]DaemonSet, yyrl1888)
			}
			yyc1888 = true
			yyrr1888 = len(yyv1888)
			if yyrg1888 {
				copy(yyv1888, yyv21888)
			}
		} else if yyl1888 != len(yyv1888) {
			yyv1888 = yyv1888[:yyl1888]
			yyc1888 = true
		}
		yyj1888 := 0
		for ; yyj1888 < yyrr1888; yyj1888++ {
			yyh1888.ElemContainerState(yyj1888)
			if r.TryDecodeAsNil() {
				yyv1888[yyj1888] = DaemonSet{}
			} else {
				yyv1889 := &yyv1888[yyj1888]
				yyv1889.CodecDecodeSelf(d)
			}

		}
		if yyrt1888 {
			for ; yyj1888 < yyl1888; yyj1888++ {
				yyv1888 = append(yyv1888, DaemonSet{})
				yyh1888.ElemContainerState(yyj1888)
				if r.TryDecodeAsNil() {
					yyv1888[yyj1888] = DaemonSet{}
				} else {
					yyv1890 := &yyv1888[yyj1888]
					yyv1890.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1888 := 0
		for ; !r.CheckBreak(); yyj1888++ {

			if yyj1888 >= len(yyv1888) {
				yyv1888 = append(yyv1888, DaemonSet{}) // var yyz1888 DaemonSet
				yyc1888 = true
			}
			yyh1888.ElemContainerState(yyj1888)
			if yyj1888 < len(yyv1888) {
				if r.TryDecodeAsNil() {
					yyv1888[yyj1888] = DaemonSet{}
				} else {
					yyv1891 := &yyv1888[yyj1888]
					yyv1891.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1888 < len(yyv1888) {
			yyv1888 = yyv1888[:yyj1888]
			yyc1888 = true
		} else if yyj1888 == 0 && yyv1888 == nil {
			yyv1888 = []DaemonSet{}
			yyc1888 = true
		}
	}
	yyh1888.End()
	if yyc1888 {
		*v = yyv1888
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1892 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1893 := &yyv1892
		yy1893.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1894 := *v
	yyh1894, yyl1894 := z.DecSliceHelperStart()
	var yyc1894 bool
	if yyl1894 == 0 {
		if yyv1894 == nil {
			yyv1894 = []ThirdPartyResourceData{}
			yyc1894 = true
		} else if len(yyv1894) != 0 {
			yyv1894 = yyv1894[:0]
			yyc1894 = true
		}
	} else if yyl1894 > 0 {
		var yyrr1894, yyrl1894 int
		var yyrt1894 bool
		if yyl1894 > cap(yyv1894) {

			yyrg1894 := len(yyv1894) > 0
			yyv21894 := yyv1894
			yyrl1894, yyrt1894 = z.DecInferLen(yyl1894, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt1894 {
				if yyrl1894 <= cap(yyv1894) {
					yyv1894 = yyv1894[:yyrl1894]
				} else {
					yyv1894 = make([]ThirdPartyResourceData, yyrl1894)
				}
			} else {
				yyv1894 = make([]ThirdPartyResourceData, yyrl1894)
			}
			yyc1894 = true
			yyrr1894 = len(yyv1894)
			if yyrg1894 {
				copy(yyv1894, yyv21894)
			}
		} else if yyl1894 != len(yyv1894) {
			yyv1894 = yyv1894[:yyl1894]
			yyc1894 = true
		}
		yyj1894 := 0
		for ; yyj1894 < yyrr1894; yyj1894++ {
			yyh1894.ElemContainerState(yyj1894)
			if r.TryDecodeAsNil() {
				yyv1894[yyj1894] = ThirdPartyResourceData{}
			} else {
				yyv1895 := &yyv1894[yyj1894]
				yyv1895.CodecDecodeSelf(d)
			}

		}
		if yyrt1894 {
			for ; yyj1894 < yyl1894; yyj1894++ {
				yyv1894 = append(yyv1894, ThirdPartyResourceData{})
				yyh1894.ElemContainerState(yyj1894)
				if r.TryDecodeAsNil() {
					yyv1894[yyj1894] = ThirdPartyResourceData{}
				} else {
					yyv1896 := &yyv1894[yyj1894]
					yyv1896.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1894 := 0
		for ; !r.CheckBreak(); yyj1894++ {

			if yyj1894 >= len(yyv1894) {
				yyv1894 = append(yyv1894, ThirdPartyResourceData{}) // var yyz1894 ThirdPartyResourceData
				yyc1894 = true
			}
			yyh1894.ElemContainerState(yyj1894)
			if yyj1894 < len(yyv1894) {
				if r.TryDecodeAsNil() {
					yyv1894[yyj1894] = ThirdPartyResourceData{}
				} else {
					yyv1897 := &yyv1894[yyj1894]
					yyv1897.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1894 < len(yyv1894) {
			yyv1894 = yyv1894[:yyj1894]
			yyc1894 = true
		} else if yyj1894 == 0 && yyv1894 == nil {
			yyv1894 = []ThirdPartyResourceData{}
			yyc1894 = true
		}
	}
	yyh1894.End()
	if yyc1894 {
		*v = yyv1894
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1898 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1899 := &yyv1898
		yy1899.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1900 := *v
	yyh1900, yyl1900 := z.DecSliceHelperStart()
	var yyc1900 bool
	if yyl1900 == 0 {
		if yyv1900 == nil {
			yyv1900 = []Job{}
			yyc1900 = true
		} else if len(yyv1900) != 0 {
			yyv1900 = yyv1900[:0]
			yyc1900 = true
		}
	} else if yyl1900 > 0 {
		var yyrr1900, yyrl1900 int
		var yyrt1900 bool
		if yyl1900 > cap(yyv1900) {

			yyrg1900 := len(yyv1900) > 0
			yyv21900 := yyv1900
			yyrl1900, yyrt1900 = z.DecInferLen(yyl1900, z.DecBasicHandle().MaxInitLen, 824)
			if yyrt1900 {
				if yyrl1900 <= cap(yyv1900) {
					yyv1900 = yyv1900[:yyrl1900]
				} else {
					yyv1900 = make([]Job, yyrl1900)
				}
			} else {
				yyv1900 = make([]Job, yyrl1900)
			}
			yyc1900 = true
			yyrr1900 = len(yyv1900)
			if yyrg1900 {
				copy(yyv1900, yyv21900)
			}
		} else if yyl1900 != len(yyv1900) {
			yyv1900 = yyv1900[:yyl1900]
			yyc1900 = true
		}
		yyj1900 := 0
		for ; yyj1900 < yyrr1900; yyj1900++ {
			yyh1900.ElemContainerState(yyj1900)
			if r.TryDecodeAsNil() {
				yyv1900[yyj1900] = Job{}
			} else {
				yyv1901 := &yyv1900[yyj1900]
				yyv1901.CodecDecodeSelf(d)
			}

		}
		if yyrt1900 {
			for ; yyj1900 < yyl1900; yyj1900++ {
				yyv1900 = append(yyv1900, Job{})
				yyh1900.ElemContainerState(yyj1900)
				if r.TryDecodeAsNil() {
					yyv1900[yyj1900] = Job{}
				} else {
					yyv1902 := &yyv1900[yyj1900]
					yyv1902.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1900 := 0
		for ; !r.CheckBreak(); yyj1900++ {

			if yyj1900 >= len(yyv1900) {
				yyv1900 = append(yyv1900, Job{}) // var yyz1900 Job
				yyc1900 = true
			}
			yyh1900.ElemContainerState(yyj1900)
			if yyj1900 < len(yyv1900) {
				if r.TryDecodeAsNil() {
					yyv1900[yyj1900] = Job{}
				} else {
					yyv1903 := &yyv1900[yyj1900]
					yyv1903.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1900 < len(yyv1900) {
			yyv1900 = yyv1900[:yyj1900]
			yyc1900 = true
		} else if yyj1900 == 0 && yyv1900 == nil {
			yyv1900 = []Job{}
			yyc1900 = true
		}
	}
	yyh1900.End()
	if yyc1900 {
		*v = yyv1900
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1904 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1905 := &yyv1904
		yy1905.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1906 := *v
	yyh1906, yyl1906 := z.DecSliceHelperStart()
	var yyc1906 bool
	if yyl1906 == 0 {
		if yyv1906 == nil {
			yyv1906 = []JobCondition{}
			yyc1906 = true
		} else if len(yyv1906) != 0 {
			yyv1906 = yyv1906[:0]
			yyc1906 = true
		}
	} else if yyl1906 > 0 {
		var yyrr1906, yyrl1906 int
		var yyrt1906 bool
		if yyl1906 > cap(yyv1906) {

			yyrg1906 := len(yyv1906) > 0
			yyv21906 := yyv1906
			yyrl1906, yyrt1906 = z.DecInferLen(yyl1906, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1906 {
				if yyrl1906 <= cap(yyv1906) {
					yyv1906 = yyv1906[:yyrl1906]
				} else {
					yyv1906 = make([]JobCondition, yyrl1906)
				}
			} else {
				yyv1906 = make([]JobCondition, yyrl1906)
			}
			yyc1906 = true
			yyrr1906 = len(yyv1906)
			if yyrg1906 {
				copy(yyv1906, yyv21906)
			}
		} else if yyl1906 != len(yyv1906) {
			yyv1906 = yyv1906[:yyl1906]
			yyc1906 = true
		}
		yyj1906 := 0
		for ; yyj1906 < yyrr1906; yyj1906++ {
			yyh1906.ElemContainerState(yyj1906)
			if r.TryDecodeAsNil() {
				yyv1906[yyj1906] = JobCondition{}
			} else {
				yyv1907 := &yyv1906[yyj1906]
				yyv1907.CodecDecodeSelf(d)
			}

		}
		if yyrt1906 {
			for ; yyj1906 < yyl1906; yyj1906++ {
				yyv1906 = append(yyv1906, JobCondition{})
				yyh1906.ElemContainerState(yyj1906)
				if r.TryDecodeAsNil() {
					yyv1906[yyj1906] = JobCondition{}
				} else {
					yyv1908 := &yyv1906[yyj1906]
					yyv1908.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1906 := 0
		for ; !r.CheckBreak(); yyj1906++ {

			if yyj1906 >= len(yyv1906) {
				yyv1906 = append(yyv1906, JobCondition{}) // var yyz1906 JobCondition
				yyc1906 = true
			}
			yyh1906.ElemContainerState(yyj1906)
			if yyj1906 < len(yyv1906) {
				if r.TryDecodeAsNil() {
					yyv1906[yyj1906] = JobCondition{}
				} else {
					yyv1909 := &yyv1906[yyj1906]
					yyv1909.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1906 < len(yyv1906) {
			yyv1906 = yyv1906[:yyj1906]
			yyc1906 = true
		} else if yyj1906 == 0 && yyv1906 == nil {
			yyv1906 = []JobCondition{}
			yyc1906 = true
		}
	}
	yyh1906.End()
	if yyc1906 {
		*v = yyv1906
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1910 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1911 := &yyv1910
		yy1911.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1912 := *v
	yyh1912, yyl1912 := z.DecSliceHelperStart()
	var yyc1912 bool
	if yyl1912 == 0 {
		if yyv1912 == nil {
			yyv1912 = []Ingress{}
			yyc1912 = true
		} else if len(yyv1912) != 0 {
			yyv1912 = yyv1912[:0]
			yyc1912 = true
		}
	} else if yyl1912 > 0 {
		var yyrr1912, yyrl1912 int
		var yyrt1912 bool
		if yyl1912 > cap(yyv1912) {

			yyrg1912 := len(yyv1912) > 0
			yyv21912 := yyv1912
			yyrl1912, yyrt1912 = z.DecInferLen(yyl1912, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt1912 {
				if yyrl1912 <= cap(yyv1912) {
					yyv1912 = yyv1912[:yyrl1912]
				} else {
					yyv1912 = make([]Ingress, yyrl1912)
				}
			} else {
				yyv1912 = make([]Ingress, yyrl1912)
			}
			yyc1912 = true
			yyrr1912 = len(yyv1912)
			if yyrg1912 {
				copy(yyv1912, yyv21912)
			}
		} else if yyl1912 != len(yyv1912) {
			yyv1912 = yyv1912[:yyl1912]
			yyc1912 = true
		}
		yyj1912 := 0
		for ; yyj1912 < yyrr1912; yyj1912++ {
			yyh1912.ElemContainerState(yyj1912)
			if r.TryDecodeAsNil() {
				yyv1912[yyj1912] = Ingress{}
			} else {
				yyv1913 := &yyv1912[yyj1912]
				yyv1913.CodecDecodeSelf(d)
			}

		}
		if yyrt1912 {
			for ; yyj1912 < yyl1912; yyj1912++ {
				yyv1912 = append(yyv1912, Ingress{})
				yyh1912.ElemContainerState(yyj1912)
				if r.TryDecodeAsNil() {
					yyv1912[yyj1912] = Ingress{}
				} else {
					yyv1914 := &yyv1912[yyj1912]
					yyv1914.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1912 := 0
		for ; !r.CheckBreak(); yyj1912++ {

			if yyj1912 >= len(yyv1912) {
				yyv1912 = append(yyv1912, Ingress{}) // var yyz1912 Ingress
				yyc1912 = true
			}
			yyh1912.ElemContainerState(yyj1912)
			if yyj1912 < len(yyv1912) {
				if r.TryDecodeAsNil() {
					yyv1912[yyj1912] = Ingress{}
				} else {
					yyv1915 := &yyv1912[yyj1912]
					yyv1915.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1912 < len(yyv1912) {
			yyv1912 = yyv1912[:yyj1912]
			yyc1912 = true
		} else if yyj1912 == 0 && yyv1912 == nil {
			yyv1912 = []Ingress{}
			yyc1912 = true
		}
	}
	yyh1912.End()
	if yyc1912 {
		*v = yyv1912
	}
}

func (x codecSelfer1234) encSliceIngressTLS(v []IngressTLS, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1916 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1917 := &yyv1916
		yy1917.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressTLS(v *[]IngressTLS, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1918 := *v
	yyh1918, yyl1918 := z.DecSliceHelperStart()
	var yyc1918 bool
	if yyl1918 == 0 {
		if yyv1918 == nil {
			yyv1918 = []IngressTLS{}
			yyc1918 = true
		} else if len(yyv1918) != 0 {
			yyv1918 = yyv1918[:0]
			yyc1918 = true
		}
	} else if yyl1918 > 0 {
		var yyrr1918, yyrl1918 int
		var yyrt1918 bool
		if yyl1918 > cap(yyv1918) {

			yyrg1918 := len(yyv1918) > 0
			yyv21918 := yyv1918
			yyrl1918, yyrt1918 = z.DecInferLen(yyl1918, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1918 {
				if yyrl1918 <= cap(yyv1918) {
					yyv1918 = yyv1918[:yyrl1918]
				} else {
					yyv1918 = make([]IngressTLS, yyrl1918)
				}
			} else {
				yyv1918 = make([]IngressTLS, yyrl1918)
			}
			yyc1918 = true
			yyrr1918 = len(yyv1918)
			if yyrg1918 {
				copy(yyv1918, yyv21918)
			}
		} else if yyl1918 != len(yyv1918) {
			yyv1918 = yyv1918[:yyl1918]
			yyc1918 = true
		}
		yyj1918 := 0
		for ; yyj1918 < yyrr1918; yyj1918++ {
			yyh1918.ElemContainerState(yyj1918)
			if r.TryDecodeAsNil() {
				yyv1918[yyj1918] = IngressTLS{}
			} else {
				yyv1919 := &yyv1918[yyj1918]
				yyv1919.CodecDecodeSelf(d)
			}

		}
		if yyrt1918 {
			for ; yyj1918 < yyl1918; yyj1918++ {
				yyv1918 = append(yyv1918, IngressTLS{})
				yyh1918.ElemContainerState(yyj1918)
				if r.TryDecodeAsNil() {
					yyv1918[yyj1918] = IngressTLS{}
				} else {
					yyv1920 := &yyv1918[yyj1918]
					yyv1920.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1918 := 0
		for ; !r.CheckBreak(); yyj1918++ {

			if yyj1918 >= len(yyv1918) {
				yyv1918 = append(yyv1918, IngressTLS{}) // var yyz1918 IngressTLS
				yyc1918 = true
			}
			yyh1918.ElemContainerState(yyj1918)
			if yyj1918 < len(yyv1918) {
				if r.TryDecodeAsNil() {
					yyv1918[yyj1918] = IngressTLS{}
				} else {
					yyv1921 := &yyv1918[yyj1918]
					yyv1921.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1918 < len(yyv1918) {
			yyv1918 = yyv1918[:yyj1918]
			yyc1918 = true
		} else if yyj1918 == 0 && yyv1918 == nil {
			yyv1918 = []IngressTLS{}
			yyc1918 = true
		}
	}
	yyh1918.End()
	if yyc1918 {
		*v = yyv1918
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1922 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1923 := &yyv1922
		yy1923.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1924 := *v
	yyh1924, yyl1924 := z.DecSliceHelperStart()
	var yyc1924 bool
	if yyl1924 == 0 {
		if yyv1924 == nil {
			yyv1924 = []IngressRule{}
			yyc1924 = true
		} else if len(yyv1924) != 0 {
			yyv1924 = yyv1924[:0]
			yyc1924 = true
		}
	} else if yyl1924 > 0 {
		var yyrr1924, yyrl1924 int
		var yyrt1924 bool
		if yyl1924 > cap(yyv1924) {

			yyrg1924 := len(yyv1924) > 0
			yyv21924 := yyv1924
			yyrl1924, yyrt1924 = z.DecInferLen(yyl1924, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1924 {
				if yyrl1924 <= cap(yyv1924) {
					yyv1924 = yyv1924[:yyrl1924]
				} else {
					yyv1924 = make([]IngressRule, yyrl1924)
				}
			} else {
				yyv1924 = make([]IngressRule, yyrl1924)
			}
			yyc1924 = true
			yyrr1924 = len(yyv1924)
			if yyrg1924 {
				copy(yyv1924, yyv21924)
			}
		} else if yyl1924 != len(yyv1924) {
			yyv1924 = yyv1924[:yyl1924]
			yyc1924 = true
		}
		yyj1924 := 0
		for ; yyj1924 < yyrr1924; yyj1924++ {
			yyh1924.ElemContainerState(yyj1924)
			if r.TryDecodeAsNil() {
				yyv1924[yyj1924] = IngressRule{}
			} else {
				yyv1925 := &yyv1924[yyj1924]
				yyv1925.CodecDecodeSelf(d)
			}

		}
		if yyrt1924 {
			for ; yyj1924 < yyl1924; yyj1924++ {
				yyv1924 = append(yyv1924, IngressRule{})
				yyh1924.ElemContainerState(yyj1924)
				if r.TryDecodeAsNil() {
					yyv1924[yyj1924] = IngressRule{}
				} else {
					yyv1926 := &yyv1924[yyj1924]
					yyv1926.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1924 := 0
		for ; !r.CheckBreak(); yyj1924++ {

			if yyj1924 >= len(yyv1924) {
				yyv1924 = append(yyv1924, IngressRule{}) // var yyz1924 IngressRule
				yyc1924 = true
			}
			yyh1924.ElemContainerState(yyj1924)
			if yyj1924 < len(yyv1924) {
				if r.TryDecodeAsNil() {
					yyv1924[yyj1924] = IngressRule{}
				} else {
					yyv1927 := &yyv1924[yyj1924]
					yyv1927.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1924 < len(yyv1924) {
			yyv1924 = yyv1924[:yyj1924]
			yyc1924 = true
		} else if yyj1924 == 0 && yyv1924 == nil {
			yyv1924 = []IngressRule{}
			yyc1924 = true
		}
	}
	yyh1924.End()
	if yyc1924 {
		*v = yyv1924
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1928 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1929 := &yyv1928
		yy1929.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1930 := *v
	yyh1930, yyl1930 := z.DecSliceHelperStart()
	var yyc1930 bool
	if yyl1930 == 0 {
		if yyv1930 == nil {
			yyv1930 = []HTTPIngressPath{}
			yyc1930 = true
		} else if len(yyv1930) != 0 {
			yyv1930 = yyv1930[:0]
			yyc1930 = true
		}
	} else if yyl1930 > 0 {
		var yyrr1930, yyrl1930 int
		var yyrt1930 bool
		if yyl1930 > cap(yyv1930) {

			yyrg1930 := len(yyv1930) > 0
			yyv21930 := yyv1930
			yyrl1930, yyrt1930 = z.DecInferLen(yyl1930, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1930 {
				if yyrl1930 <= cap(yyv1930) {
					yyv1930 = yyv1930[:yyrl1930]
				} else {
					yyv1930 = make([]HTTPIngressPath, yyrl1930)
				}
			} else {
				yyv1930 = make([]HTTPIngressPath, yyrl1930)
			}
			yyc1930 = true
			yyrr1930 = len(yyv1930)
			if yyrg1930 {
				copy(yyv1930, yyv21930)
			}
		} else if yyl1930 != len(yyv1930) {
			yyv1930 = yyv1930[:yyl1930]
			yyc1930 = true
		}
		yyj1930 := 0
		for ; yyj1930 < yyrr1930; yyj1930++ {
			yyh1930.ElemContainerState(yyj1930)
			if r.TryDecodeAsNil() {
				yyv1930[yyj1930] = HTTPIngressPath{}
			} else {
				yyv1931 := &yyv1930[yyj1930]
				yyv1931.CodecDecodeSelf(d)
			}

		}
		if yyrt1930 {
			for ; yyj1930 < yyl1930; yyj1930++ {
				yyv1930 = append(yyv1930, HTTPIngressPath{})
				yyh1930.ElemContainerState(yyj1930)
				if r.TryDecodeAsNil() {
					yyv1930[yyj1930] = HTTPIngressPath{}
				} else {
					yyv1932 := &yyv1930[yyj1930]
					yyv1932.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1930 := 0
		for ; !r.CheckBreak(); yyj1930++ {

			if yyj1930 >= len(yyv1930) {
				yyv1930 = append(yyv1930, HTTPIngressPath{}) // var yyz1930 HTTPIngressPath
				yyc1930 = true
			}
			yyh1930.ElemContainerState(yyj1930)
			if yyj1930 < len(yyv1930) {
				if r.TryDecodeAsNil() {
					yyv1930[yyj1930] = HTTPIngressPath{}
				} else {
					yyv1933 := &yyv1930[yyj1930]
					yyv1933.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1930 < len(yyv1930) {
			yyv1930 = yyv1930[:yyj1930]
			yyc1930 = true
		} else if yyj1930 == 0 && yyv1930 == nil {
			yyv1930 = []HTTPIngressPath{}
			yyc1930 = true
		}
	}
	yyh1930.End()
	if yyc1930 {
		*v = yyv1930
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1934 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1935 := &yyv1934
		yy1935.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1936 := *v
	yyh1936, yyl1936 := z.DecSliceHelperStart()
	var yyc1936 bool
	if yyl1936 == 0 {
		if yyv1936 == nil {
			yyv1936 = []LabelSelectorRequirement{}
			yyc1936 = true
		} else if len(yyv1936) != 0 {
			yyv1936 = yyv1936[:0]
			yyc1936 = true
		}
	} else if yyl1936 > 0 {
		var yyrr1936, yyrl1936 int
		var yyrt1936 bool
		if yyl1936 > cap(yyv1936) {

			yyrg1936 := len(yyv1936) > 0
			yyv21936 := yyv1936
			yyrl1936, yyrt1936 = z.DecInferLen(yyl1936, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt1936 {
				if yyrl1936 <= cap(yyv1936) {
					yyv1936 = yyv1936[:yyrl1936]
				} else {
					yyv1936 = make([]LabelSelectorRequirement, yyrl1936)
				}
			} else {
				yyv1936 = make([]LabelSelectorRequirement, yyrl1936)
			}
			yyc1936 = true
			yyrr1936 = len(yyv1936)
			if yyrg1936 {
				copy(yyv1936, yyv21936)
			}
		} else if yyl1936 != len(yyv1936) {
			yyv1936 = yyv1936[:yyl1936]
			yyc1936 = true
		}
		yyj1936 := 0
		for ; yyj1936 < yyrr1936; yyj1936++ {
			yyh1936.ElemContainerState(yyj1936)
			if r.TryDecodeAsNil() {
				yyv1936[yyj1936] = LabelSelectorRequirement{}
			} else {
				yyv1937 := &yyv1936[yyj1936]
				yyv1937.CodecDecodeSelf(d)
			}

		}
		if yyrt1936 {
			for ; yyj1936 < yyl1936; yyj1936++ {
				yyv1936 = append(yyv1936, LabelSelectorRequirement{})
				yyh1936.ElemContainerState(yyj1936)
				if r.TryDecodeAsNil() {
					yyv1936[yyj1936] = LabelSelectorRequirement{}
				} else {
					yyv1938 := &yyv1936[yyj1936]
					yyv1938.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1936 := 0
		for ; !r.CheckBreak(); yyj1936++ {

			if yyj1936 >= len(yyv1936) {
				yyv1936 = append(yyv1936, LabelSelectorRequirement{}) // var yyz1936 LabelSelectorRequirement
				yyc1936 = true
			}
			yyh1936.ElemContainerState(yyj1936)
			if yyj1936 < len(yyv1936) {
				if r.TryDecodeAsNil() {
					yyv1936[yyj1936] = LabelSelectorRequirement{}
				} else {
					yyv1939 := &yyv1936[yyj1936]
					yyv1939.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1936 < len(yyv1936) {
			yyv1936 = yyv1936[:yyj1936]
			yyc1936 = true
		} else if yyj1936 == 0 && yyv1936 == nil {
			yyv1936 = []LabelSelectorRequirement{}
			yyc1936 = true
		}
	}
	yyh1936.End()
	if yyc1936 {
		*v = yyv1936
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1940 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1941 := &yyv1940
		yy1941.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1942 := *v
	yyh1942, yyl1942 := z.DecSliceHelperStart()
	var yyc1942 bool
	if yyl1942 == 0 {
		if yyv1942 == nil {
			yyv1942 = []ReplicaSet{}
			yyc1942 = true
		} else if len(yyv1942) != 0 {
			yyv1942 = yyv1942[:0]
			yyc1942 = true
		}
	} else if yyl1942 > 0 {
		var yyrr1942, yyrl1942 int
		var yyrt1942 bool
		if yyl1942 > cap(yyv1942) {

			yyrg1942 := len(yyv1942) > 0
			yyv21942 := yyv1942
			yyrl1942, yyrt1942 = z.DecInferLen(yyl1942, z.DecBasicHandle().MaxInitLen, 800)
			if yyrt1942 {
				if yyrl1942 <= cap(yyv1942) {
					yyv1942 = yyv1942[:yyrl1942]
				} else {
					yyv1942 = make([]ReplicaSet, yyrl1942)
				}
			} else {
				yyv1942 = make([]ReplicaSet, yyrl1942)
			}
			yyc1942 = true
			yyrr1942 = len(yyv1942)
			if yyrg1942 {
				copy(yyv1942, yyv21942)
			}
		} else if yyl1942 != len(yyv1942) {
			yyv1942 = yyv1942[:yyl1942]
			yyc1942 = true
		}
		yyj1942 := 0
		for ; yyj1942 < yyrr1942; yyj1942++ {
			yyh1942.ElemContainerState(yyj1942)
			if r.TryDecodeAsNil() {
				yyv1942[yyj1942] = ReplicaSet{}
			} else {
				yyv1943 := &yyv1942[yyj1942]
				yyv1943.CodecDecodeSelf(d)
			}

		}
		if yyrt1942 {
			for ; yyj1942 < yyl1942; yyj1942++ {
				yyv1942 = append(yyv1942, ReplicaSet{})
				yyh1942.ElemContainerState(yyj1942)
				if r.TryDecodeAsNil() {
					yyv1942[yyj1942] = ReplicaSet{}
				} else {
					yyv1944 := &yyv1942[yyj1942]
					yyv1944.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1942 := 0
		for ; !r.CheckBreak(); yyj1942++ {

			if yyj1942 >= len(yyv1942) {
				yyv1942 = append(yyv1942, ReplicaSet{}) // var yyz1942 ReplicaSet
				yyc1942 = true
			}
			yyh1942.ElemContainerState(yyj1942)
			if yyj1942 < len(yyv1942) {
				if r.TryDecodeAsNil() {
					yyv1942[yyj1942] = ReplicaSet{}
				} else {
					yyv1945 := &yyv1942[yyj1942]
					yyv1945.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1942 < len(yyv1942) {
			yyv1942 = yyv1942[:yyj1942]
			yyc1942 = true
		} else if yyj1942 == 0 && yyv1942 == nil {
			yyv1942 = []ReplicaSet{}
			yyc1942 = true
		}
	}
	yyh1942.End()
	if yyc1942 {
		*v = yyv1942
	}
}

func (x codecSelfer1234) encSliceReplicaSetCondition(v []ReplicaSetCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1946 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1947 := &yyv1946
		yy1947.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSetCondition(v *[]ReplicaSetCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1948 := *v
	yyh1948, yyl1948 := z.DecSliceHelperStart()
	var yyc1948 bool
	if yyl1948 == 0 {
		if yyv1948 == nil {
			yyv1948 = []ReplicaSetCondition{}
			yyc1948 = true
		} else if len(yyv1948) != 0 {
			yyv1948 = yyv1948[:0]
			yyc1948 = true
		}
	} else if yyl1948 > 0 {
		var yyrr1948, yyrl1948 int
		var yyrt1948 bool
		if yyl1948 > cap(yyv1948) {

			yyrg1948 := len(yyv1948) > 0
			yyv21948 := yyv1948
			yyrl1948, yyrt1948 = z.DecInferLen(yyl1948, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1948 {
				if yyrl1948 <= cap(yyv1948) {
					yyv1948 = yyv1948[:yyrl1948]
				} else {
					yyv1948 = make([]ReplicaSetCondition, yyrl1948)
				}
			} else {
				yyv1948 = make([]ReplicaSetCondition, yyrl1948)
			}
			yyc1948 = true
			yyrr1948 = len(yyv1948)
			if yyrg1948 {
				copy(yyv1948, yyv21948)
			}
		} else if yyl1948 != len(yyv1948) {
			yyv1948 = yyv1948[:yyl1948]
			yyc1948 = true
		}
		yyj1948 := 0
		for ; yyj1948 < yyrr1948; yyj1948++ {
			yyh1948.ElemContainerState(yyj1948)
			if r.TryDecodeAsNil() {
				yyv1948[yyj1948] = ReplicaSetCondition{}
			} else {
				yyv1949 := &yyv1948[yyj1948]
				yyv1949.CodecDecodeSelf(d)
			}

		}
		if yyrt1948 {
			for ; yyj1948 < yyl1948; yyj1948++ {
				yyv1948 = append(yyv1948, ReplicaSetCondition{})
				yyh1948.ElemContainerState(yyj1948)
				if r.TryDecodeAsNil() {
					yyv1948[yyj1948] = ReplicaSetCondition{}
				} else {
					yyv1950 := &yyv1948[yyj1948]
					yyv1950.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1948 := 0
		for ; !r.CheckBreak(); yyj1948++ {

			if yyj1948 >= len(yyv1948) {
				yyv1948 = append(yyv1948, ReplicaSetCondition{}) // var yyz1948 ReplicaSetCondition
				yyc1948 = true
			}
			yyh1948.ElemContainerState(yyj1948)
			if yyj1948 < len(yyv1948) {
				if r.TryDecodeAsNil() {
					yyv1948[yyj1948] = ReplicaSetCondition{}
				} else {
					yyv1951 := &yyv1948[yyj1948]
					yyv1951.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1948 < len(yyv1948) {
			yyv1948 = yyv1948[:yyj1948]
			yyc1948 = true
		} else if yyj1948 == 0 && yyv1948 == nil {
			yyv1948 = []ReplicaSetCondition{}
			yyc1948 = true
		}
	}
	yyh1948.End()
	if yyc1948 {
		*v = yyv1948
	}
}

func (x codecSelfer1234) encSlicev1_Capability(v []pkg2_v1.Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1952 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yym1953 := z.EncBinary()
		_ = yym1953
		if false {
		} else if z.HasExtensions() && z.EncExt(yyv1952) {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyv1952))
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicev1_Capability(v *[]pkg2_v1.Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1954 := *v
	yyh1954, yyl1954 := z.DecSliceHelperStart()
	var yyc1954 bool
	if yyl1954 == 0 {
		if yyv1954 == nil {
			yyv1954 = []pkg2_v1.Capability{}
			yyc1954 = true
		} else if len(yyv1954) != 0 {
			yyv1954 = yyv1954[:0]
			yyc1954 = true
		}
	} else if yyl1954 > 0 {
		var yyrr1954, yyrl1954 int
		var yyrt1954 bool
		if yyl1954 > cap(yyv1954) {

			yyrl1954, yyrt1954 = z.DecInferLen(yyl1954, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1954 {
				if yyrl1954 <= cap(yyv1954) {
					yyv1954 = yyv1954[:yyrl1954]
				} else {
					yyv1954 = make([]pkg2_v1.Capability, yyrl1954)
				}
			} else {
				yyv1954 = make([]pkg2_v1.Capability, yyrl1954)
			}
			yyc1954 = true
			yyrr1954 = len(yyv1954)
		} else if yyl1954 != len(yyv1954) {
			yyv1954 = yyv1954[:yyl1954]
			yyc1954 = true
		}
		yyj1954 := 0
		for ; yyj1954 < yyrr1954; yyj1954++ {
			yyh1954.ElemContainerState(yyj1954)
			if r.TryDecodeAsNil() {
				yyv1954[yyj1954] = ""
			} else {
				yyv1954[yyj1954] = pkg2_v1.Capability(r.DecodeString())
			}

		}
		if yyrt1954 {
			for ; yyj1954 < yyl1954; yyj1954++ {
				yyv1954 = append(yyv1954, "")
				yyh1954.ElemContainerState(yyj1954)
				if r.TryDecodeAsNil() {
					yyv1954[yyj1954] = ""
				} else {
					yyv1954[yyj1954] = pkg2_v1.Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj1954 := 0
		for ; !r.CheckBreak(); yyj1954++ {

			if yyj1954 >= len(yyv1954) {
				yyv1954 = append(yyv1954, "") // var yyz1954 pkg2_v1.Capability
				yyc1954 = true
			}
			yyh1954.ElemContainerState(yyj1954)
			if yyj1954 < len(yyv1954) {
				if r.TryDecodeAsNil() {
					yyv1954[yyj1954] = ""
				} else {
					yyv1954[yyj1954] = pkg2_v1.Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1954 < len(yyv1954) {
			yyv1954 = yyv1954[:yyj1954]
			yyc1954 = true
		} else if yyj1954 == 0 && yyv1954 == nil {
			yyv1954 = []pkg2_v1.Capability{}
			yyc1954 = true
		}
	}
	yyh1954.End()
	if yyc1954 {
		*v = yyv1954
	}
}

func (x codecSelfer1234) encSliceFSType(v []FSType, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1958 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv1958.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFSType(v *[]FSType, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1959 := *v
	yyh1959, yyl1959 := z.DecSliceHelperStart()
	var yyc1959 bool
	if yyl1959 == 0 {
		if yyv1959 == nil {
			yyv1959 = []FSType{}
			yyc1959 = true
		} else if len(yyv1959) != 0 {
			yyv1959 = yyv1959[:0]
			yyc1959 = true
		}
	} else if yyl1959 > 0 {
		var yyrr1959, yyrl1959 int
		var yyrt1959 bool
		if yyl1959 > cap(yyv1959) {

			yyrl1959, yyrt1959 = z.DecInferLen(yyl1959, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1959 {
				if yyrl1959 <= cap(yyv1959) {
					yyv1959 = yyv1959[:yyrl1959]
				} else {
					yyv1959 = make([]FSType, yyrl1959)
				}
			} else {
				yyv1959 = make([]FSType, yyrl1959)
			}
			yyc1959 = true
			yyrr1959 = len(yyv1959)
		} else if yyl1959 != len(yyv1959) {
			yyv1959 = yyv1959[:yyl1959]
			yyc1959 = true
		}
		yyj1959 := 0
		for ; yyj1959 < yyrr1959; yyj1959++ {
			yyh1959.ElemContainerState(yyj1959)
			if r.TryDecodeAsNil() {
				yyv1959[yyj1959] = ""
			} else {
				yyv1959[yyj1959] = FSType(r.DecodeString())
			}

		}
		if yyrt1959 {
			for ; yyj1959 < yyl1959; yyj1959++ {
				yyv1959 = append(yyv1959, "")
				yyh1959.ElemContainerState(yyj1959)
				if r.TryDecodeAsNil() {
					yyv1959[yyj1959] = ""
				} else {
					yyv1959[yyj1959] = FSType(r.DecodeString())
				}

			}
		}

	} else {
		yyj1959 := 0
		for ; !r.CheckBreak(); yyj1959++ {

			if yyj1959 >= len(yyv1959) {
				yyv1959 = append(yyv1959, "") // var yyz1959 FSType
				yyc1959 = true
			}
			yyh1959.ElemContainerState(yyj1959)
			if yyj1959 < len(yyv1959) {
				if r.TryDecodeAsNil() {
					yyv1959[yyj1959] = ""
				} else {
					yyv1959[yyj1959] = FSType(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1959 < len(yyv1959) {
			yyv1959 = yyv1959[:yyj1959]
			yyc1959 = true
		} else if yyj1959 == 0 && yyv1959 == nil {
			yyv1959 = []FSType{}
			yyc1959 = true
		}
	}
	yyh1959.End()
	if yyc1959 {
		*v = yyv1959
	}
}

func (x codecSelfer1234) encSliceHostPortRange(v []HostPortRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1963 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1964 := &yyv1963
		yy1964.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHostPortRange(v *[]HostPortRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1965 := *v
	yyh1965, yyl1965 := z.DecSliceHelperStart()
	var yyc1965 bool
	if yyl1965 == 0 {
		if yyv1965 == nil {
			yyv1965 = []HostPortRange{}
			yyc1965 = true
		} else if len(yyv1965) != 0 {
			yyv1965 = yyv1965[:0]
			yyc1965 = true
		}
	} else if yyl1965 > 0 {
		var yyrr1965, yyrl1965 int
		var yyrt1965 bool
		if yyl1965 > cap(yyv1965) {

			yyrg1965 := len(yyv1965) > 0
			yyv21965 := yyv1965
			yyrl1965, yyrt1965 = z.DecInferLen(yyl1965, z.DecBasicHandle().MaxInitLen, 8)
			if yyrt1965 {
				if yyrl1965 <= cap(yyv1965) {
					yyv1965 = yyv1965[:yyrl1965]
				} else {
					yyv1965 = make([]HostPortRange, yyrl1965)
				}
			} else {
				yyv1965 = make([]HostPortRange, yyrl1965)
			}
			yyc1965 = true
			yyrr1965 = len(yyv1965)
			if yyrg1965 {
				copy(yyv1965, yyv21965)
			}
		} else if yyl1965 != len(yyv1965) {
			yyv1965 = yyv1965[:yyl1965]
			yyc1965 = true
		}
		yyj1965 := 0
		for ; yyj1965 < yyrr1965; yyj1965++ {
			yyh1965.ElemContainerState(yyj1965)
			if r.TryDecodeAsNil() {
				yyv1965[yyj1965] = HostPortRange{}
			} else {
				yyv1966 := &yyv1965[yyj1965]
				yyv1966.CodecDecodeSelf(d)
			}

		}
		if yyrt1965 {
			for ; yyj1965 < yyl1965; yyj1965++ {
				yyv1965 = append(yyv1965, HostPortRange{})
				yyh1965.ElemContainerState(yyj1965)
				if r.TryDecodeAsNil() {
					yyv1965[yyj1965] = HostPortRange{}
				} else {
					yyv1967 := &yyv1965[yyj1965]
					yyv1967.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1965 := 0
		for ; !r.CheckBreak(); yyj1965++ {

			if yyj1965 >= len(yyv1965) {
				yyv1965 = append(yyv1965, HostPortRange{}) // var yyz1965 HostPortRange
				yyc1965 = true
			}
			yyh1965.ElemContainerState(yyj1965)
			if yyj1965 < len(yyv1965) {
				if r.TryDecodeAsNil() {
					yyv1965[yyj1965] = HostPortRange{}
				} else {
					yyv1968 := &yyv1965[yyj1965]
					yyv1968.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1965 < len(yyv1965) {
			yyv1965 = yyv1965[:yyj1965]
			yyc1965 = true
		} else if yyj1965 == 0 && yyv1965 == nil {
			yyv1965 = []HostPortRange{}
			yyc1965 = true
		}
	}
	yyh1965.End()
	if yyc1965 {
		*v = yyv1965
	}
}

func (x codecSelfer1234) encSliceIDRange(v []IDRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1969 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1970 := &yyv1969
		yy1970.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIDRange(v *[]IDRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1971 := *v
	yyh1971, yyl1971 := z.DecSliceHelperStart()
	var yyc1971 bool
	if yyl1971 == 0 {
		if yyv1971 == nil {
			yyv1971 = []IDRange{}
			yyc1971 = true
		} else if len(yyv1971) != 0 {
			yyv1971 = yyv1971[:0]
			yyc1971 = true
		}
	} else if yyl1971 > 0 {
		var yyrr1971, yyrl1971 int
		var yyrt1971 bool
		if yyl1971 > cap(yyv1971) {

			yyrg1971 := len(yyv1971) > 0
			yyv21971 := yyv1971
			yyrl1971, yyrt1971 = z.DecInferLen(yyl1971, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1971 {
				if yyrl1971 <= cap(yyv1971) {
					yyv1971 = yyv1971[:yyrl1971]
				} else {
					yyv1971 = make([]IDRange, yyrl1971)
				}
			} else {
				yyv1971 = make([]IDRange, yyrl1971)
			}
			yyc1971 = true
			yyrr1971 = len(yyv1971)
			if yyrg1971 {
				copy(yyv1971, yyv21971)
			}
		} else if yyl1971 != len(yyv1971) {
			yyv1971 = yyv1971[:yyl1971]
			yyc1971 = true
		}
		yyj1971 := 0
		for ; yyj1971 < yyrr1971; yyj1971++ {
			yyh1971.ElemContainerState(yyj1971)
			if r.TryDecodeAsNil() {
				yyv1971[yyj1971] = IDRange{}
			} else {
				yyv1972 := &yyv1971[yyj1971]
				yyv1972.CodecDecodeSelf(d)
			}

		}
		if yyrt1971 {
			for ; yyj1971 < yyl1971; yyj1971++ {
				yyv1971 = append(yyv1971, IDRange{})
				yyh1971.ElemContainerState(yyj1971)
				if r.TryDecodeAsNil() {
					yyv1971[yyj1971] = IDRange{}
				} else {
					yyv1973 := &yyv1971[yyj1971]
					yyv1973.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1971 := 0
		for ; !r.CheckBreak(); yyj1971++ {

			if yyj1971 >= len(yyv1971) {
				yyv1971 = append(yyv1971, IDRange{}) // var yyz1971 IDRange
				yyc1971 = true
			}
			yyh1971.ElemContainerState(yyj1971)
			if yyj1971 < len(yyv1971) {
				if r.TryDecodeAsNil() {
					yyv1971[yyj1971] = IDRange{}
				} else {
					yyv1974 := &yyv1971[yyj1971]
					yyv1974.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1971 < len(yyv1971) {
			yyv1971 = yyv1971[:yyj1971]
			yyc1971 = true
		} else if yyj1971 == 0 && yyv1971 == nil {
			yyv1971 = []IDRange{}
			yyc1971 = true
		}
	}
	yyh1971.End()
	if yyc1971 {
		*v = yyv1971
	}
}

func (x codecSelfer1234) encSlicePodSecurityPolicy(v []PodSecurityPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1975 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1976 := &yyv1975
		yy1976.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodSecurityPolicy(v *[]PodSecurityPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1977 := *v
	yyh1977, yyl1977 := z.DecSliceHelperStart()
	var yyc1977 bool
	if yyl1977 == 0 {
		if yyv1977 == nil {
			yyv1977 = []PodSecurityPolicy{}
			yyc1977 = true
		} else if len(yyv1977) != 0 {
			yyv1977 = yyv1977[:0]
			yyc1977 = true
		}
	} else if yyl1977 > 0 {
		var yyrr1977, yyrl1977 int
		var yyrt1977 bool
		if yyl1977 > cap(yyv1977) {

			yyrg1977 := len(yyv1977) > 0
			yyv21977 := yyv1977
			yyrl1977, yyrt1977 = z.DecInferLen(yyl1977, z.DecBasicHandle().MaxInitLen, 552)
			if yyrt1977 {
				if yyrl1977 <= cap(yyv1977) {
					yyv1977 = yyv1977[:yyrl1977]
				} else {
					yyv1977 = make([]PodSecurityPolicy, yyrl1977)
				}
			} else {
				yyv1977 = make([]PodSecurityPolicy, yyrl1977)
			}
			yyc1977 = true
			yyrr1977 = len(yyv1977)
			if yyrg1977 {
				copy(yyv1977, yyv21977)
			}
		} else if yyl1977 != len(yyv1977) {
			yyv1977 = yyv1977[:yyl1977]
			yyc1977 = true
		}
		yyj1977 := 0
		for ; yyj1977 < yyrr1977; yyj1977++ {
			yyh1977.ElemContainerState(yyj1977)
			if r.TryDecodeAsNil() {
				yyv1977[yyj1977] = PodSecurityPolicy{}
			} else {
				yyv1978 := &yyv1977[yyj1977]
				yyv1978.CodecDecodeSelf(d)
			}

		}
		if yyrt1977 {
			for ; yyj1977 < yyl1977; yyj1977++ {
				yyv1977 = append(yyv1977, PodSecurityPolicy{})
				yyh1977.ElemContainerState(yyj1977)
				if r.TryDecodeAsNil() {
					yyv1977[yyj1977] = PodSecurityPolicy{}
				} else {
					yyv1979 := &yyv1977[yyj1977]
					yyv1979.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1977 := 0
		for ; !r.CheckBreak(); yyj1977++ {

			if yyj1977 >= len(yyv1977) {
				yyv1977 = append(yyv1977, PodSecurityPolicy{}) // var yyz1977 PodSecurityPolicy
				yyc1977 = true
			}
			yyh1977.ElemContainerState(yyj1977)
			if yyj1977 < len(yyv1977) {
				if r.TryDecodeAsNil() {
					yyv1977[yyj1977] = PodSecurityPolicy{}
				} else {
					yyv1980 := &yyv1977[yyj1977]
					yyv1980.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1977 < len(yyv1977) {
			yyv1977 = yyv1977[:yyj1977]
			yyc1977 = true
		} else if yyj1977 == 0 && yyv1977 == nil {
			yyv1977 = []PodSecurityPolicy{}
			yyc1977 = true
		}
	}
	yyh1977.End()
	if yyc1977 {
		*v = yyv1977
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyIngressRule(v []NetworkPolicyIngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1981 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1982 := &yyv1981
		yy1982.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyIngressRule(v *[]NetworkPolicyIngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1983 := *v
	yyh1983, yyl1983 := z.DecSliceHelperStart()
	var yyc1983 bool
	if yyl1983 == 0 {
		if yyv1983 == nil {
			yyv1983 = []NetworkPolicyIngressRule{}
			yyc1983 = true
		} else if len(yyv1983) != 0 {
			yyv1983 = yyv1983[:0]
			yyc1983 = true
		}
	} else if yyl1983 > 0 {
		var yyrr1983, yyrl1983 int
		var yyrt1983 bool
		if yyl1983 > cap(yyv1983) {

			yyrg1983 := len(yyv1983) > 0
			yyv21983 := yyv1983
			yyrl1983, yyrt1983 = z.DecInferLen(yyl1983, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt1983 {
				if yyrl1983 <= cap(yyv1983) {
					yyv1983 = yyv1983[:yyrl1983]
				} else {
					yyv1983 = make([]NetworkPolicyIngressRule, yyrl1983)
				}
			} else {
				yyv1983 = make([]NetworkPolicyIngressRule, yyrl1983)
			}
			yyc1983 = true
			yyrr1983 = len(yyv1983)
			if yyrg1983 {
				copy(yyv1983, yyv21983)
			}
		} else if yyl1983 != len(yyv1983) {
			yyv1983 = yyv1983[:yyl1983]
			yyc1983 = true
		}
		yyj1983 := 0
		for ; yyj1983 < yyrr1983; yyj1983++ {
			yyh1983.ElemContainerState(yyj1983)
			if r.TryDecodeAsNil() {
				yyv1983[yyj1983] = NetworkPolicyIngressRule{}
			} else {
				yyv1984 := &yyv1983[yyj1983]
				yyv1984.CodecDecodeSelf(d)
			}

		}
		if yyrt1983 {
			for ; yyj1983 < yyl1983; yyj1983++ {
				yyv1983 = append(yyv1983, NetworkPolicyIngressRule{})
				yyh1983.ElemContainerState(yyj1983)
				if r.TryDecodeAsNil() {
					yyv1983[yyj1983] = NetworkPolicyIngressRule{}
				} else {
					yyv1985 := &yyv1983[yyj1983]
					yyv1985.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1983 := 0
		for ; !r.CheckBreak(); yyj1983++ {

			if yyj1983 >= len(yyv1983) {
				yyv1983 = append(yyv1983, NetworkPolicyIngressRule{}) // var yyz1983 NetworkPolicyIngressRule
				yyc1983 = true
			}
			yyh1983.ElemContainerState(yyj1983)
			if yyj1983 < len(yyv1983) {
				if r.TryDecodeAsNil() {
					yyv1983[yyj1983] = NetworkPolicyIngressRule{}
				} else {
					yyv1986 := &yyv1983[yyj1983]
					yyv1986.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1983 < len(yyv1983) {
			yyv1983 = yyv1983[:yyj1983]
			yyc1983 = true
		} else if yyj1983 == 0 && yyv1983 == nil {
			yyv1983 = []NetworkPolicyIngressRule{}
			yyc1983 = true
		}
	}
	yyh1983.End()
	if yyc1983 {
		*v = yyv1983
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPort(v []NetworkPolicyPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1987 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1988 := &yyv1987
		yy1988.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPort(v *[]NetworkPolicyPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1989 := *v
	yyh1989, yyl1989 := z.DecSliceHelperStart()
	var yyc1989 bool
	if yyl1989 == 0 {
		if yyv1989 == nil {
			yyv1989 = []NetworkPolicyPort{}
			yyc1989 = true
		} else if len(yyv1989) != 0 {
			yyv1989 = yyv1989[:0]
			yyc1989 = true
		}
	} else if yyl1989 > 0 {
		var yyrr1989, yyrl1989 int
		var yyrt1989 bool
		if yyl1989 > cap(yyv1989) {

			yyrg1989 := len(yyv1989) > 0
			yyv21989 := yyv1989
			yyrl1989, yyrt1989 = z.DecInferLen(yyl1989, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1989 {
				if yyrl1989 <= cap(yyv1989) {
					yyv1989 = yyv1989[:yyrl1989]
				} else {
					yyv1989 = make([]NetworkPolicyPort, yyrl1989)
				}
			} else {
				yyv1989 = make([]NetworkPolicyPort, yyrl1989)
			}
			yyc1989 = true
			yyrr1989 = len(yyv1989)
			if yyrg1989 {
				copy(yyv1989, yyv21989)
			}
		} else if yyl1989 != len(yyv1989) {
			yyv1989 = yyv1989[:yyl1989]
			yyc1989 = true
		}
		yyj1989 := 0
		for ; yyj1989 < yyrr1989; yyj1989++ {
			yyh1989.ElemContainerState(yyj1989)
			if r.TryDecodeAsNil() {
				yyv1989[yyj1989] = NetworkPolicyPort{}
			} else {
				yyv1990 := &yyv1989[yyj1989]
				yyv1990.CodecDecodeSelf(d)
			}

		}
		if yyrt1989 {
			for ; yyj1989 < yyl1989; yyj1989++ {
				yyv1989 = append(yyv1989, NetworkPolicyPort{})
				yyh1989.ElemContainerState(yyj1989)
				if r.TryDecodeAsNil() {
					yyv1989[yyj1989] = NetworkPolicyPort{}
				} else {
					yyv1991 := &yyv1989[yyj1989]
					yyv1991.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1989 := 0
		for ; !r.CheckBreak(); yyj1989++ {

			if yyj1989 >= len(yyv1989) {
				yyv1989 = append(yyv1989, NetworkPolicyPort{}) // var yyz1989 NetworkPolicyPort
				yyc1989 = true
			}
			yyh1989.ElemContainerState(yyj1989)
			if yyj1989 < len(yyv1989) {
				if r.TryDecodeAsNil() {
					yyv1989[yyj1989] = NetworkPolicyPort{}
				} else {
					yyv1992 := &yyv1989[yyj1989]
					yyv1992.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1989 < len(yyv1989) {
			yyv1989 = yyv1989[:yyj1989]
			yyc1989 = true
		} else if yyj1989 == 0 && yyv1989 == nil {
			yyv1989 = []NetworkPolicyPort{}
			yyc1989 = true
		}
	}
	yyh1989.End()
	if yyc1989 {
		*v = yyv1989
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPeer(v []NetworkPolicyPeer, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1993 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1994 := &yyv1993
		yy1994.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPeer(v *[]NetworkPolicyPeer, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1995 := *v
	yyh1995, yyl1995 := z.DecSliceHelperStart()
	var yyc1995 bool
	if yyl1995 == 0 {
		if yyv1995 == nil {
			yyv1995 = []NetworkPolicyPeer{}
			yyc1995 = true
		} else if len(yyv1995) != 0 {
			yyv1995 = yyv1995[:0]
			yyc1995 = true
		}
	} else if yyl1995 > 0 {
		var yyrr1995, yyrl1995 int
		var yyrt1995 bool
		if yyl1995 > cap(yyv1995) {

			yyrg1995 := len(yyv1995) > 0
			yyv21995 := yyv1995
			yyrl1995, yyrt1995 = z.DecInferLen(yyl1995, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1995 {
				if yyrl1995 <= cap(yyv1995) {
					yyv1995 = yyv1995[:yyrl1995]
				} else {
					yyv1995 = make([]NetworkPolicyPeer, yyrl1995)
				}
			} else {
				yyv1995 = make([]NetworkPolicyPeer, yyrl1995)
			}
			yyc1995 = true
			yyrr1995 = len(yyv1995)
			if yyrg1995 {
				copy(yyv1995, yyv21995)
			}
		} else if yyl1995 != len(yyv1995) {
			yyv1995 = yyv1995[:yyl1995]
			yyc1995 = true
		}
		yyj1995 := 0
		for ; yyj1995 < yyrr1995; yyj1995++ {
			yyh1995.ElemContainerState(yyj1995)
			if r.TryDecodeAsNil() {
				yyv1995[yyj1995] = NetworkPolicyPeer{}
			} else {
				yyv1996 := &yyv1995[yyj1995]
				yyv1996.CodecDecodeSelf(d)
			}

		}
		if yyrt1995 {
			for ; yyj1995 < yyl1995; yyj1995++ {
				yyv1995 = append(yyv1995, NetworkPolicyPeer{})
				yyh1995.ElemContainerState(yyj1995)
				if r.TryDecodeAsNil() {
					yyv1995[yyj1995] = NetworkPolicyPeer{}
				} else {
					yyv1997 := &yyv1995[yyj1995]
					yyv1997.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1995 := 0
		for ; !r.CheckBreak(); yyj1995++ {

			if yyj1995 >= len(yyv1995) {
				yyv1995 = append(yyv1995, NetworkPolicyPeer{}) // var yyz1995 NetworkPolicyPeer
				yyc1995 = true
			}
			yyh1995.ElemContainerState(yyj1995)
			if yyj1995 < len(yyv1995) {
				if r.TryDecodeAsNil() {
					yyv1995[yyj1995] = NetworkPolicyPeer{}
				} else {
					yyv1998 := &yyv1995[yyj1995]
					yyv1998.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1995 < len(yyv1995) {
			yyv1995 = yyv1995[:yyj1995]
			yyc1995 = true
		} else if yyj1995 == 0 && yyv1995 == nil {
			yyv1995 = []NetworkPolicyPeer{}
			yyc1995 = true
		}
	}
	yyh1995.End()
	if yyc1995 {
		*v = yyv1995
	}
}

func (x codecSelfer1234) encSliceNetworkPolicy(v []NetworkPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1999 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy2000 := &yyv1999
		yy2000.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicy(v *[]NetworkPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv2001 := *v
	yyh2001, yyl2001 := z.DecSliceHelperStart()
	var yyc2001 bool
	if yyl2001 == 0 {
		if yyv2001 == nil {
			yyv2001 = []NetworkPolicy{}
			yyc2001 = true
		} else if len(yyv2001) != 0 {
			yyv2001 = yyv2001[:0]
			yyc2001 = true
		}
	} else if yyl2001 > 0 {
		var yyrr2001, yyrl2001 int
		var yyrt2001 bool
		if yyl2001 > cap(yyv2001) {

			yyrg2001 := len(yyv2001) > 0
			yyv22001 := yyv2001
			yyrl2001, yyrt2001 = z.DecInferLen(yyl2001, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt2001 {
				if yyrl2001 <= cap(yyv2001) {
					yyv2001 = yyv2001[:yyrl2001]
				} else {
					yyv2001 = make([]NetworkPolicy, yyrl2001)
				}
			} else {
				yyv2001 = make([]NetworkPolicy, yyrl2001)
			}
			yyc2001 = true
			yyrr2001 = len(yyv2001)
			if yyrg2001 {
				copy(yyv2001, yyv22001)
			}
		} else if yyl2001 != len(yyv2001) {
			yyv2001 = yyv2001[:yyl2001]
			yyc2001 = true
		}
		yyj2001 := 0
		for ; yyj2001 < yyrr2001; yyj2001++ {
			yyh2001.ElemContainerState(yyj2001)
			if r.TryDecodeAsNil() {
				yyv2001[yyj2001] = NetworkPolicy{}
			} else {
				yyv2002 := &yyv2001[yyj2001]
				yyv2002.CodecDecodeSelf(d)
			}

		}
		if yyrt2001 {
			for ; yyj2001 < yyl2001; yyj2001++ {
				yyv2001 = append(yyv2001, NetworkPolicy{})
				yyh2001.ElemContainerState(yyj2001)
				if r.TryDecodeAsNil() {
					yyv2001[yyj2001] = NetworkPolicy{}
				} else {
					yyv2003 := &yyv2001[yyj2001]
					yyv2003.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj2001 := 0
		for ; !r.CheckBreak(); yyj2001++ {

			if yyj2001 >= len(yyv2001) {
				yyv2001 = append(yyv2001, NetworkPolicy{}) // var yyz2001 NetworkPolicy
				yyc2001 = true
			}
			yyh2001.ElemContainerState(yyj2001)
			if yyj2001 < len(yyv2001) {
				if r.TryDecodeAsNil() {
					yyv2001[yyj2001] = NetworkPolicy{}
				} else {
					yyv2004 := &yyv2001[yyj2001]
					yyv2004.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj2001 < len(yyv2001) {
			yyv2001 = yyv2001[:yyj2001]
			yyc2001 = true
		} else if yyj2001 == 0 && yyv2001 == nil {
			yyv2001 = []NetworkPolicy{}
			yyc2001 = true
		}
	}
	yyh2001.End()
	if yyc2001 {
		*v = yyv2001
	}
}
