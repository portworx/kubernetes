/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package extensions

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.LabelSelector
		var v3 pkg3_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [1]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Replicas != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(1)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym6 := z.DecBinary()
	_ = yym6
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct7 := r.ContainerType()
		if yyct7 == codecSelferValueTypeMap1234 {
			yyl7 := r.ReadMapStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl7, d)
			}
		} else if yyct7 == codecSelferValueTypeArray1234 {
			yyl7 := r.ReadArrayStart()
			if yyl7 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl7, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys8Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys8Slc
	var yyhl8 bool = l >= 0
	for yyj8 := 0; ; yyj8++ {
		if yyhl8 {
			if yyj8 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys8Slc = r.DecodeBytes(yys8Slc, true, true)
		yys8 := string(yys8Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys8 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys8)
		} // end switch yys8
	} // end for yyj8
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym12 := z.EncBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep13 := !z.EncBinary()
			yy2arr13 := z.EncBasicHandle().StructToArray
			var yyq13 [2]bool
			_, _, _ = yysep13, yyq13, yy2arr13
			const yyr13 bool = false
			yyq13[1] = x.Selector != nil
			var yynn13 int
			if yyr13 || yy2arr13 {
				r.EncodeArrayStart(2)
			} else {
				yynn13 = 1
				for _, b := range yyq13 {
					if b {
						yynn13++
					}
				}
				r.EncodeMapStart(yynn13)
				yynn13 = 0
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym15 := z.EncBinary()
				_ = yym15
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym16 := z.EncBinary()
				_ = yym16
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq13[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq13[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr13 || yy2arr13 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj26 int
	var yyb26 bool
	var yyhl26 bool = l >= 0
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj26++
	if yyhl26 {
		yyb26 = yyj26 > l
	} else {
		yyb26 = r.CheckBreak()
	}
	if yyb26 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym29 := z.DecBinary()
		_ = yym29
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	for {
		yyj26++
		if yyhl26 {
			yyb26 = yyj26 > l
		} else {
			yyb26 = r.CheckBreak()
		}
		if yyb26 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj26-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym30 := z.EncBinary()
		_ = yym30
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep31 := !z.EncBinary()
			yy2arr31 := z.EncBasicHandle().StructToArray
			var yyq31 [5]bool
			_, _, _ = yysep31, yyq31, yy2arr31
			const yyr31 bool = false
			yyq31[0] = x.Kind != ""
			yyq31[1] = x.APIVersion != ""
			yyq31[2] = true
			yyq31[3] = true
			yyq31[4] = true
			var yynn31 int
			if yyr31 || yy2arr31 {
				r.EncodeArrayStart(5)
			} else {
				yynn31 = 0
				for _, b := range yyq31 {
					if b {
						yynn31++
					}
				}
				r.EncodeMapStart(yynn31)
				yynn31 = 0
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[0] {
					yym33 := z.EncBinary()
					_ = yym33
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym34 := z.EncBinary()
					_ = yym34
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[1] {
					yym36 := z.EncBinary()
					_ = yym36
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq31[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym37 := z.EncBinary()
					_ = yym37
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[2] {
					yy39 := &x.ObjectMeta
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else if z.HasExtensions() && z.EncExt(yy39) {
					} else {
						z.EncFallback(yy39)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy41 := &x.ObjectMeta
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else if z.HasExtensions() && z.EncExt(yy41) {
					} else {
						z.EncFallback(yy41)
					}
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[3] {
					yy44 := &x.Spec
					yy44.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy45 := &x.Spec
					yy45.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq31[4] {
					yy47 := &x.Status
					yy47.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq31[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy48 := &x.Status
					yy48.CodecEncodeSelf(e)
				}
			}
			if yyr31 || yy2arr31 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv54 := &x.ObjectMeta
				yym55 := z.DecBinary()
				_ = yym55
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv54) {
				} else {
					z.DecFallback(yyv54, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv56 := &x.Spec
				yyv56.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv57 := &x.Status
				yyv57.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj58 int
	var yyb58 bool
	var yyhl58 bool = l >= 0
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv61 := &x.ObjectMeta
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv61) {
		} else {
			z.DecFallback(yyv61, false)
		}
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv63 := &x.Spec
		yyv63.CodecDecodeSelf(d)
	}
	yyj58++
	if yyhl58 {
		yyb58 = yyj58 > l
	} else {
		yyb58 = r.CheckBreak()
	}
	if yyb58 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv64 := &x.Status
		yyv64.CodecDecodeSelf(d)
	}
	for {
		yyj58++
		if yyhl58 {
			yyb58 = yyj58 > l
		} else {
			yyb58 = r.CheckBreak()
		}
		if yyb58 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj58-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerDummy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym65 := z.EncBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep66 := !z.EncBinary()
			yy2arr66 := z.EncBasicHandle().StructToArray
			var yyq66 [2]bool
			_, _, _ = yysep66, yyq66, yy2arr66
			const yyr66 bool = false
			yyq66[0] = x.Kind != ""
			yyq66[1] = x.APIVersion != ""
			var yynn66 int
			if yyr66 || yy2arr66 {
				r.EncodeArrayStart(2)
			} else {
				yynn66 = 0
				for _, b := range yyq66 {
					if b {
						yynn66++
					}
				}
				r.EncodeMapStart(yynn66)
				yynn66 = 0
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq66[0] {
					yym68 := z.EncBinary()
					_ = yym68
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym69 := z.EncBinary()
					_ = yym69
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq66[1] {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq66[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr66 || yy2arr66 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerDummy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym73 := z.DecBinary()
	_ = yym73
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct74 := r.ContainerType()
		if yyct74 == codecSelferValueTypeMap1234 {
			yyl74 := r.ReadMapStart()
			if yyl74 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl74, d)
			}
		} else if yyct74 == codecSelferValueTypeArray1234 {
			yyl74 := r.ReadArrayStart()
			if yyl74 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl74, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys75Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys75Slc
	var yyhl75 bool = l >= 0
	for yyj75 := 0; ; yyj75++ {
		if yyhl75 {
			if yyj75 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys75Slc = r.DecodeBytes(yys75Slc, true, true)
		yys75 := string(yys75Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys75 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys75)
		} // end switch yys75
	} // end for yyj75
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerDummy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj78 int
	var yyb78 bool
	var yyhl78 bool = l >= 0
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj78++
	if yyhl78 {
		yyb78 = yyj78 > l
	} else {
		yyb78 = r.CheckBreak()
	}
	if yyb78 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj78++
		if yyhl78 {
			yyb78 = yyj78 > l
		} else {
			yyb78 = r.CheckBreak()
		}
		if yyb78 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj78-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTarget) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [2]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(2)
			} else {
				yynn82 = 2
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym85 := z.EncBinary()
				_ = yym85
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy87 := &x.TargetValue
				yym88 := z.EncBinary()
				_ = yym88
				if false {
				} else if z.HasExtensions() && z.EncExt(yy87) {
				} else if !yym88 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy87)
				} else {
					z.EncFallback(yy87)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy89 := &x.TargetValue
				yym90 := z.EncBinary()
				_ = yym90
				if false {
				} else if z.HasExtensions() && z.EncExt(yy89) {
				} else if !yym90 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy89)
				} else {
					z.EncFallback(yy89)
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTarget) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym91 := z.DecBinary()
	_ = yym91
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct92 := r.ContainerType()
		if yyct92 == codecSelferValueTypeMap1234 {
			yyl92 := r.ReadMapStart()
			if yyl92 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl92, d)
			}
		} else if yyct92 == codecSelferValueTypeArray1234 {
			yyl92 := r.ReadArrayStart()
			if yyl92 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl92, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTarget) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys93Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys93Slc
	var yyhl93 bool = l >= 0
	for yyj93 := 0; ; yyj93++ {
		if yyhl93 {
			if yyj93 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys93Slc = r.DecodeBytes(yys93Slc, true, true)
		yys93 := string(yys93Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys93 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.TargetValue = pkg4_resource.Quantity{}
			} else {
				yyv95 := &x.TargetValue
				yym96 := z.DecBinary()
				_ = yym96
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv95) {
				} else if !yym96 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv95)
				} else {
					z.DecFallback(yyv95, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys93)
		} // end switch yys93
	} // end for yyj93
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTarget) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj97 int
	var yyb97 bool
	var yyhl97 bool = l >= 0
	yyj97++
	if yyhl97 {
		yyb97 = yyj97 > l
	} else {
		yyb97 = r.CheckBreak()
	}
	if yyb97 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj97++
	if yyhl97 {
		yyb97 = yyj97 > l
	} else {
		yyb97 = r.CheckBreak()
	}
	if yyb97 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetValue = pkg4_resource.Quantity{}
	} else {
		yyv99 := &x.TargetValue
		yym100 := z.DecBinary()
		_ = yym100
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv99) {
		} else if !yym100 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv99)
		} else {
			z.DecFallback(yyv99, false)
		}
	}
	for {
		yyj97++
		if yyhl97 {
			yyb97 = yyj97 > l
		} else {
			yyb97 = r.CheckBreak()
		}
		if yyb97 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj97-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricTargetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym101 := z.EncBinary()
		_ = yym101
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep102 := !z.EncBinary()
			yy2arr102 := z.EncBasicHandle().StructToArray
			var yyq102 [1]bool
			_, _, _ = yysep102, yyq102, yy2arr102
			const yyr102 bool = false
			var yynn102 int
			if yyr102 || yy2arr102 {
				r.EncodeArrayStart(1)
			} else {
				yynn102 = 1
				for _, b := range yyq102 {
					if b {
						yynn102++
					}
				}
				r.EncodeMapStart(yynn102)
				yynn102 = 0
			}
			if yyr102 || yy2arr102 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym104 := z.EncBinary()
					_ = yym104
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym105 := z.EncBinary()
					_ = yym105
					if false {
					} else {
						h.encSliceCustomMetricTarget(([]CustomMetricTarget)(x.Items), e)
					}
				}
			}
			if yyr102 || yy2arr102 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricTargetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym106 := z.DecBinary()
	_ = yym106
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct107 := r.ContainerType()
		if yyct107 == codecSelferValueTypeMap1234 {
			yyl107 := r.ReadMapStart()
			if yyl107 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl107, d)
			}
		} else if yyct107 == codecSelferValueTypeArray1234 {
			yyl107 := r.ReadArrayStart()
			if yyl107 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl107, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricTargetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys108Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys108Slc
	var yyhl108 bool = l >= 0
	for yyj108 := 0; ; yyj108++ {
		if yyhl108 {
			if yyj108 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys108Slc = r.DecodeBytes(yys108Slc, true, true)
		yys108 := string(yys108Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys108 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv109 := &x.Items
				yym110 := z.DecBinary()
				_ = yym110
				if false {
				} else {
					h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv109), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys108)
		} // end switch yys108
	} // end for yyj108
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricTargetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj111 int
	var yyb111 bool
	var yyhl111 bool = l >= 0
	yyj111++
	if yyhl111 {
		yyb111 = yyj111 > l
	} else {
		yyb111 = r.CheckBreak()
	}
	if yyb111 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv112 := &x.Items
		yym113 := z.DecBinary()
		_ = yym113
		if false {
		} else {
			h.decSliceCustomMetricTarget((*[]CustomMetricTarget)(yyv112), d)
		}
	}
	for {
		yyj111++
		if yyhl111 {
			yyb111 = yyj111 > l
		} else {
			yyb111 = r.CheckBreak()
		}
		if yyb111 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj111-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym114 := z.EncBinary()
		_ = yym114
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep115 := !z.EncBinary()
			yy2arr115 := z.EncBasicHandle().StructToArray
			var yyq115 [2]bool
			_, _, _ = yysep115, yyq115, yy2arr115
			const yyr115 bool = false
			var yynn115 int
			if yyr115 || yy2arr115 {
				r.EncodeArrayStart(2)
			} else {
				yynn115 = 2
				for _, b := range yyq115 {
					if b {
						yynn115++
					}
				}
				r.EncodeMapStart(yynn115)
				yynn115 = 0
			}
			if yyr115 || yy2arr115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym117 := z.EncBinary()
				_ = yym117
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym118 := z.EncBinary()
				_ = yym118
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr115 || yy2arr115 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy120 := &x.CurrentValue
				yym121 := z.EncBinary()
				_ = yym121
				if false {
				} else if z.HasExtensions() && z.EncExt(yy120) {
				} else if !yym121 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy120)
				} else {
					z.EncFallback(yy120)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy122 := &x.CurrentValue
				yym123 := z.EncBinary()
				_ = yym123
				if false {
				} else if z.HasExtensions() && z.EncExt(yy122) {
				} else if !yym123 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy122)
				} else {
					z.EncFallback(yy122)
				}
			}
			if yyr115 || yy2arr115 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym124 := z.DecBinary()
	_ = yym124
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct125 := r.ContainerType()
		if yyct125 == codecSelferValueTypeMap1234 {
			yyl125 := r.ReadMapStart()
			if yyl125 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl125, d)
			}
		} else if yyct125 == codecSelferValueTypeArray1234 {
			yyl125 := r.ReadArrayStart()
			if yyl125 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl125, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys126Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys126Slc
	var yyhl126 bool = l >= 0
	for yyj126 := 0; ; yyj126++ {
		if yyhl126 {
			if yyj126 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys126Slc = r.DecodeBytes(yys126Slc, true, true)
		yys126 := string(yys126Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys126 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.CurrentValue = pkg4_resource.Quantity{}
			} else {
				yyv128 := &x.CurrentValue
				yym129 := z.DecBinary()
				_ = yym129
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv128) {
				} else if !yym129 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv128)
				} else {
					z.DecFallback(yyv128, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys126)
		} // end switch yys126
	} // end for yyj126
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj130 int
	var yyb130 bool
	var yyhl130 bool = l >= 0
	yyj130++
	if yyhl130 {
		yyb130 = yyj130 > l
	} else {
		yyb130 = r.CheckBreak()
	}
	if yyb130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj130++
	if yyhl130 {
		yyb130 = yyj130 > l
	} else {
		yyb130 = r.CheckBreak()
	}
	if yyb130 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentValue = pkg4_resource.Quantity{}
	} else {
		yyv132 := &x.CurrentValue
		yym133 := z.DecBinary()
		_ = yym133
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv132) {
		} else if !yym133 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv132)
		} else {
			z.DecFallback(yyv132, false)
		}
	}
	for {
		yyj130++
		if yyhl130 {
			yyb130 = yyj130 > l
		} else {
			yyb130 = r.CheckBreak()
		}
		if yyb130 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj130-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CustomMetricCurrentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym134 := z.EncBinary()
		_ = yym134
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep135 := !z.EncBinary()
			yy2arr135 := z.EncBasicHandle().StructToArray
			var yyq135 [1]bool
			_, _, _ = yysep135, yyq135, yy2arr135
			const yyr135 bool = false
			var yynn135 int
			if yyr135 || yy2arr135 {
				r.EncodeArrayStart(1)
			} else {
				yynn135 = 1
				for _, b := range yyq135 {
					if b {
						yynn135++
					}
				}
				r.EncodeMapStart(yynn135)
				yynn135 = 0
			}
			if yyr135 || yy2arr135 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym137 := z.EncBinary()
					_ = yym137
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym138 := z.EncBinary()
					_ = yym138
					if false {
					} else {
						h.encSliceCustomMetricCurrentStatus(([]CustomMetricCurrentStatus)(x.Items), e)
					}
				}
			}
			if yyr135 || yy2arr135 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CustomMetricCurrentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym139 := z.DecBinary()
	_ = yym139
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct140 := r.ContainerType()
		if yyct140 == codecSelferValueTypeMap1234 {
			yyl140 := r.ReadMapStart()
			if yyl140 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl140, d)
			}
		} else if yyct140 == codecSelferValueTypeArray1234 {
			yyl140 := r.ReadArrayStart()
			if yyl140 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl140, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys141Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys141Slc
	var yyhl141 bool = l >= 0
	for yyj141 := 0; ; yyj141++ {
		if yyhl141 {
			if yyj141 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys141Slc = r.DecodeBytes(yys141Slc, true, true)
		yys141 := string(yys141Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys141 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv142 := &x.Items
				yym143 := z.DecBinary()
				_ = yym143
				if false {
				} else {
					h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv142), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys141)
		} // end switch yys141
	} // end for yyj141
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CustomMetricCurrentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj144 int
	var yyb144 bool
	var yyhl144 bool = l >= 0
	yyj144++
	if yyhl144 {
		yyb144 = yyj144 > l
	} else {
		yyb144 = r.CheckBreak()
	}
	if yyb144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv145 := &x.Items
		yym146 := z.DecBinary()
		_ = yym146
		if false {
		} else {
			h.decSliceCustomMetricCurrentStatus((*[]CustomMetricCurrentStatus)(yyv145), d)
		}
	}
	for {
		yyj144++
		if yyhl144 {
			yyb144 = yyj144 > l
		} else {
			yyb144 = r.CheckBreak()
		}
		if yyb144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym147 := z.EncBinary()
		_ = yym147
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep148 := !z.EncBinary()
			yy2arr148 := z.EncBasicHandle().StructToArray
			var yyq148 [5]bool
			_, _, _ = yysep148, yyq148, yy2arr148
			const yyr148 bool = false
			yyq148[0] = x.Kind != ""
			yyq148[1] = x.APIVersion != ""
			yyq148[2] = true
			yyq148[3] = x.Description != ""
			yyq148[4] = len(x.Versions) != 0
			var yynn148 int
			if yyr148 || yy2arr148 {
				r.EncodeArrayStart(5)
			} else {
				yynn148 = 0
				for _, b := range yyq148 {
					if b {
						yynn148++
					}
				}
				r.EncodeMapStart(yynn148)
				yynn148 = 0
			}
			if yyr148 || yy2arr148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq148[0] {
					yym150 := z.EncBinary()
					_ = yym150
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq148[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym151 := z.EncBinary()
					_ = yym151
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr148 || yy2arr148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq148[1] {
					yym153 := z.EncBinary()
					_ = yym153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq148[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym154 := z.EncBinary()
					_ = yym154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr148 || yy2arr148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq148[2] {
					yy156 := &x.ObjectMeta
					yym157 := z.EncBinary()
					_ = yym157
					if false {
					} else if z.HasExtensions() && z.EncExt(yy156) {
					} else {
						z.EncFallback(yy156)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq148[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy158 := &x.ObjectMeta
					yym159 := z.EncBinary()
					_ = yym159
					if false {
					} else if z.HasExtensions() && z.EncExt(yy158) {
					} else {
						z.EncFallback(yy158)
					}
				}
			}
			if yyr148 || yy2arr148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq148[3] {
					yym161 := z.EncBinary()
					_ = yym161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq148[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("description"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym162 := z.EncBinary()
					_ = yym162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Description))
					}
				}
			}
			if yyr148 || yy2arr148 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq148[4] {
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym164 := z.EncBinary()
						_ = yym164
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq148[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("versions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Versions == nil {
						r.EncodeNil()
					} else {
						yym165 := z.EncBinary()
						_ = yym165
						if false {
						} else {
							h.encSliceAPIVersion(([]APIVersion)(x.Versions), e)
						}
					}
				}
			}
			if yyr148 || yy2arr148 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym166 := z.DecBinary()
	_ = yym166
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct167 := r.ContainerType()
		if yyct167 == codecSelferValueTypeMap1234 {
			yyl167 := r.ReadMapStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl167, d)
			}
		} else if yyct167 == codecSelferValueTypeArray1234 {
			yyl167 := r.ReadArrayStart()
			if yyl167 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl167, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys168Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys168Slc
	var yyhl168 bool = l >= 0
	for yyj168 := 0; ; yyj168++ {
		if yyhl168 {
			if yyj168 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys168Slc = r.DecodeBytes(yys168Slc, true, true)
		yys168 := string(yys168Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys168 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv171 := &x.ObjectMeta
				yym172 := z.DecBinary()
				_ = yym172
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv171) {
				} else {
					z.DecFallback(yyv171, false)
				}
			}
		case "description":
			if r.TryDecodeAsNil() {
				x.Description = ""
			} else {
				x.Description = string(r.DecodeString())
			}
		case "versions":
			if r.TryDecodeAsNil() {
				x.Versions = nil
			} else {
				yyv174 := &x.Versions
				yym175 := z.DecBinary()
				_ = yym175
				if false {
				} else {
					h.decSliceAPIVersion((*[]APIVersion)(yyv174), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys168)
		} // end switch yys168
	} // end for yyj168
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj176 int
	var yyb176 bool
	var yyhl176 bool = l >= 0
	yyj176++
	if yyhl176 {
		yyb176 = yyj176 > l
	} else {
		yyb176 = r.CheckBreak()
	}
	if yyb176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj176++
	if yyhl176 {
		yyb176 = yyj176 > l
	} else {
		yyb176 = r.CheckBreak()
	}
	if yyb176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj176++
	if yyhl176 {
		yyb176 = yyj176 > l
	} else {
		yyb176 = r.CheckBreak()
	}
	if yyb176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv179 := &x.ObjectMeta
		yym180 := z.DecBinary()
		_ = yym180
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv179) {
		} else {
			z.DecFallback(yyv179, false)
		}
	}
	yyj176++
	if yyhl176 {
		yyb176 = yyj176 > l
	} else {
		yyb176 = r.CheckBreak()
	}
	if yyb176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Description = ""
	} else {
		x.Description = string(r.DecodeString())
	}
	yyj176++
	if yyhl176 {
		yyb176 = yyj176 > l
	} else {
		yyb176 = r.CheckBreak()
	}
	if yyb176 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Versions = nil
	} else {
		yyv182 := &x.Versions
		yym183 := z.DecBinary()
		_ = yym183
		if false {
		} else {
			h.decSliceAPIVersion((*[]APIVersion)(yyv182), d)
		}
	}
	for {
		yyj176++
		if yyhl176 {
			yyb176 = yyj176 > l
		} else {
			yyb176 = r.CheckBreak()
		}
		if yyb176 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj176-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym184 := z.EncBinary()
		_ = yym184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep185 := !z.EncBinary()
			yy2arr185 := z.EncBasicHandle().StructToArray
			var yyq185 [4]bool
			_, _, _ = yysep185, yyq185, yy2arr185
			const yyr185 bool = false
			yyq185[0] = x.Kind != ""
			yyq185[1] = x.APIVersion != ""
			yyq185[2] = true
			var yynn185 int
			if yyr185 || yy2arr185 {
				r.EncodeArrayStart(4)
			} else {
				yynn185 = 1
				for _, b := range yyq185 {
					if b {
						yynn185++
					}
				}
				r.EncodeMapStart(yynn185)
				yynn185 = 0
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq185[0] {
					yym187 := z.EncBinary()
					_ = yym187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq185[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym188 := z.EncBinary()
					_ = yym188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq185[1] {
					yym190 := z.EncBinary()
					_ = yym190
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq185[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym191 := z.EncBinary()
					_ = yym191
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq185[2] {
					yy193 := &x.ListMeta
					yym194 := z.EncBinary()
					_ = yym194
					if false {
					} else if z.HasExtensions() && z.EncExt(yy193) {
					} else {
						z.EncFallback(yy193)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq185[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy195 := &x.ListMeta
					yym196 := z.EncBinary()
					_ = yym196
					if false {
					} else if z.HasExtensions() && z.EncExt(yy195) {
					} else {
						z.EncFallback(yy195)
					}
				}
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym198 := z.EncBinary()
					_ = yym198
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym199 := z.EncBinary()
					_ = yym199
					if false {
					} else {
						h.encSliceThirdPartyResource(([]ThirdPartyResource)(x.Items), e)
					}
				}
			}
			if yyr185 || yy2arr185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym200 := z.DecBinary()
	_ = yym200
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct201 := r.ContainerType()
		if yyct201 == codecSelferValueTypeMap1234 {
			yyl201 := r.ReadMapStart()
			if yyl201 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl201, d)
			}
		} else if yyct201 == codecSelferValueTypeArray1234 {
			yyl201 := r.ReadArrayStart()
			if yyl201 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl201, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys202Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys202Slc
	var yyhl202 bool = l >= 0
	for yyj202 := 0; ; yyj202++ {
		if yyhl202 {
			if yyj202 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys202Slc = r.DecodeBytes(yys202Slc, true, true)
		yys202 := string(yys202Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys202 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv205 := &x.ListMeta
				yym206 := z.DecBinary()
				_ = yym206
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv205) {
				} else {
					z.DecFallback(yyv205, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv207 := &x.Items
				yym208 := z.DecBinary()
				_ = yym208
				if false {
				} else {
					h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv207), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys202)
		} // end switch yys202
	} // end for yyj202
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj209 int
	var yyb209 bool
	var yyhl209 bool = l >= 0
	yyj209++
	if yyhl209 {
		yyb209 = yyj209 > l
	} else {
		yyb209 = r.CheckBreak()
	}
	if yyb209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj209++
	if yyhl209 {
		yyb209 = yyj209 > l
	} else {
		yyb209 = r.CheckBreak()
	}
	if yyb209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj209++
	if yyhl209 {
		yyb209 = yyj209 > l
	} else {
		yyb209 = r.CheckBreak()
	}
	if yyb209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv212 := &x.ListMeta
		yym213 := z.DecBinary()
		_ = yym213
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv212) {
		} else {
			z.DecFallback(yyv212, false)
		}
	}
	yyj209++
	if yyhl209 {
		yyb209 = yyj209 > l
	} else {
		yyb209 = r.CheckBreak()
	}
	if yyb209 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv214 := &x.Items
		yym215 := z.DecBinary()
		_ = yym215
		if false {
		} else {
			h.decSliceThirdPartyResource((*[]ThirdPartyResource)(yyv214), d)
		}
	}
	for {
		yyj209++
		if yyhl209 {
			yyb209 = yyj209 > l
		} else {
			yyb209 = r.CheckBreak()
		}
		if yyb209 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj209-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *APIVersion) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym216 := z.EncBinary()
		_ = yym216
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep217 := !z.EncBinary()
			yy2arr217 := z.EncBasicHandle().StructToArray
			var yyq217 [1]bool
			_, _, _ = yysep217, yyq217, yy2arr217
			const yyr217 bool = false
			yyq217[0] = x.Name != ""
			var yynn217 int
			if yyr217 || yy2arr217 {
				r.EncodeArrayStart(1)
			} else {
				yynn217 = 0
				for _, b := range yyq217 {
					if b {
						yynn217++
					}
				}
				r.EncodeMapStart(yynn217)
				yynn217 = 0
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq217[0] {
					yym219 := z.EncBinary()
					_ = yym219
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq217[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym220 := z.EncBinary()
					_ = yym220
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr217 || yy2arr217 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *APIVersion) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym221 := z.DecBinary()
	_ = yym221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct222 := r.ContainerType()
		if yyct222 == codecSelferValueTypeMap1234 {
			yyl222 := r.ReadMapStart()
			if yyl222 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl222, d)
			}
		} else if yyct222 == codecSelferValueTypeArray1234 {
			yyl222 := r.ReadArrayStart()
			if yyl222 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl222, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *APIVersion) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys223Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys223Slc
	var yyhl223 bool = l >= 0
	for yyj223 := 0; ; yyj223++ {
		if yyhl223 {
			if yyj223 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys223Slc = r.DecodeBytes(yys223Slc, true, true)
		yys223 := string(yys223Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys223 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys223)
		} // end switch yys223
	} // end for yyj223
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *APIVersion) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj225 int
	var yyb225 bool
	var yyhl225 bool = l >= 0
	yyj225++
	if yyhl225 {
		yyb225 = yyj225 > l
	} else {
		yyb225 = r.CheckBreak()
	}
	if yyb225 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj225++
		if yyhl225 {
			yyb225 = yyj225 > l
		} else {
			yyb225 = r.CheckBreak()
		}
		if yyb225 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj225-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceData) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym227 := z.EncBinary()
		_ = yym227
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep228 := !z.EncBinary()
			yy2arr228 := z.EncBasicHandle().StructToArray
			var yyq228 [4]bool
			_, _, _ = yysep228, yyq228, yy2arr228
			const yyr228 bool = false
			yyq228[0] = x.Kind != ""
			yyq228[1] = x.APIVersion != ""
			yyq228[2] = true
			yyq228[3] = len(x.Data) != 0
			var yynn228 int
			if yyr228 || yy2arr228 {
				r.EncodeArrayStart(4)
			} else {
				yynn228 = 0
				for _, b := range yyq228 {
					if b {
						yynn228++
					}
				}
				r.EncodeMapStart(yynn228)
				yynn228 = 0
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq228[0] {
					yym230 := z.EncBinary()
					_ = yym230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq228[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym231 := z.EncBinary()
					_ = yym231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq228[1] {
					yym233 := z.EncBinary()
					_ = yym233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq228[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym234 := z.EncBinary()
					_ = yym234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq228[2] {
					yy236 := &x.ObjectMeta
					yym237 := z.EncBinary()
					_ = yym237
					if false {
					} else if z.HasExtensions() && z.EncExt(yy236) {
					} else {
						z.EncFallback(yy236)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq228[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy238 := &x.ObjectMeta
					yym239 := z.EncBinary()
					_ = yym239
					if false {
					} else if z.HasExtensions() && z.EncExt(yy238) {
					} else {
						z.EncFallback(yy238)
					}
				}
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq228[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym241 := z.EncBinary()
						_ = yym241
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq228[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym242 := z.EncBinary()
						_ = yym242
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
						}
					}
				}
			}
			if yyr228 || yy2arr228 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceData) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym243 := z.DecBinary()
	_ = yym243
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct244 := r.ContainerType()
		if yyct244 == codecSelferValueTypeMap1234 {
			yyl244 := r.ReadMapStart()
			if yyl244 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl244, d)
			}
		} else if yyct244 == codecSelferValueTypeArray1234 {
			yyl244 := r.ReadArrayStart()
			if yyl244 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl244, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys245Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys245Slc
	var yyhl245 bool = l >= 0
	for yyj245 := 0; ; yyj245++ {
		if yyhl245 {
			if yyj245 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys245Slc = r.DecodeBytes(yys245Slc, true, true)
		yys245 := string(yys245Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys245 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv248 := &x.ObjectMeta
				yym249 := z.DecBinary()
				_ = yym249
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv248) {
				} else {
					z.DecFallback(yyv248, false)
				}
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv250 := &x.Data
				yym251 := z.DecBinary()
				_ = yym251
				if false {
				} else {
					*yyv250 = r.DecodeBytes(*(*[]byte)(yyv250), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys245)
		} // end switch yys245
	} // end for yyj245
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceData) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj252 int
	var yyb252 bool
	var yyhl252 bool = l >= 0
	yyj252++
	if yyhl252 {
		yyb252 = yyj252 > l
	} else {
		yyb252 = r.CheckBreak()
	}
	if yyb252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj252++
	if yyhl252 {
		yyb252 = yyj252 > l
	} else {
		yyb252 = r.CheckBreak()
	}
	if yyb252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj252++
	if yyhl252 {
		yyb252 = yyj252 > l
	} else {
		yyb252 = r.CheckBreak()
	}
	if yyb252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv255 := &x.ObjectMeta
		yym256 := z.DecBinary()
		_ = yym256
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv255) {
		} else {
			z.DecFallback(yyv255, false)
		}
	}
	yyj252++
	if yyhl252 {
		yyb252 = yyj252 > l
	} else {
		yyb252 = r.CheckBreak()
	}
	if yyb252 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv257 := &x.Data
		yym258 := z.DecBinary()
		_ = yym258
		if false {
		} else {
			*yyv257 = r.DecodeBytes(*(*[]byte)(yyv257), false, false)
		}
	}
	for {
		yyj252++
		if yyhl252 {
			yyb252 = yyj252 > l
		} else {
			yyb252 = r.CheckBreak()
		}
		if yyb252 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj252-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Deployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym259 := z.EncBinary()
		_ = yym259
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep260 := !z.EncBinary()
			yy2arr260 := z.EncBasicHandle().StructToArray
			var yyq260 [5]bool
			_, _, _ = yysep260, yyq260, yy2arr260
			const yyr260 bool = false
			yyq260[0] = x.Kind != ""
			yyq260[1] = x.APIVersion != ""
			yyq260[2] = true
			yyq260[3] = true
			yyq260[4] = true
			var yynn260 int
			if yyr260 || yy2arr260 {
				r.EncodeArrayStart(5)
			} else {
				yynn260 = 0
				for _, b := range yyq260 {
					if b {
						yynn260++
					}
				}
				r.EncodeMapStart(yynn260)
				yynn260 = 0
			}
			if yyr260 || yy2arr260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq260[0] {
					yym262 := z.EncBinary()
					_ = yym262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq260[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym263 := z.EncBinary()
					_ = yym263
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr260 || yy2arr260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq260[1] {
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq260[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr260 || yy2arr260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq260[2] {
					yy268 := &x.ObjectMeta
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else if z.HasExtensions() && z.EncExt(yy268) {
					} else {
						z.EncFallback(yy268)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq260[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy270 := &x.ObjectMeta
					yym271 := z.EncBinary()
					_ = yym271
					if false {
					} else if z.HasExtensions() && z.EncExt(yy270) {
					} else {
						z.EncFallback(yy270)
					}
				}
			}
			if yyr260 || yy2arr260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq260[3] {
					yy273 := &x.Spec
					yy273.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq260[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy274 := &x.Spec
					yy274.CodecEncodeSelf(e)
				}
			}
			if yyr260 || yy2arr260 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq260[4] {
					yy276 := &x.Status
					yy276.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq260[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy277 := &x.Status
					yy277.CodecEncodeSelf(e)
				}
			}
			if yyr260 || yy2arr260 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Deployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym278 := z.DecBinary()
	_ = yym278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct279 := r.ContainerType()
		if yyct279 == codecSelferValueTypeMap1234 {
			yyl279 := r.ReadMapStart()
			if yyl279 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl279, d)
			}
		} else if yyct279 == codecSelferValueTypeArray1234 {
			yyl279 := r.ReadArrayStart()
			if yyl279 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Deployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys280Slc
	var yyhl280 bool = l >= 0
	for yyj280 := 0; ; yyj280++ {
		if yyhl280 {
			if yyj280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys280Slc = r.DecodeBytes(yys280Slc, true, true)
		yys280 := string(yys280Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys280 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv283 := &x.ObjectMeta
				yym284 := z.DecBinary()
				_ = yym284
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv283) {
				} else {
					z.DecFallback(yyv283, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DeploymentSpec{}
			} else {
				yyv285 := &x.Spec
				yyv285.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DeploymentStatus{}
			} else {
				yyv286 := &x.Status
				yyv286.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys280)
		} // end switch yys280
	} // end for yyj280
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Deployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj287 int
	var yyb287 bool
	var yyhl287 bool = l >= 0
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv290 := &x.ObjectMeta
		yym291 := z.DecBinary()
		_ = yym291
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv290) {
		} else {
			z.DecFallback(yyv290, false)
		}
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DeploymentSpec{}
	} else {
		yyv292 := &x.Spec
		yyv292.CodecDecodeSelf(d)
	}
	yyj287++
	if yyhl287 {
		yyb287 = yyj287 > l
	} else {
		yyb287 = r.CheckBreak()
	}
	if yyb287 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DeploymentStatus{}
	} else {
		yyv293 := &x.Status
		yyv293.CodecDecodeSelf(d)
	}
	for {
		yyj287++
		if yyhl287 {
			yyb287 = yyj287 > l
		} else {
			yyb287 = r.CheckBreak()
		}
		if yyb287 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj287-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym294 := z.EncBinary()
		_ = yym294
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep295 := !z.EncBinary()
			yy2arr295 := z.EncBasicHandle().StructToArray
			var yyq295 [8]bool
			_, _, _ = yysep295, yyq295, yy2arr295
			const yyr295 bool = false
			yyq295[0] = x.Replicas != 0
			yyq295[1] = x.Selector != nil
			yyq295[3] = true
			yyq295[4] = x.MinReadySeconds != 0
			yyq295[5] = x.RevisionHistoryLimit != nil
			yyq295[6] = x.Paused != false
			yyq295[7] = x.RollbackTo != nil
			var yynn295 int
			if yyr295 || yy2arr295 {
				r.EncodeArrayStart(8)
			} else {
				yynn295 = 1
				for _, b := range yyq295 {
					if b {
						yynn295++
					}
				}
				r.EncodeMapStart(yynn295)
				yynn295 = 0
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq295[0] {
					yym297 := z.EncBinary()
					_ = yym297
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq295[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym298 := z.EncBinary()
					_ = yym298
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq295[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym300 := z.EncBinary()
						_ = yym300
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq295[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym301 := z.EncBinary()
						_ = yym301
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy303 := &x.Template
				yym304 := z.EncBinary()
				_ = yym304
				if false {
				} else if z.HasExtensions() && z.EncExt(yy303) {
				} else {
					z.EncFallback(yy303)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy305 := &x.Template
				yym306 := z.EncBinary()
				_ = yym306
				if false {
				} else if z.HasExtensions() && z.EncExt(yy305) {
				} else {
					z.EncFallback(yy305)
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq295[3] {
					yy308 := &x.Strategy
					yy308.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq295[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("strategy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy309 := &x.Strategy
					yy309.CodecEncodeSelf(e)
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq295[4] {
					yym311 := z.EncBinary()
					_ = yym311
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq295[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym312 := z.EncBinary()
					_ = yym312
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq295[5] {
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy314 := *x.RevisionHistoryLimit
						yym315 := z.EncBinary()
						_ = yym315
						if false {
						} else {
							r.EncodeInt(int64(yy314))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq295[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revisionHistoryLimit"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RevisionHistoryLimit == nil {
						r.EncodeNil()
					} else {
						yy316 := *x.RevisionHistoryLimit
						yym317 := z.EncBinary()
						_ = yym317
						if false {
						} else {
							r.EncodeInt(int64(yy316))
						}
					}
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq295[6] {
					yym319 := z.EncBinary()
					_ = yym319
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq295[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("paused"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym320 := z.EncBinary()
					_ = yym320
					if false {
					} else {
						r.EncodeBool(bool(x.Paused))
					}
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq295[7] {
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq295[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollbackTo == nil {
						r.EncodeNil()
					} else {
						x.RollbackTo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr295 || yy2arr295 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym322 := z.DecBinary()
	_ = yym322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct323 := r.ContainerType()
		if yyct323 == codecSelferValueTypeMap1234 {
			yyl323 := r.ReadMapStart()
			if yyl323 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl323, d)
			}
		} else if yyct323 == codecSelferValueTypeArray1234 {
			yyl323 := r.ReadArrayStart()
			if yyl323 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl323, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys324Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys324Slc
	var yyhl324 bool = l >= 0
	for yyj324 := 0; ; yyj324++ {
		if yyhl324 {
			if yyj324 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys324Slc = r.DecodeBytes(yys324Slc, true, true)
		yys324 := string(yys324Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys324 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym327 := z.DecBinary()
				_ = yym327
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv328 := &x.Template
				yym329 := z.DecBinary()
				_ = yym329
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv328) {
				} else {
					z.DecFallback(yyv328, false)
				}
			}
		case "strategy":
			if r.TryDecodeAsNil() {
				x.Strategy = DeploymentStrategy{}
			} else {
				yyv330 := &x.Strategy
				yyv330.CodecDecodeSelf(d)
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "revisionHistoryLimit":
			if r.TryDecodeAsNil() {
				if x.RevisionHistoryLimit != nil {
					x.RevisionHistoryLimit = nil
				}
			} else {
				if x.RevisionHistoryLimit == nil {
					x.RevisionHistoryLimit = new(int32)
				}
				yym333 := z.DecBinary()
				_ = yym333
				if false {
				} else {
					*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
				}
			}
		case "paused":
			if r.TryDecodeAsNil() {
				x.Paused = false
			} else {
				x.Paused = bool(r.DecodeBool())
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				if x.RollbackTo != nil {
					x.RollbackTo = nil
				}
			} else {
				if x.RollbackTo == nil {
					x.RollbackTo = new(RollbackConfig)
				}
				x.RollbackTo.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys324)
		} // end switch yys324
	} // end for yyj324
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj336 int
	var yyb336 bool
	var yyhl336 bool = l >= 0
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym339 := z.DecBinary()
		_ = yym339
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv340 := &x.Template
		yym341 := z.DecBinary()
		_ = yym341
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv340) {
		} else {
			z.DecFallback(yyv340, false)
		}
	}
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Strategy = DeploymentStrategy{}
	} else {
		yyv342 := &x.Strategy
		yyv342.CodecDecodeSelf(d)
	}
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RevisionHistoryLimit != nil {
			x.RevisionHistoryLimit = nil
		}
	} else {
		if x.RevisionHistoryLimit == nil {
			x.RevisionHistoryLimit = new(int32)
		}
		yym345 := z.DecBinary()
		_ = yym345
		if false {
		} else {
			*((*int32)(x.RevisionHistoryLimit)) = int32(r.DecodeInt(32))
		}
	}
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paused = false
	} else {
		x.Paused = bool(r.DecodeBool())
	}
	yyj336++
	if yyhl336 {
		yyb336 = yyj336 > l
	} else {
		yyb336 = r.CheckBreak()
	}
	if yyb336 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollbackTo != nil {
			x.RollbackTo = nil
		}
	} else {
		if x.RollbackTo == nil {
			x.RollbackTo = new(RollbackConfig)
		}
		x.RollbackTo.CodecDecodeSelf(d)
	}
	for {
		yyj336++
		if yyhl336 {
			yyb336 = yyj336 > l
		} else {
			yyb336 = r.CheckBreak()
		}
		if yyb336 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj336-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentRollback) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym348 := z.EncBinary()
		_ = yym348
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep349 := !z.EncBinary()
			yy2arr349 := z.EncBasicHandle().StructToArray
			var yyq349 [5]bool
			_, _, _ = yysep349, yyq349, yy2arr349
			const yyr349 bool = false
			yyq349[0] = x.Kind != ""
			yyq349[1] = x.APIVersion != ""
			yyq349[3] = len(x.UpdatedAnnotations) != 0
			var yynn349 int
			if yyr349 || yy2arr349 {
				r.EncodeArrayStart(5)
			} else {
				yynn349 = 2
				for _, b := range yyq349 {
					if b {
						yynn349++
					}
				}
				r.EncodeMapStart(yynn349)
				yynn349 = 0
			}
			if yyr349 || yy2arr349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq349[0] {
					yym351 := z.EncBinary()
					_ = yym351
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq349[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym352 := z.EncBinary()
					_ = yym352
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr349 || yy2arr349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq349[1] {
					yym354 := z.EncBinary()
					_ = yym354
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq349[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym355 := z.EncBinary()
					_ = yym355
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr349 || yy2arr349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym357 := z.EncBinary()
				_ = yym357
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym358 := z.EncBinary()
				_ = yym358
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr349 || yy2arr349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq349[3] {
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym360 := z.EncBinary()
						_ = yym360
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq349[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedAnnotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UpdatedAnnotations == nil {
						r.EncodeNil()
					} else {
						yym361 := z.EncBinary()
						_ = yym361
						if false {
						} else {
							z.F.EncMapStringStringV(x.UpdatedAnnotations, false, e)
						}
					}
				}
			}
			if yyr349 || yy2arr349 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy363 := &x.RollbackTo
				yy363.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rollbackTo"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy364 := &x.RollbackTo
				yy364.CodecEncodeSelf(e)
			}
			if yyr349 || yy2arr349 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentRollback) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym365 := z.DecBinary()
	_ = yym365
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct366 := r.ContainerType()
		if yyct366 == codecSelferValueTypeMap1234 {
			yyl366 := r.ReadMapStart()
			if yyl366 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl366, d)
			}
		} else if yyct366 == codecSelferValueTypeArray1234 {
			yyl366 := r.ReadArrayStart()
			if yyl366 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl366, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentRollback) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys367Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys367Slc
	var yyhl367 bool = l >= 0
	for yyj367 := 0; ; yyj367++ {
		if yyhl367 {
			if yyj367 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys367Slc = r.DecodeBytes(yys367Slc, true, true)
		yys367 := string(yys367Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys367 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "updatedAnnotations":
			if r.TryDecodeAsNil() {
				x.UpdatedAnnotations = nil
			} else {
				yyv371 := &x.UpdatedAnnotations
				yym372 := z.DecBinary()
				_ = yym372
				if false {
				} else {
					z.F.DecMapStringStringX(yyv371, false, d)
				}
			}
		case "rollbackTo":
			if r.TryDecodeAsNil() {
				x.RollbackTo = RollbackConfig{}
			} else {
				yyv373 := &x.RollbackTo
				yyv373.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys367)
		} // end switch yys367
	} // end for yyj367
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentRollback) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj374 int
	var yyb374 bool
	var yyhl374 bool = l >= 0
	yyj374++
	if yyhl374 {
		yyb374 = yyj374 > l
	} else {
		yyb374 = r.CheckBreak()
	}
	if yyb374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj374++
	if yyhl374 {
		yyb374 = yyj374 > l
	} else {
		yyb374 = r.CheckBreak()
	}
	if yyb374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj374++
	if yyhl374 {
		yyb374 = yyj374 > l
	} else {
		yyb374 = r.CheckBreak()
	}
	if yyb374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj374++
	if yyhl374 {
		yyb374 = yyj374 > l
	} else {
		yyb374 = r.CheckBreak()
	}
	if yyb374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedAnnotations = nil
	} else {
		yyv378 := &x.UpdatedAnnotations
		yym379 := z.DecBinary()
		_ = yym379
		if false {
		} else {
			z.F.DecMapStringStringX(yyv378, false, d)
		}
	}
	yyj374++
	if yyhl374 {
		yyb374 = yyj374 > l
	} else {
		yyb374 = r.CheckBreak()
	}
	if yyb374 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RollbackTo = RollbackConfig{}
	} else {
		yyv380 := &x.RollbackTo
		yyv380.CodecDecodeSelf(d)
	}
	for {
		yyj374++
		if yyhl374 {
			yyb374 = yyj374 > l
		} else {
			yyb374 = r.CheckBreak()
		}
		if yyb374 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj374-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RollbackConfig) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym381 := z.EncBinary()
		_ = yym381
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep382 := !z.EncBinary()
			yy2arr382 := z.EncBasicHandle().StructToArray
			var yyq382 [1]bool
			_, _, _ = yysep382, yyq382, yy2arr382
			const yyr382 bool = false
			yyq382[0] = x.Revision != 0
			var yynn382 int
			if yyr382 || yy2arr382 {
				r.EncodeArrayStart(1)
			} else {
				yynn382 = 0
				for _, b := range yyq382 {
					if b {
						yynn382++
					}
				}
				r.EncodeMapStart(yynn382)
				yynn382 = 0
			}
			if yyr382 || yy2arr382 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq382[0] {
					yym384 := z.EncBinary()
					_ = yym384
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq382[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym385 := z.EncBinary()
					_ = yym385
					if false {
					} else {
						r.EncodeInt(int64(x.Revision))
					}
				}
			}
			if yyr382 || yy2arr382 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollbackConfig) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym386 := z.DecBinary()
	_ = yym386
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct387 := r.ContainerType()
		if yyct387 == codecSelferValueTypeMap1234 {
			yyl387 := r.ReadMapStart()
			if yyl387 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl387, d)
			}
		} else if yyct387 == codecSelferValueTypeArray1234 {
			yyl387 := r.ReadArrayStart()
			if yyl387 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl387, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollbackConfig) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys388Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys388Slc
	var yyhl388 bool = l >= 0
	for yyj388 := 0; ; yyj388++ {
		if yyhl388 {
			if yyj388 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys388Slc = r.DecodeBytes(yys388Slc, true, true)
		yys388 := string(yys388Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys388 {
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = 0
			} else {
				x.Revision = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys388)
		} // end switch yys388
	} // end for yyj388
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollbackConfig) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj390 int
	var yyb390 bool
	var yyhl390 bool = l >= 0
	yyj390++
	if yyhl390 {
		yyb390 = yyj390 > l
	} else {
		yyb390 = r.CheckBreak()
	}
	if yyb390 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = 0
	} else {
		x.Revision = int64(r.DecodeInt(64))
	}
	for {
		yyj390++
		if yyhl390 {
			yyb390 = yyj390 > l
		} else {
			yyb390 = r.CheckBreak()
		}
		if yyb390 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj390-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym392 := z.EncBinary()
		_ = yym392
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep393 := !z.EncBinary()
			yy2arr393 := z.EncBasicHandle().StructToArray
			var yyq393 [2]bool
			_, _, _ = yysep393, yyq393, yy2arr393
			const yyr393 bool = false
			yyq393[0] = x.Type != ""
			yyq393[1] = x.RollingUpdate != nil
			var yynn393 int
			if yyr393 || yy2arr393 {
				r.EncodeArrayStart(2)
			} else {
				yynn393 = 0
				for _, b := range yyq393 {
					if b {
						yynn393++
					}
				}
				r.EncodeMapStart(yynn393)
				yynn393 = 0
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq393[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq393[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq393[1] {
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq393[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rollingUpdate"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RollingUpdate == nil {
						r.EncodeNil()
					} else {
						x.RollingUpdate.CodecEncodeSelf(e)
					}
				}
			}
			if yyr393 || yy2arr393 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym396 := z.DecBinary()
	_ = yym396
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct397 := r.ContainerType()
		if yyct397 == codecSelferValueTypeMap1234 {
			yyl397 := r.ReadMapStart()
			if yyl397 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl397, d)
			}
		} else if yyct397 == codecSelferValueTypeArray1234 {
			yyl397 := r.ReadArrayStart()
			if yyl397 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl397, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStrategy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys398Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys398Slc
	var yyhl398 bool = l >= 0
	for yyj398 := 0; ; yyj398++ {
		if yyhl398 {
			if yyj398 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys398Slc = r.DecodeBytes(yys398Slc, true, true)
		yys398 := string(yys398Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys398 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = DeploymentStrategyType(r.DecodeString())
			}
		case "rollingUpdate":
			if r.TryDecodeAsNil() {
				if x.RollingUpdate != nil {
					x.RollingUpdate = nil
				}
			} else {
				if x.RollingUpdate == nil {
					x.RollingUpdate = new(RollingUpdateDeployment)
				}
				x.RollingUpdate.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys398)
		} // end switch yys398
	} // end for yyj398
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStrategy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj401 int
	var yyb401 bool
	var yyhl401 bool = l >= 0
	yyj401++
	if yyhl401 {
		yyb401 = yyj401 > l
	} else {
		yyb401 = r.CheckBreak()
	}
	if yyb401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = DeploymentStrategyType(r.DecodeString())
	}
	yyj401++
	if yyhl401 {
		yyb401 = yyj401 > l
	} else {
		yyb401 = r.CheckBreak()
	}
	if yyb401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RollingUpdate != nil {
			x.RollingUpdate = nil
		}
	} else {
		if x.RollingUpdate == nil {
			x.RollingUpdate = new(RollingUpdateDeployment)
		}
		x.RollingUpdate.CodecDecodeSelf(d)
	}
	for {
		yyj401++
		if yyhl401 {
			yyb401 = yyj401 > l
		} else {
			yyb401 = r.CheckBreak()
		}
		if yyb401 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj401-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DeploymentStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym404 := z.EncBinary()
	_ = yym404
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DeploymentStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym405 := z.DecBinary()
	_ = yym405
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RollingUpdateDeployment) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym406 := z.EncBinary()
		_ = yym406
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep407 := !z.EncBinary()
			yy2arr407 := z.EncBasicHandle().StructToArray
			var yyq407 [2]bool
			_, _, _ = yysep407, yyq407, yy2arr407
			const yyr407 bool = false
			yyq407[0] = true
			yyq407[1] = true
			var yynn407 int
			if yyr407 || yy2arr407 {
				r.EncodeArrayStart(2)
			} else {
				yynn407 = 0
				for _, b := range yyq407 {
					if b {
						yynn407++
					}
				}
				r.EncodeMapStart(yynn407)
				yynn407 = 0
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq407[0] {
					yy409 := &x.MaxUnavailable
					yym410 := z.EncBinary()
					_ = yym410
					if false {
					} else if z.HasExtensions() && z.EncExt(yy409) {
					} else if !yym410 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy409)
					} else {
						z.EncFallback(yy409)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq407[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxUnavailable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy411 := &x.MaxUnavailable
					yym412 := z.EncBinary()
					_ = yym412
					if false {
					} else if z.HasExtensions() && z.EncExt(yy411) {
					} else if !yym412 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy411)
					} else {
						z.EncFallback(yy411)
					}
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq407[1] {
					yy414 := &x.MaxSurge
					yym415 := z.EncBinary()
					_ = yym415
					if false {
					} else if z.HasExtensions() && z.EncExt(yy414) {
					} else if !yym415 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy414)
					} else {
						z.EncFallback(yy414)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq407[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxSurge"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy416 := &x.MaxSurge
					yym417 := z.EncBinary()
					_ = yym417
					if false {
					} else if z.HasExtensions() && z.EncExt(yy416) {
					} else if !yym417 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy416)
					} else {
						z.EncFallback(yy416)
					}
				}
			}
			if yyr407 || yy2arr407 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RollingUpdateDeployment) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym418 := z.DecBinary()
	_ = yym418
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct419 := r.ContainerType()
		if yyct419 == codecSelferValueTypeMap1234 {
			yyl419 := r.ReadMapStart()
			if yyl419 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl419, d)
			}
		} else if yyct419 == codecSelferValueTypeArray1234 {
			yyl419 := r.ReadArrayStart()
			if yyl419 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl419, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys420Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys420Slc
	var yyhl420 bool = l >= 0
	for yyj420 := 0; ; yyj420++ {
		if yyhl420 {
			if yyj420 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys420Slc = r.DecodeBytes(yys420Slc, true, true)
		yys420 := string(yys420Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys420 {
		case "maxUnavailable":
			if r.TryDecodeAsNil() {
				x.MaxUnavailable = pkg5_intstr.IntOrString{}
			} else {
				yyv421 := &x.MaxUnavailable
				yym422 := z.DecBinary()
				_ = yym422
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv421) {
				} else if !yym422 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv421)
				} else {
					z.DecFallback(yyv421, false)
				}
			}
		case "maxSurge":
			if r.TryDecodeAsNil() {
				x.MaxSurge = pkg5_intstr.IntOrString{}
			} else {
				yyv423 := &x.MaxSurge
				yym424 := z.DecBinary()
				_ = yym424
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv423) {
				} else if !yym424 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv423)
				} else {
					z.DecFallback(yyv423, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys420)
		} // end switch yys420
	} // end for yyj420
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RollingUpdateDeployment) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj425 int
	var yyb425 bool
	var yyhl425 bool = l >= 0
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxUnavailable = pkg5_intstr.IntOrString{}
	} else {
		yyv426 := &x.MaxUnavailable
		yym427 := z.DecBinary()
		_ = yym427
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv426) {
		} else if !yym427 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv426)
		} else {
			z.DecFallback(yyv426, false)
		}
	}
	yyj425++
	if yyhl425 {
		yyb425 = yyj425 > l
	} else {
		yyb425 = r.CheckBreak()
	}
	if yyb425 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxSurge = pkg5_intstr.IntOrString{}
	} else {
		yyv428 := &x.MaxSurge
		yym429 := z.DecBinary()
		_ = yym429
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv428) {
		} else if !yym429 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv428)
		} else {
			z.DecFallback(yyv428, false)
		}
	}
	for {
		yyj425++
		if yyhl425 {
			yyb425 = yyj425 > l
		} else {
			yyb425 = r.CheckBreak()
		}
		if yyb425 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj425-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym430 := z.EncBinary()
		_ = yym430
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep431 := !z.EncBinary()
			yy2arr431 := z.EncBasicHandle().StructToArray
			var yyq431 [5]bool
			_, _, _ = yysep431, yyq431, yy2arr431
			const yyr431 bool = false
			yyq431[0] = x.ObservedGeneration != 0
			yyq431[1] = x.Replicas != 0
			yyq431[2] = x.UpdatedReplicas != 0
			yyq431[3] = x.AvailableReplicas != 0
			yyq431[4] = x.UnavailableReplicas != 0
			var yynn431 int
			if yyr431 || yy2arr431 {
				r.EncodeArrayStart(5)
			} else {
				yynn431 = 0
				for _, b := range yyq431 {
					if b {
						yynn431++
					}
				}
				r.EncodeMapStart(yynn431)
				yynn431 = 0
			}
			if yyr431 || yy2arr431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq431[0] {
					yym433 := z.EncBinary()
					_ = yym433
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq431[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr431 || yy2arr431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq431[1] {
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq431[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym437 := z.EncBinary()
					_ = yym437
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr431 || yy2arr431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq431[2] {
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq431[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("updatedReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym440 := z.EncBinary()
					_ = yym440
					if false {
					} else {
						r.EncodeInt(int64(x.UpdatedReplicas))
					}
				}
			}
			if yyr431 || yy2arr431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq431[3] {
					yym442 := z.EncBinary()
					_ = yym442
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq431[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym443 := z.EncBinary()
					_ = yym443
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr431 || yy2arr431 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq431[4] {
					yym445 := z.EncBinary()
					_ = yym445
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq431[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unavailableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym446 := z.EncBinary()
					_ = yym446
					if false {
					} else {
						r.EncodeInt(int64(x.UnavailableReplicas))
					}
				}
			}
			if yyr431 || yy2arr431 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym447 := z.DecBinary()
	_ = yym447
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct448 := r.ContainerType()
		if yyct448 == codecSelferValueTypeMap1234 {
			yyl448 := r.ReadMapStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl448, d)
			}
		} else if yyct448 == codecSelferValueTypeArray1234 {
			yyl448 := r.ReadArrayStart()
			if yyl448 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl448, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys449Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys449Slc
	var yyhl449 bool = l >= 0
	for yyj449 := 0; ; yyj449++ {
		if yyhl449 {
			if yyj449 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys449Slc = r.DecodeBytes(yys449Slc, true, true)
		yys449 := string(yys449Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys449 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "updatedReplicas":
			if r.TryDecodeAsNil() {
				x.UpdatedReplicas = 0
			} else {
				x.UpdatedReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "unavailableReplicas":
			if r.TryDecodeAsNil() {
				x.UnavailableReplicas = 0
			} else {
				x.UnavailableReplicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys449)
		} // end switch yys449
	} // end for yyj449
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj455 int
	var yyb455 bool
	var yyhl455 bool = l >= 0
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UpdatedReplicas = 0
	} else {
		x.UpdatedReplicas = int32(r.DecodeInt(32))
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj455++
	if yyhl455 {
		yyb455 = yyj455 > l
	} else {
		yyb455 = r.CheckBreak()
	}
	if yyb455 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UnavailableReplicas = 0
	} else {
		x.UnavailableReplicas = int32(r.DecodeInt(32))
	}
	for {
		yyj455++
		if yyhl455 {
			yyb455 = yyj455 > l
		} else {
			yyb455 = r.CheckBreak()
		}
		if yyb455 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj455-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeploymentList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym461 := z.EncBinary()
		_ = yym461
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep462 := !z.EncBinary()
			yy2arr462 := z.EncBasicHandle().StructToArray
			var yyq462 [4]bool
			_, _, _ = yysep462, yyq462, yy2arr462
			const yyr462 bool = false
			yyq462[0] = x.Kind != ""
			yyq462[1] = x.APIVersion != ""
			yyq462[2] = true
			var yynn462 int
			if yyr462 || yy2arr462 {
				r.EncodeArrayStart(4)
			} else {
				yynn462 = 1
				for _, b := range yyq462 {
					if b {
						yynn462++
					}
				}
				r.EncodeMapStart(yynn462)
				yynn462 = 0
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[0] {
					yym464 := z.EncBinary()
					_ = yym464
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq462[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym465 := z.EncBinary()
					_ = yym465
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[1] {
					yym467 := z.EncBinary()
					_ = yym467
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq462[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym468 := z.EncBinary()
					_ = yym468
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq462[2] {
					yy470 := &x.ListMeta
					yym471 := z.EncBinary()
					_ = yym471
					if false {
					} else if z.HasExtensions() && z.EncExt(yy470) {
					} else {
						z.EncFallback(yy470)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq462[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy472 := &x.ListMeta
					yym473 := z.EncBinary()
					_ = yym473
					if false {
					} else if z.HasExtensions() && z.EncExt(yy472) {
					} else {
						z.EncFallback(yy472)
					}
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym475 := z.EncBinary()
					_ = yym475
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym476 := z.EncBinary()
					_ = yym476
					if false {
					} else {
						h.encSliceDeployment(([]Deployment)(x.Items), e)
					}
				}
			}
			if yyr462 || yy2arr462 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeploymentList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym477 := z.DecBinary()
	_ = yym477
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct478 := r.ContainerType()
		if yyct478 == codecSelferValueTypeMap1234 {
			yyl478 := r.ReadMapStart()
			if yyl478 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl478, d)
			}
		} else if yyct478 == codecSelferValueTypeArray1234 {
			yyl478 := r.ReadArrayStart()
			if yyl478 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl478, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeploymentList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys479Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys479Slc
	var yyhl479 bool = l >= 0
	for yyj479 := 0; ; yyj479++ {
		if yyhl479 {
			if yyj479 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys479Slc = r.DecodeBytes(yys479Slc, true, true)
		yys479 := string(yys479Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys479 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv482 := &x.ListMeta
				yym483 := z.DecBinary()
				_ = yym483
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv482) {
				} else {
					z.DecFallback(yyv482, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv484 := &x.Items
				yym485 := z.DecBinary()
				_ = yym485
				if false {
				} else {
					h.decSliceDeployment((*[]Deployment)(yyv484), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys479)
		} // end switch yys479
	} // end for yyj479
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeploymentList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj486 int
	var yyb486 bool
	var yyhl486 bool = l >= 0
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv489 := &x.ListMeta
		yym490 := z.DecBinary()
		_ = yym490
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv489) {
		} else {
			z.DecFallback(yyv489, false)
		}
	}
	yyj486++
	if yyhl486 {
		yyb486 = yyj486 > l
	} else {
		yyb486 = r.CheckBreak()
	}
	if yyb486 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv491 := &x.Items
		yym492 := z.DecBinary()
		_ = yym492
		if false {
		} else {
			h.decSliceDeployment((*[]Deployment)(yyv491), d)
		}
	}
	for {
		yyj486++
		if yyhl486 {
			yyb486 = yyj486 > l
		} else {
			yyb486 = r.CheckBreak()
		}
		if yyb486 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj486-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym493 := z.EncBinary()
		_ = yym493
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep494 := !z.EncBinary()
			yy2arr494 := z.EncBasicHandle().StructToArray
			var yyq494 [2]bool
			_, _, _ = yysep494, yyq494, yy2arr494
			const yyr494 bool = false
			yyq494[0] = x.Selector != nil
			var yynn494 int
			if yyr494 || yy2arr494 {
				r.EncodeArrayStart(2)
			} else {
				yynn494 = 1
				for _, b := range yyq494 {
					if b {
						yynn494++
					}
				}
				r.EncodeMapStart(yynn494)
				yynn494 = 0
			}
			if yyr494 || yy2arr494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq494[0] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym496 := z.EncBinary()
						_ = yym496
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq494[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym497 := z.EncBinary()
						_ = yym497
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr494 || yy2arr494 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy499 := &x.Template
				yym500 := z.EncBinary()
				_ = yym500
				if false {
				} else if z.HasExtensions() && z.EncExt(yy499) {
				} else {
					z.EncFallback(yy499)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy501 := &x.Template
				yym502 := z.EncBinary()
				_ = yym502
				if false {
				} else if z.HasExtensions() && z.EncExt(yy501) {
				} else {
					z.EncFallback(yy501)
				}
			}
			if yyr494 || yy2arr494 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym503 := z.DecBinary()
	_ = yym503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct504 := r.ContainerType()
		if yyct504 == codecSelferValueTypeMap1234 {
			yyl504 := r.ReadMapStart()
			if yyl504 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl504, d)
			}
		} else if yyct504 == codecSelferValueTypeArray1234 {
			yyl504 := r.ReadArrayStart()
			if yyl504 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl504, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys505Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys505Slc
	var yyhl505 bool = l >= 0
	for yyj505 := 0; ; yyj505++ {
		if yyhl505 {
			if yyj505 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys505Slc = r.DecodeBytes(yys505Slc, true, true)
		yys505 := string(yys505Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys505 {
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym507 := z.DecBinary()
				_ = yym507
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv508 := &x.Template
				yym509 := z.DecBinary()
				_ = yym509
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv508) {
				} else {
					z.DecFallback(yyv508, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys505)
		} // end switch yys505
	} // end for yyj505
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj510 int
	var yyb510 bool
	var yyhl510 bool = l >= 0
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym512 := z.DecBinary()
		_ = yym512
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj510++
	if yyhl510 {
		yyb510 = yyj510 > l
	} else {
		yyb510 = r.CheckBreak()
	}
	if yyb510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv513 := &x.Template
		yym514 := z.DecBinary()
		_ = yym514
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv513) {
		} else {
			z.DecFallback(yyv513, false)
		}
	}
	for {
		yyj510++
		if yyhl510 {
			yyb510 = yyj510 > l
		} else {
			yyb510 = r.CheckBreak()
		}
		if yyb510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym515 := z.EncBinary()
		_ = yym515
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep516 := !z.EncBinary()
			yy2arr516 := z.EncBasicHandle().StructToArray
			var yyq516 [4]bool
			_, _, _ = yysep516, yyq516, yy2arr516
			const yyr516 bool = false
			var yynn516 int
			if yyr516 || yy2arr516 {
				r.EncodeArrayStart(4)
			} else {
				yynn516 = 4
				for _, b := range yyq516 {
					if b {
						yynn516++
					}
				}
				r.EncodeMapStart(yynn516)
				yynn516 = 0
			}
			if yyr516 || yy2arr516 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym518 := z.EncBinary()
				_ = yym518
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym519 := z.EncBinary()
				_ = yym519
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentNumberScheduled))
				}
			}
			if yyr516 || yy2arr516 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym521 := z.EncBinary()
				_ = yym521
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberMisscheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym522 := z.EncBinary()
				_ = yym522
				if false {
				} else {
					r.EncodeInt(int64(x.NumberMisscheduled))
				}
			}
			if yyr516 || yy2arr516 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym524 := z.EncBinary()
				_ = yym524
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredNumberScheduled"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym525 := z.EncBinary()
				_ = yym525
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredNumberScheduled))
				}
			}
			if yyr516 || yy2arr516 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym527 := z.EncBinary()
				_ = yym527
				if false {
				} else {
					r.EncodeInt(int64(x.NumberReady))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("numberReady"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym528 := z.EncBinary()
				_ = yym528
				if false {
				} else {
					r.EncodeInt(int64(x.NumberReady))
				}
			}
			if yyr516 || yy2arr516 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym529 := z.DecBinary()
	_ = yym529
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct530 := r.ContainerType()
		if yyct530 == codecSelferValueTypeMap1234 {
			yyl530 := r.ReadMapStart()
			if yyl530 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl530, d)
			}
		} else if yyct530 == codecSelferValueTypeArray1234 {
			yyl530 := r.ReadArrayStart()
			if yyl530 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl530, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys531Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys531Slc
	var yyhl531 bool = l >= 0
	for yyj531 := 0; ; yyj531++ {
		if yyhl531 {
			if yyj531 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys531Slc = r.DecodeBytes(yys531Slc, true, true)
		yys531 := string(yys531Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys531 {
		case "currentNumberScheduled":
			if r.TryDecodeAsNil() {
				x.CurrentNumberScheduled = 0
			} else {
				x.CurrentNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberMisscheduled":
			if r.TryDecodeAsNil() {
				x.NumberMisscheduled = 0
			} else {
				x.NumberMisscheduled = int32(r.DecodeInt(32))
			}
		case "desiredNumberScheduled":
			if r.TryDecodeAsNil() {
				x.DesiredNumberScheduled = 0
			} else {
				x.DesiredNumberScheduled = int32(r.DecodeInt(32))
			}
		case "numberReady":
			if r.TryDecodeAsNil() {
				x.NumberReady = 0
			} else {
				x.NumberReady = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys531)
		} // end switch yys531
	} // end for yyj531
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj536 int
	var yyb536 bool
	var yyhl536 bool = l >= 0
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentNumberScheduled = 0
	} else {
		x.CurrentNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberMisscheduled = 0
	} else {
		x.NumberMisscheduled = int32(r.DecodeInt(32))
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredNumberScheduled = 0
	} else {
		x.DesiredNumberScheduled = int32(r.DecodeInt(32))
	}
	yyj536++
	if yyhl536 {
		yyb536 = yyj536 > l
	} else {
		yyb536 = r.CheckBreak()
	}
	if yyb536 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NumberReady = 0
	} else {
		x.NumberReady = int32(r.DecodeInt(32))
	}
	for {
		yyj536++
		if yyhl536 {
			yyb536 = yyj536 > l
		} else {
			yyb536 = r.CheckBreak()
		}
		if yyb536 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj536-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym541 := z.EncBinary()
		_ = yym541
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep542 := !z.EncBinary()
			yy2arr542 := z.EncBasicHandle().StructToArray
			var yyq542 [5]bool
			_, _, _ = yysep542, yyq542, yy2arr542
			const yyr542 bool = false
			yyq542[0] = x.Kind != ""
			yyq542[1] = x.APIVersion != ""
			yyq542[2] = true
			yyq542[3] = true
			yyq542[4] = true
			var yynn542 int
			if yyr542 || yy2arr542 {
				r.EncodeArrayStart(5)
			} else {
				yynn542 = 0
				for _, b := range yyq542 {
					if b {
						yynn542++
					}
				}
				r.EncodeMapStart(yynn542)
				yynn542 = 0
			}
			if yyr542 || yy2arr542 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq542[0] {
					yym544 := z.EncBinary()
					_ = yym544
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq542[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym545 := z.EncBinary()
					_ = yym545
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr542 || yy2arr542 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq542[1] {
					yym547 := z.EncBinary()
					_ = yym547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq542[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym548 := z.EncBinary()
					_ = yym548
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr542 || yy2arr542 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq542[2] {
					yy550 := &x.ObjectMeta
					yym551 := z.EncBinary()
					_ = yym551
					if false {
					} else if z.HasExtensions() && z.EncExt(yy550) {
					} else {
						z.EncFallback(yy550)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq542[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy552 := &x.ObjectMeta
					yym553 := z.EncBinary()
					_ = yym553
					if false {
					} else if z.HasExtensions() && z.EncExt(yy552) {
					} else {
						z.EncFallback(yy552)
					}
				}
			}
			if yyr542 || yy2arr542 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq542[3] {
					yy555 := &x.Spec
					yy555.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq542[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy556 := &x.Spec
					yy556.CodecEncodeSelf(e)
				}
			}
			if yyr542 || yy2arr542 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq542[4] {
					yy558 := &x.Status
					yy558.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq542[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy559 := &x.Status
					yy559.CodecEncodeSelf(e)
				}
			}
			if yyr542 || yy2arr542 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym560 := z.DecBinary()
	_ = yym560
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct561 := r.ContainerType()
		if yyct561 == codecSelferValueTypeMap1234 {
			yyl561 := r.ReadMapStart()
			if yyl561 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl561, d)
			}
		} else if yyct561 == codecSelferValueTypeArray1234 {
			yyl561 := r.ReadArrayStart()
			if yyl561 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl561, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys562Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys562Slc
	var yyhl562 bool = l >= 0
	for yyj562 := 0; ; yyj562++ {
		if yyhl562 {
			if yyj562 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys562Slc = r.DecodeBytes(yys562Slc, true, true)
		yys562 := string(yys562Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys562 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv565 := &x.ObjectMeta
				yym566 := z.DecBinary()
				_ = yym566
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv565) {
				} else {
					z.DecFallback(yyv565, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = DaemonSetSpec{}
			} else {
				yyv567 := &x.Spec
				yyv567.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = DaemonSetStatus{}
			} else {
				yyv568 := &x.Status
				yyv568.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys562)
		} // end switch yys562
	} // end for yyj562
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj569 int
	var yyb569 bool
	var yyhl569 bool = l >= 0
	yyj569++
	if yyhl569 {
		yyb569 = yyj569 > l
	} else {
		yyb569 = r.CheckBreak()
	}
	if yyb569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj569++
	if yyhl569 {
		yyb569 = yyj569 > l
	} else {
		yyb569 = r.CheckBreak()
	}
	if yyb569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj569++
	if yyhl569 {
		yyb569 = yyj569 > l
	} else {
		yyb569 = r.CheckBreak()
	}
	if yyb569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv572 := &x.ObjectMeta
		yym573 := z.DecBinary()
		_ = yym573
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv572) {
		} else {
			z.DecFallback(yyv572, false)
		}
	}
	yyj569++
	if yyhl569 {
		yyb569 = yyj569 > l
	} else {
		yyb569 = r.CheckBreak()
	}
	if yyb569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = DaemonSetSpec{}
	} else {
		yyv574 := &x.Spec
		yyv574.CodecDecodeSelf(d)
	}
	yyj569++
	if yyhl569 {
		yyb569 = yyj569 > l
	} else {
		yyb569 = r.CheckBreak()
	}
	if yyb569 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = DaemonSetStatus{}
	} else {
		yyv575 := &x.Status
		yyv575.CodecDecodeSelf(d)
	}
	for {
		yyj569++
		if yyhl569 {
			yyb569 = yyj569 > l
		} else {
			yyb569 = r.CheckBreak()
		}
		if yyb569 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj569-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym576 := z.EncBinary()
		_ = yym576
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep577 := !z.EncBinary()
			yy2arr577 := z.EncBasicHandle().StructToArray
			var yyq577 [4]bool
			_, _, _ = yysep577, yyq577, yy2arr577
			const yyr577 bool = false
			yyq577[0] = x.Kind != ""
			yyq577[1] = x.APIVersion != ""
			yyq577[2] = true
			var yynn577 int
			if yyr577 || yy2arr577 {
				r.EncodeArrayStart(4)
			} else {
				yynn577 = 1
				for _, b := range yyq577 {
					if b {
						yynn577++
					}
				}
				r.EncodeMapStart(yynn577)
				yynn577 = 0
			}
			if yyr577 || yy2arr577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq577[0] {
					yym579 := z.EncBinary()
					_ = yym579
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq577[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym580 := z.EncBinary()
					_ = yym580
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr577 || yy2arr577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq577[1] {
					yym582 := z.EncBinary()
					_ = yym582
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq577[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym583 := z.EncBinary()
					_ = yym583
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr577 || yy2arr577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq577[2] {
					yy585 := &x.ListMeta
					yym586 := z.EncBinary()
					_ = yym586
					if false {
					} else if z.HasExtensions() && z.EncExt(yy585) {
					} else {
						z.EncFallback(yy585)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq577[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy587 := &x.ListMeta
					yym588 := z.EncBinary()
					_ = yym588
					if false {
					} else if z.HasExtensions() && z.EncExt(yy587) {
					} else {
						z.EncFallback(yy587)
					}
				}
			}
			if yyr577 || yy2arr577 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym590 := z.EncBinary()
					_ = yym590
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym591 := z.EncBinary()
					_ = yym591
					if false {
					} else {
						h.encSliceDaemonSet(([]DaemonSet)(x.Items), e)
					}
				}
			}
			if yyr577 || yy2arr577 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym592 := z.DecBinary()
	_ = yym592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct593 := r.ContainerType()
		if yyct593 == codecSelferValueTypeMap1234 {
			yyl593 := r.ReadMapStart()
			if yyl593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl593, d)
			}
		} else if yyct593 == codecSelferValueTypeArray1234 {
			yyl593 := r.ReadArrayStart()
			if yyl593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys594Slc
	var yyhl594 bool = l >= 0
	for yyj594 := 0; ; yyj594++ {
		if yyhl594 {
			if yyj594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys594Slc = r.DecodeBytes(yys594Slc, true, true)
		yys594 := string(yys594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys594 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv597 := &x.ListMeta
				yym598 := z.DecBinary()
				_ = yym598
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv597) {
				} else {
					z.DecFallback(yyv597, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv599 := &x.Items
				yym600 := z.DecBinary()
				_ = yym600
				if false {
				} else {
					h.decSliceDaemonSet((*[]DaemonSet)(yyv599), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys594)
		} // end switch yys594
	} // end for yyj594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj601 int
	var yyb601 bool
	var yyhl601 bool = l >= 0
	yyj601++
	if yyhl601 {
		yyb601 = yyj601 > l
	} else {
		yyb601 = r.CheckBreak()
	}
	if yyb601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj601++
	if yyhl601 {
		yyb601 = yyj601 > l
	} else {
		yyb601 = r.CheckBreak()
	}
	if yyb601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj601++
	if yyhl601 {
		yyb601 = yyj601 > l
	} else {
		yyb601 = r.CheckBreak()
	}
	if yyb601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv604 := &x.ListMeta
		yym605 := z.DecBinary()
		_ = yym605
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv604) {
		} else {
			z.DecFallback(yyv604, false)
		}
	}
	yyj601++
	if yyhl601 {
		yyb601 = yyj601 > l
	} else {
		yyb601 = r.CheckBreak()
	}
	if yyb601 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv606 := &x.Items
		yym607 := z.DecBinary()
		_ = yym607
		if false {
		} else {
			h.decSliceDaemonSet((*[]DaemonSet)(yyv606), d)
		}
	}
	for {
		yyj601++
		if yyhl601 {
			yyb601 = yyj601 > l
		} else {
			yyb601 = r.CheckBreak()
		}
		if yyb601 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj601-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ThirdPartyResourceDataList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym608 := z.EncBinary()
		_ = yym608
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep609 := !z.EncBinary()
			yy2arr609 := z.EncBasicHandle().StructToArray
			var yyq609 [4]bool
			_, _, _ = yysep609, yyq609, yy2arr609
			const yyr609 bool = false
			yyq609[0] = x.Kind != ""
			yyq609[1] = x.APIVersion != ""
			yyq609[2] = true
			var yynn609 int
			if yyr609 || yy2arr609 {
				r.EncodeArrayStart(4)
			} else {
				yynn609 = 1
				for _, b := range yyq609 {
					if b {
						yynn609++
					}
				}
				r.EncodeMapStart(yynn609)
				yynn609 = 0
			}
			if yyr609 || yy2arr609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq609[0] {
					yym611 := z.EncBinary()
					_ = yym611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq609[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym612 := z.EncBinary()
					_ = yym612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr609 || yy2arr609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq609[1] {
					yym614 := z.EncBinary()
					_ = yym614
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq609[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym615 := z.EncBinary()
					_ = yym615
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr609 || yy2arr609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq609[2] {
					yy617 := &x.ListMeta
					yym618 := z.EncBinary()
					_ = yym618
					if false {
					} else if z.HasExtensions() && z.EncExt(yy617) {
					} else {
						z.EncFallback(yy617)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq609[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy619 := &x.ListMeta
					yym620 := z.EncBinary()
					_ = yym620
					if false {
					} else if z.HasExtensions() && z.EncExt(yy619) {
					} else {
						z.EncFallback(yy619)
					}
				}
			}
			if yyr609 || yy2arr609 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym622 := z.EncBinary()
					_ = yym622
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym623 := z.EncBinary()
					_ = yym623
					if false {
					} else {
						h.encSliceThirdPartyResourceData(([]ThirdPartyResourceData)(x.Items), e)
					}
				}
			}
			if yyr609 || yy2arr609 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ThirdPartyResourceDataList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym624 := z.DecBinary()
	_ = yym624
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct625 := r.ContainerType()
		if yyct625 == codecSelferValueTypeMap1234 {
			yyl625 := r.ReadMapStart()
			if yyl625 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl625, d)
			}
		} else if yyct625 == codecSelferValueTypeArray1234 {
			yyl625 := r.ReadArrayStart()
			if yyl625 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl625, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys626Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys626Slc
	var yyhl626 bool = l >= 0
	for yyj626 := 0; ; yyj626++ {
		if yyhl626 {
			if yyj626 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys626Slc = r.DecodeBytes(yys626Slc, true, true)
		yys626 := string(yys626Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys626 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv629 := &x.ListMeta
				yym630 := z.DecBinary()
				_ = yym630
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv629) {
				} else {
					z.DecFallback(yyv629, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv631 := &x.Items
				yym632 := z.DecBinary()
				_ = yym632
				if false {
				} else {
					h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv631), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys626)
		} // end switch yys626
	} // end for yyj626
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ThirdPartyResourceDataList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj633 int
	var yyb633 bool
	var yyhl633 bool = l >= 0
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv636 := &x.ListMeta
		yym637 := z.DecBinary()
		_ = yym637
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv636) {
		} else {
			z.DecFallback(yyv636, false)
		}
	}
	yyj633++
	if yyhl633 {
		yyb633 = yyj633 > l
	} else {
		yyb633 = r.CheckBreak()
	}
	if yyb633 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv638 := &x.Items
		yym639 := z.DecBinary()
		_ = yym639
		if false {
		} else {
			h.decSliceThirdPartyResourceData((*[]ThirdPartyResourceData)(yyv638), d)
		}
	}
	for {
		yyj633++
		if yyhl633 {
			yyb633 = yyj633 > l
		} else {
			yyb633 = r.CheckBreak()
		}
		if yyb633 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj633-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Ingress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym640 := z.EncBinary()
		_ = yym640
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep641 := !z.EncBinary()
			yy2arr641 := z.EncBasicHandle().StructToArray
			var yyq641 [5]bool
			_, _, _ = yysep641, yyq641, yy2arr641
			const yyr641 bool = false
			yyq641[0] = x.Kind != ""
			yyq641[1] = x.APIVersion != ""
			yyq641[2] = true
			yyq641[3] = true
			yyq641[4] = true
			var yynn641 int
			if yyr641 || yy2arr641 {
				r.EncodeArrayStart(5)
			} else {
				yynn641 = 0
				for _, b := range yyq641 {
					if b {
						yynn641++
					}
				}
				r.EncodeMapStart(yynn641)
				yynn641 = 0
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq641[0] {
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq641[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym644 := z.EncBinary()
					_ = yym644
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq641[1] {
					yym646 := z.EncBinary()
					_ = yym646
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq641[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym647 := z.EncBinary()
					_ = yym647
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq641[2] {
					yy649 := &x.ObjectMeta
					yym650 := z.EncBinary()
					_ = yym650
					if false {
					} else if z.HasExtensions() && z.EncExt(yy649) {
					} else {
						z.EncFallback(yy649)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq641[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy651 := &x.ObjectMeta
					yym652 := z.EncBinary()
					_ = yym652
					if false {
					} else if z.HasExtensions() && z.EncExt(yy651) {
					} else {
						z.EncFallback(yy651)
					}
				}
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq641[3] {
					yy654 := &x.Spec
					yy654.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq641[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy655 := &x.Spec
					yy655.CodecEncodeSelf(e)
				}
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq641[4] {
					yy657 := &x.Status
					yy657.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq641[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy658 := &x.Status
					yy658.CodecEncodeSelf(e)
				}
			}
			if yyr641 || yy2arr641 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Ingress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym659 := z.DecBinary()
	_ = yym659
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct660 := r.ContainerType()
		if yyct660 == codecSelferValueTypeMap1234 {
			yyl660 := r.ReadMapStart()
			if yyl660 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl660, d)
			}
		} else if yyct660 == codecSelferValueTypeArray1234 {
			yyl660 := r.ReadArrayStart()
			if yyl660 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl660, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Ingress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys661Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys661Slc
	var yyhl661 bool = l >= 0
	for yyj661 := 0; ; yyj661++ {
		if yyhl661 {
			if yyj661 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys661Slc = r.DecodeBytes(yys661Slc, true, true)
		yys661 := string(yys661Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys661 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv664 := &x.ObjectMeta
				yym665 := z.DecBinary()
				_ = yym665
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv664) {
				} else {
					z.DecFallback(yyv664, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = IngressSpec{}
			} else {
				yyv666 := &x.Spec
				yyv666.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = IngressStatus{}
			} else {
				yyv667 := &x.Status
				yyv667.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys661)
		} // end switch yys661
	} // end for yyj661
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Ingress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj668 int
	var yyb668 bool
	var yyhl668 bool = l >= 0
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv671 := &x.ObjectMeta
		yym672 := z.DecBinary()
		_ = yym672
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv671) {
		} else {
			z.DecFallback(yyv671, false)
		}
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = IngressSpec{}
	} else {
		yyv673 := &x.Spec
		yyv673.CodecDecodeSelf(d)
	}
	yyj668++
	if yyhl668 {
		yyb668 = yyj668 > l
	} else {
		yyb668 = r.CheckBreak()
	}
	if yyb668 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = IngressStatus{}
	} else {
		yyv674 := &x.Status
		yyv674.CodecDecodeSelf(d)
	}
	for {
		yyj668++
		if yyhl668 {
			yyb668 = yyj668 > l
		} else {
			yyb668 = r.CheckBreak()
		}
		if yyb668 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj668-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym675 := z.EncBinary()
		_ = yym675
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep676 := !z.EncBinary()
			yy2arr676 := z.EncBasicHandle().StructToArray
			var yyq676 [4]bool
			_, _, _ = yysep676, yyq676, yy2arr676
			const yyr676 bool = false
			yyq676[0] = x.Kind != ""
			yyq676[1] = x.APIVersion != ""
			yyq676[2] = true
			var yynn676 int
			if yyr676 || yy2arr676 {
				r.EncodeArrayStart(4)
			} else {
				yynn676 = 1
				for _, b := range yyq676 {
					if b {
						yynn676++
					}
				}
				r.EncodeMapStart(yynn676)
				yynn676 = 0
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq676[0] {
					yym678 := z.EncBinary()
					_ = yym678
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq676[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym679 := z.EncBinary()
					_ = yym679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq676[1] {
					yym681 := z.EncBinary()
					_ = yym681
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq676[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym682 := z.EncBinary()
					_ = yym682
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq676[2] {
					yy684 := &x.ListMeta
					yym685 := z.EncBinary()
					_ = yym685
					if false {
					} else if z.HasExtensions() && z.EncExt(yy684) {
					} else {
						z.EncFallback(yy684)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq676[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy686 := &x.ListMeta
					yym687 := z.EncBinary()
					_ = yym687
					if false {
					} else if z.HasExtensions() && z.EncExt(yy686) {
					} else {
						z.EncFallback(yy686)
					}
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym689 := z.EncBinary()
					_ = yym689
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym690 := z.EncBinary()
					_ = yym690
					if false {
					} else {
						h.encSliceIngress(([]Ingress)(x.Items), e)
					}
				}
			}
			if yyr676 || yy2arr676 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym691 := z.DecBinary()
	_ = yym691
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct692 := r.ContainerType()
		if yyct692 == codecSelferValueTypeMap1234 {
			yyl692 := r.ReadMapStart()
			if yyl692 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl692, d)
			}
		} else if yyct692 == codecSelferValueTypeArray1234 {
			yyl692 := r.ReadArrayStart()
			if yyl692 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl692, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys693Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys693Slc
	var yyhl693 bool = l >= 0
	for yyj693 := 0; ; yyj693++ {
		if yyhl693 {
			if yyj693 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys693Slc = r.DecodeBytes(yys693Slc, true, true)
		yys693 := string(yys693Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys693 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv696 := &x.ListMeta
				yym697 := z.DecBinary()
				_ = yym697
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv696) {
				} else {
					z.DecFallback(yyv696, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv698 := &x.Items
				yym699 := z.DecBinary()
				_ = yym699
				if false {
				} else {
					h.decSliceIngress((*[]Ingress)(yyv698), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys693)
		} // end switch yys693
	} // end for yyj693
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj700 int
	var yyb700 bool
	var yyhl700 bool = l >= 0
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv703 := &x.ListMeta
		yym704 := z.DecBinary()
		_ = yym704
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv703) {
		} else {
			z.DecFallback(yyv703, false)
		}
	}
	yyj700++
	if yyhl700 {
		yyb700 = yyj700 > l
	} else {
		yyb700 = r.CheckBreak()
	}
	if yyb700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv705 := &x.Items
		yym706 := z.DecBinary()
		_ = yym706
		if false {
		} else {
			h.decSliceIngress((*[]Ingress)(yyv705), d)
		}
	}
	for {
		yyj700++
		if yyhl700 {
			yyb700 = yyj700 > l
		} else {
			yyb700 = r.CheckBreak()
		}
		if yyb700 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj700-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym707 := z.EncBinary()
		_ = yym707
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep708 := !z.EncBinary()
			yy2arr708 := z.EncBasicHandle().StructToArray
			var yyq708 [3]bool
			_, _, _ = yysep708, yyq708, yy2arr708
			const yyr708 bool = false
			yyq708[0] = x.Backend != nil
			yyq708[1] = len(x.TLS) != 0
			yyq708[2] = len(x.Rules) != 0
			var yynn708 int
			if yyr708 || yy2arr708 {
				r.EncodeArrayStart(3)
			} else {
				yynn708 = 0
				for _, b := range yyq708 {
					if b {
						yynn708++
					}
				}
				r.EncodeMapStart(yynn708)
				yynn708 = 0
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq708[0] {
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq708[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("backend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Backend == nil {
						r.EncodeNil()
					} else {
						x.Backend.CodecEncodeSelf(e)
					}
				}
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq708[1] {
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym711 := z.EncBinary()
						_ = yym711
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq708[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tls"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TLS == nil {
						r.EncodeNil()
					} else {
						yym712 := z.EncBinary()
						_ = yym712
						if false {
						} else {
							h.encSliceIngressTLS(([]IngressTLS)(x.TLS), e)
						}
					}
				}
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq708[2] {
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym714 := z.EncBinary()
						_ = yym714
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq708[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rules"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Rules == nil {
						r.EncodeNil()
					} else {
						yym715 := z.EncBinary()
						_ = yym715
						if false {
						} else {
							h.encSliceIngressRule(([]IngressRule)(x.Rules), e)
						}
					}
				}
			}
			if yyr708 || yy2arr708 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym716 := z.DecBinary()
	_ = yym716
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct717 := r.ContainerType()
		if yyct717 == codecSelferValueTypeMap1234 {
			yyl717 := r.ReadMapStart()
			if yyl717 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl717, d)
			}
		} else if yyct717 == codecSelferValueTypeArray1234 {
			yyl717 := r.ReadArrayStart()
			if yyl717 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl717, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys718Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys718Slc
	var yyhl718 bool = l >= 0
	for yyj718 := 0; ; yyj718++ {
		if yyhl718 {
			if yyj718 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys718Slc = r.DecodeBytes(yys718Slc, true, true)
		yys718 := string(yys718Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys718 {
		case "backend":
			if r.TryDecodeAsNil() {
				if x.Backend != nil {
					x.Backend = nil
				}
			} else {
				if x.Backend == nil {
					x.Backend = new(IngressBackend)
				}
				x.Backend.CodecDecodeSelf(d)
			}
		case "tls":
			if r.TryDecodeAsNil() {
				x.TLS = nil
			} else {
				yyv720 := &x.TLS
				yym721 := z.DecBinary()
				_ = yym721
				if false {
				} else {
					h.decSliceIngressTLS((*[]IngressTLS)(yyv720), d)
				}
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv722 := &x.Rules
				yym723 := z.DecBinary()
				_ = yym723
				if false {
				} else {
					h.decSliceIngressRule((*[]IngressRule)(yyv722), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys718)
		} // end switch yys718
	} // end for yyj718
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj724 int
	var yyb724 bool
	var yyhl724 bool = l >= 0
	yyj724++
	if yyhl724 {
		yyb724 = yyj724 > l
	} else {
		yyb724 = r.CheckBreak()
	}
	if yyb724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Backend != nil {
			x.Backend = nil
		}
	} else {
		if x.Backend == nil {
			x.Backend = new(IngressBackend)
		}
		x.Backend.CodecDecodeSelf(d)
	}
	yyj724++
	if yyhl724 {
		yyb724 = yyj724 > l
	} else {
		yyb724 = r.CheckBreak()
	}
	if yyb724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TLS = nil
	} else {
		yyv726 := &x.TLS
		yym727 := z.DecBinary()
		_ = yym727
		if false {
		} else {
			h.decSliceIngressTLS((*[]IngressTLS)(yyv726), d)
		}
	}
	yyj724++
	if yyhl724 {
		yyb724 = yyj724 > l
	} else {
		yyb724 = r.CheckBreak()
	}
	if yyb724 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv728 := &x.Rules
		yym729 := z.DecBinary()
		_ = yym729
		if false {
		} else {
			h.decSliceIngressRule((*[]IngressRule)(yyv728), d)
		}
	}
	for {
		yyj724++
		if yyhl724 {
			yyb724 = yyj724 > l
		} else {
			yyb724 = r.CheckBreak()
		}
		if yyb724 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj724-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressTLS) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym730 := z.EncBinary()
		_ = yym730
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep731 := !z.EncBinary()
			yy2arr731 := z.EncBasicHandle().StructToArray
			var yyq731 [2]bool
			_, _, _ = yysep731, yyq731, yy2arr731
			const yyr731 bool = false
			yyq731[0] = len(x.Hosts) != 0
			yyq731[1] = x.SecretName != ""
			var yynn731 int
			if yyr731 || yy2arr731 {
				r.EncodeArrayStart(2)
			} else {
				yynn731 = 0
				for _, b := range yyq731 {
					if b {
						yynn731++
					}
				}
				r.EncodeMapStart(yynn731)
				yynn731 = 0
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq731[0] {
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym733 := z.EncBinary()
						_ = yym733
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq731[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hosts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hosts == nil {
						r.EncodeNil()
					} else {
						yym734 := z.EncBinary()
						_ = yym734
						if false {
						} else {
							z.F.EncSliceStringV(x.Hosts, false, e)
						}
					}
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq731[1] {
					yym736 := z.EncBinary()
					_ = yym736
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq731[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym737 := z.EncBinary()
					_ = yym737
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr731 || yy2arr731 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressTLS) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym738 := z.DecBinary()
	_ = yym738
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct739 := r.ContainerType()
		if yyct739 == codecSelferValueTypeMap1234 {
			yyl739 := r.ReadMapStart()
			if yyl739 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl739, d)
			}
		} else if yyct739 == codecSelferValueTypeArray1234 {
			yyl739 := r.ReadArrayStart()
			if yyl739 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl739, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressTLS) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys740Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys740Slc
	var yyhl740 bool = l >= 0
	for yyj740 := 0; ; yyj740++ {
		if yyhl740 {
			if yyj740 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys740Slc = r.DecodeBytes(yys740Slc, true, true)
		yys740 := string(yys740Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys740 {
		case "hosts":
			if r.TryDecodeAsNil() {
				x.Hosts = nil
			} else {
				yyv741 := &x.Hosts
				yym742 := z.DecBinary()
				_ = yym742
				if false {
				} else {
					z.F.DecSliceStringX(yyv741, false, d)
				}
			}
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys740)
		} // end switch yys740
	} // end for yyj740
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressTLS) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj744 int
	var yyb744 bool
	var yyhl744 bool = l >= 0
	yyj744++
	if yyhl744 {
		yyb744 = yyj744 > l
	} else {
		yyb744 = r.CheckBreak()
	}
	if yyb744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hosts = nil
	} else {
		yyv745 := &x.Hosts
		yym746 := z.DecBinary()
		_ = yym746
		if false {
		} else {
			z.F.DecSliceStringX(yyv745, false, d)
		}
	}
	yyj744++
	if yyhl744 {
		yyb744 = yyj744 > l
	} else {
		yyb744 = r.CheckBreak()
	}
	if yyb744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	for {
		yyj744++
		if yyhl744 {
			yyb744 = yyj744 > l
		} else {
			yyb744 = r.CheckBreak()
		}
		if yyb744 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj744-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym748 := z.EncBinary()
		_ = yym748
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep749 := !z.EncBinary()
			yy2arr749 := z.EncBasicHandle().StructToArray
			var yyq749 [1]bool
			_, _, _ = yysep749, yyq749, yy2arr749
			const yyr749 bool = false
			yyq749[0] = true
			var yynn749 int
			if yyr749 || yy2arr749 {
				r.EncodeArrayStart(1)
			} else {
				yynn749 = 0
				for _, b := range yyq749 {
					if b {
						yynn749++
					}
				}
				r.EncodeMapStart(yynn749)
				yynn749 = 0
			}
			if yyr749 || yy2arr749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq749[0] {
					yy751 := &x.LoadBalancer
					yym752 := z.EncBinary()
					_ = yym752
					if false {
					} else if z.HasExtensions() && z.EncExt(yy751) {
					} else {
						z.EncFallback(yy751)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq749[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy753 := &x.LoadBalancer
					yym754 := z.EncBinary()
					_ = yym754
					if false {
					} else if z.HasExtensions() && z.EncExt(yy753) {
					} else {
						z.EncFallback(yy753)
					}
				}
			}
			if yyr749 || yy2arr749 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym755 := z.DecBinary()
	_ = yym755
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct756 := r.ContainerType()
		if yyct756 == codecSelferValueTypeMap1234 {
			yyl756 := r.ReadMapStart()
			if yyl756 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl756, d)
			}
		} else if yyct756 == codecSelferValueTypeArray1234 {
			yyl756 := r.ReadArrayStart()
			if yyl756 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl756, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys757Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys757Slc
	var yyhl757 bool = l >= 0
	for yyj757 := 0; ; yyj757++ {
		if yyhl757 {
			if yyj757 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys757Slc = r.DecodeBytes(yys757Slc, true, true)
		yys757 := string(yys757Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys757 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
			} else {
				yyv758 := &x.LoadBalancer
				yym759 := z.DecBinary()
				_ = yym759
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv758) {
				} else {
					z.DecFallback(yyv758, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys757)
		} // end switch yys757
	} // end for yyj757
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj760 int
	var yyb760 bool
	var yyhl760 bool = l >= 0
	yyj760++
	if yyhl760 {
		yyb760 = yyj760 > l
	} else {
		yyb760 = r.CheckBreak()
	}
	if yyb760 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = pkg2_api.LoadBalancerStatus{}
	} else {
		yyv761 := &x.LoadBalancer
		yym762 := z.DecBinary()
		_ = yym762
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv761) {
		} else {
			z.DecFallback(yyv761, false)
		}
	}
	for {
		yyj760++
		if yyhl760 {
			yyb760 = yyj760 > l
		} else {
			yyb760 = r.CheckBreak()
		}
		if yyb760 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj760-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym763 := z.EncBinary()
		_ = yym763
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep764 := !z.EncBinary()
			yy2arr764 := z.EncBasicHandle().StructToArray
			var yyq764 [2]bool
			_, _, _ = yysep764, yyq764, yy2arr764
			const yyr764 bool = false
			yyq764[0] = x.Host != ""
			yyq764[1] = x.IngressRuleValue.HTTP != nil && x.HTTP != nil
			var yynn764 int
			if yyr764 || yy2arr764 {
				r.EncodeArrayStart(2)
			} else {
				yynn764 = 0
				for _, b := range yyq764 {
					if b {
						yynn764++
					}
				}
				r.EncodeMapStart(yynn764)
				yynn764 = 0
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq764[0] {
					yym766 := z.EncBinary()
					_ = yym766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq764[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym767 := z.EncBinary()
					_ = yym767
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			var yyn768 bool
			if x.IngressRuleValue.HTTP == nil {
				yyn768 = true
				goto LABEL768
			}
		LABEL768:
			if yyr764 || yy2arr764 {
				if yyn768 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq764[1] {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq764[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn768 {
						r.EncodeNil()
					} else {
						if x.HTTP == nil {
							r.EncodeNil()
						} else {
							x.HTTP.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr764 || yy2arr764 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym769 := z.DecBinary()
	_ = yym769
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct770 := r.ContainerType()
		if yyct770 == codecSelferValueTypeMap1234 {
			yyl770 := r.ReadMapStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl770, d)
			}
		} else if yyct770 == codecSelferValueTypeArray1234 {
			yyl770 := r.ReadArrayStart()
			if yyl770 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl770, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys771Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys771Slc
	var yyhl771 bool = l >= 0
	for yyj771 := 0; ; yyj771++ {
		if yyhl771 {
			if yyj771 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys771Slc = r.DecodeBytes(yys771Slc, true, true)
		yys771 := string(yys771Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys771 {
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "http":
			if x.IngressRuleValue.HTTP == nil {
				x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
			}
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys771)
		} // end switch yys771
	} // end for yyj771
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj774 int
	var yyb774 bool
	var yyhl774 bool = l >= 0
	yyj774++
	if yyhl774 {
		yyb774 = yyj774 > l
	} else {
		yyb774 = r.CheckBreak()
	}
	if yyb774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	if x.IngressRuleValue.HTTP == nil {
		x.IngressRuleValue.HTTP = new(HTTPIngressRuleValue)
	}
	yyj774++
	if yyhl774 {
		yyb774 = yyj774 > l
	} else {
		yyb774 = r.CheckBreak()
	}
	if yyb774 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj774++
		if yyhl774 {
			yyb774 = yyj774 > l
		} else {
			yyb774 = r.CheckBreak()
		}
		if yyb774 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj774-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym777 := z.EncBinary()
		_ = yym777
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep778 := !z.EncBinary()
			yy2arr778 := z.EncBasicHandle().StructToArray
			var yyq778 [1]bool
			_, _, _ = yysep778, yyq778, yy2arr778
			const yyr778 bool = false
			yyq778[0] = x.HTTP != nil
			var yynn778 int
			if yyr778 || yy2arr778 {
				r.EncodeArrayStart(1)
			} else {
				yynn778 = 0
				for _, b := range yyq778 {
					if b {
						yynn778++
					}
				}
				r.EncodeMapStart(yynn778)
				yynn778 = 0
			}
			if yyr778 || yy2arr778 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq778[0] {
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq778[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("http"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTP == nil {
						r.EncodeNil()
					} else {
						x.HTTP.CodecEncodeSelf(e)
					}
				}
			}
			if yyr778 || yy2arr778 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym780 := z.DecBinary()
	_ = yym780
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct781 := r.ContainerType()
		if yyct781 == codecSelferValueTypeMap1234 {
			yyl781 := r.ReadMapStart()
			if yyl781 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl781, d)
			}
		} else if yyct781 == codecSelferValueTypeArray1234 {
			yyl781 := r.ReadArrayStart()
			if yyl781 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl781, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys782Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys782Slc
	var yyhl782 bool = l >= 0
	for yyj782 := 0; ; yyj782++ {
		if yyhl782 {
			if yyj782 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys782Slc = r.DecodeBytes(yys782Slc, true, true)
		yys782 := string(yys782Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys782 {
		case "http":
			if r.TryDecodeAsNil() {
				if x.HTTP != nil {
					x.HTTP = nil
				}
			} else {
				if x.HTTP == nil {
					x.HTTP = new(HTTPIngressRuleValue)
				}
				x.HTTP.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys782)
		} // end switch yys782
	} // end for yyj782
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj784 int
	var yyb784 bool
	var yyhl784 bool = l >= 0
	yyj784++
	if yyhl784 {
		yyb784 = yyj784 > l
	} else {
		yyb784 = r.CheckBreak()
	}
	if yyb784 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTP != nil {
			x.HTTP = nil
		}
	} else {
		if x.HTTP == nil {
			x.HTTP = new(HTTPIngressRuleValue)
		}
		x.HTTP.CodecDecodeSelf(d)
	}
	for {
		yyj784++
		if yyhl784 {
			yyb784 = yyj784 > l
		} else {
			yyb784 = r.CheckBreak()
		}
		if yyb784 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj784-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressRuleValue) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym786 := z.EncBinary()
		_ = yym786
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep787 := !z.EncBinary()
			yy2arr787 := z.EncBasicHandle().StructToArray
			var yyq787 [1]bool
			_, _, _ = yysep787, yyq787, yy2arr787
			const yyr787 bool = false
			var yynn787 int
			if yyr787 || yy2arr787 {
				r.EncodeArrayStart(1)
			} else {
				yynn787 = 1
				for _, b := range yyq787 {
					if b {
						yynn787++
					}
				}
				r.EncodeMapStart(yynn787)
				yynn787 = 0
			}
			if yyr787 || yy2arr787 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym789 := z.EncBinary()
					_ = yym789
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("paths"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Paths == nil {
					r.EncodeNil()
				} else {
					yym790 := z.EncBinary()
					_ = yym790
					if false {
					} else {
						h.encSliceHTTPIngressPath(([]HTTPIngressPath)(x.Paths), e)
					}
				}
			}
			if yyr787 || yy2arr787 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressRuleValue) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym791 := z.DecBinary()
	_ = yym791
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct792 := r.ContainerType()
		if yyct792 == codecSelferValueTypeMap1234 {
			yyl792 := r.ReadMapStart()
			if yyl792 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl792, d)
			}
		} else if yyct792 == codecSelferValueTypeArray1234 {
			yyl792 := r.ReadArrayStart()
			if yyl792 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl792, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys793Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys793Slc
	var yyhl793 bool = l >= 0
	for yyj793 := 0; ; yyj793++ {
		if yyhl793 {
			if yyj793 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys793Slc = r.DecodeBytes(yys793Slc, true, true)
		yys793 := string(yys793Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys793 {
		case "paths":
			if r.TryDecodeAsNil() {
				x.Paths = nil
			} else {
				yyv794 := &x.Paths
				yym795 := z.DecBinary()
				_ = yym795
				if false {
				} else {
					h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv794), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys793)
		} // end switch yys793
	} // end for yyj793
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressRuleValue) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj796 int
	var yyb796 bool
	var yyhl796 bool = l >= 0
	yyj796++
	if yyhl796 {
		yyb796 = yyj796 > l
	} else {
		yyb796 = r.CheckBreak()
	}
	if yyb796 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Paths = nil
	} else {
		yyv797 := &x.Paths
		yym798 := z.DecBinary()
		_ = yym798
		if false {
		} else {
			h.decSliceHTTPIngressPath((*[]HTTPIngressPath)(yyv797), d)
		}
	}
	for {
		yyj796++
		if yyhl796 {
			yyb796 = yyj796 > l
		} else {
			yyb796 = r.CheckBreak()
		}
		if yyb796 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj796-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPIngressPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym799 := z.EncBinary()
		_ = yym799
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep800 := !z.EncBinary()
			yy2arr800 := z.EncBasicHandle().StructToArray
			var yyq800 [2]bool
			_, _, _ = yysep800, yyq800, yy2arr800
			const yyr800 bool = false
			yyq800[0] = x.Path != ""
			var yynn800 int
			if yyr800 || yy2arr800 {
				r.EncodeArrayStart(2)
			} else {
				yynn800 = 1
				for _, b := range yyq800 {
					if b {
						yynn800++
					}
				}
				r.EncodeMapStart(yynn800)
				yynn800 = 0
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq800[0] {
					yym802 := z.EncBinary()
					_ = yym802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq800[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym803 := z.EncBinary()
					_ = yym803
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy805 := &x.Backend
				yy805.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("backend"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy806 := &x.Backend
				yy806.CodecEncodeSelf(e)
			}
			if yyr800 || yy2arr800 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPIngressPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym807 := z.DecBinary()
	_ = yym807
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct808 := r.ContainerType()
		if yyct808 == codecSelferValueTypeMap1234 {
			yyl808 := r.ReadMapStart()
			if yyl808 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl808, d)
			}
		} else if yyct808 == codecSelferValueTypeArray1234 {
			yyl808 := r.ReadArrayStart()
			if yyl808 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl808, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPIngressPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys809Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys809Slc
	var yyhl809 bool = l >= 0
	for yyj809 := 0; ; yyj809++ {
		if yyhl809 {
			if yyj809 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys809Slc = r.DecodeBytes(yys809Slc, true, true)
		yys809 := string(yys809Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys809 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "backend":
			if r.TryDecodeAsNil() {
				x.Backend = IngressBackend{}
			} else {
				yyv811 := &x.Backend
				yyv811.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys809)
		} // end switch yys809
	} // end for yyj809
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPIngressPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj812 int
	var yyb812 bool
	var yyhl812 bool = l >= 0
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj812++
	if yyhl812 {
		yyb812 = yyj812 > l
	} else {
		yyb812 = r.CheckBreak()
	}
	if yyb812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Backend = IngressBackend{}
	} else {
		yyv814 := &x.Backend
		yyv814.CodecDecodeSelf(d)
	}
	for {
		yyj812++
		if yyhl812 {
			yyb812 = yyj812 > l
		} else {
			yyb812 = r.CheckBreak()
		}
		if yyb812 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj812-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IngressBackend) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym815 := z.EncBinary()
		_ = yym815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep816 := !z.EncBinary()
			yy2arr816 := z.EncBasicHandle().StructToArray
			var yyq816 [2]bool
			_, _, _ = yysep816, yyq816, yy2arr816
			const yyr816 bool = false
			var yynn816 int
			if yyr816 || yy2arr816 {
				r.EncodeArrayStart(2)
			} else {
				yynn816 = 2
				for _, b := range yyq816 {
					if b {
						yynn816++
					}
				}
				r.EncodeMapStart(yynn816)
				yynn816 = 0
			}
			if yyr816 || yy2arr816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym818 := z.EncBinary()
				_ = yym818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym819 := z.EncBinary()
				_ = yym819
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceName))
				}
			}
			if yyr816 || yy2arr816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy821 := &x.ServicePort
				yym822 := z.EncBinary()
				_ = yym822
				if false {
				} else if z.HasExtensions() && z.EncExt(yy821) {
				} else if !yym822 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy821)
				} else {
					z.EncFallback(yy821)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("servicePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy823 := &x.ServicePort
				yym824 := z.EncBinary()
				_ = yym824
				if false {
				} else if z.HasExtensions() && z.EncExt(yy823) {
				} else if !yym824 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy823)
				} else {
					z.EncFallback(yy823)
				}
			}
			if yyr816 || yy2arr816 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IngressBackend) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym825 := z.DecBinary()
	_ = yym825
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct826 := r.ContainerType()
		if yyct826 == codecSelferValueTypeMap1234 {
			yyl826 := r.ReadMapStart()
			if yyl826 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl826, d)
			}
		} else if yyct826 == codecSelferValueTypeArray1234 {
			yyl826 := r.ReadArrayStart()
			if yyl826 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl826, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IngressBackend) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys827Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys827Slc
	var yyhl827 bool = l >= 0
	for yyj827 := 0; ; yyj827++ {
		if yyhl827 {
			if yyj827 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys827Slc = r.DecodeBytes(yys827Slc, true, true)
		yys827 := string(yys827Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys827 {
		case "serviceName":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				x.ServiceName = string(r.DecodeString())
			}
		case "servicePort":
			if r.TryDecodeAsNil() {
				x.ServicePort = pkg5_intstr.IntOrString{}
			} else {
				yyv829 := &x.ServicePort
				yym830 := z.DecBinary()
				_ = yym830
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv829) {
				} else if !yym830 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv829)
				} else {
					z.DecFallback(yyv829, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys827)
		} // end switch yys827
	} // end for yyj827
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IngressBackend) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj831 int
	var yyb831 bool
	var yyhl831 bool = l >= 0
	yyj831++
	if yyhl831 {
		yyb831 = yyj831 > l
	} else {
		yyb831 = r.CheckBreak()
	}
	if yyb831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		x.ServiceName = string(r.DecodeString())
	}
	yyj831++
	if yyhl831 {
		yyb831 = yyj831 > l
	} else {
		yyb831 = r.CheckBreak()
	}
	if yyb831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServicePort = pkg5_intstr.IntOrString{}
	} else {
		yyv833 := &x.ServicePort
		yym834 := z.DecBinary()
		_ = yym834
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv833) {
		} else if !yym834 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv833)
		} else {
			z.DecFallback(yyv833, false)
		}
	}
	for {
		yyj831++
		if yyhl831 {
			yyb831 = yyj831 > l
		} else {
			yyb831 = r.CheckBreak()
		}
		if yyb831 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj831-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSet) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym835 := z.EncBinary()
		_ = yym835
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep836 := !z.EncBinary()
			yy2arr836 := z.EncBasicHandle().StructToArray
			var yyq836 [5]bool
			_, _, _ = yysep836, yyq836, yy2arr836
			const yyr836 bool = false
			yyq836[0] = x.Kind != ""
			yyq836[1] = x.APIVersion != ""
			yyq836[2] = true
			yyq836[3] = true
			yyq836[4] = true
			var yynn836 int
			if yyr836 || yy2arr836 {
				r.EncodeArrayStart(5)
			} else {
				yynn836 = 0
				for _, b := range yyq836 {
					if b {
						yynn836++
					}
				}
				r.EncodeMapStart(yynn836)
				yynn836 = 0
			}
			if yyr836 || yy2arr836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq836[0] {
					yym838 := z.EncBinary()
					_ = yym838
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq836[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym839 := z.EncBinary()
					_ = yym839
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr836 || yy2arr836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq836[1] {
					yym841 := z.EncBinary()
					_ = yym841
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq836[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym842 := z.EncBinary()
					_ = yym842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr836 || yy2arr836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq836[2] {
					yy844 := &x.ObjectMeta
					yym845 := z.EncBinary()
					_ = yym845
					if false {
					} else if z.HasExtensions() && z.EncExt(yy844) {
					} else {
						z.EncFallback(yy844)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq836[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy846 := &x.ObjectMeta
					yym847 := z.EncBinary()
					_ = yym847
					if false {
					} else if z.HasExtensions() && z.EncExt(yy846) {
					} else {
						z.EncFallback(yy846)
					}
				}
			}
			if yyr836 || yy2arr836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq836[3] {
					yy849 := &x.Spec
					yy849.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq836[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy850 := &x.Spec
					yy850.CodecEncodeSelf(e)
				}
			}
			if yyr836 || yy2arr836 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq836[4] {
					yy852 := &x.Status
					yy852.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq836[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy853 := &x.Status
					yy853.CodecEncodeSelf(e)
				}
			}
			if yyr836 || yy2arr836 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSet) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym854 := z.DecBinary()
	_ = yym854
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct855 := r.ContainerType()
		if yyct855 == codecSelferValueTypeMap1234 {
			yyl855 := r.ReadMapStart()
			if yyl855 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl855, d)
			}
		} else if yyct855 == codecSelferValueTypeArray1234 {
			yyl855 := r.ReadArrayStart()
			if yyl855 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl855, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSet) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys856Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys856Slc
	var yyhl856 bool = l >= 0
	for yyj856 := 0; ; yyj856++ {
		if yyhl856 {
			if yyj856 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys856Slc = r.DecodeBytes(yys856Slc, true, true)
		yys856 := string(yys856Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys856 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv859 := &x.ObjectMeta
				yym860 := z.DecBinary()
				_ = yym860
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv859) {
				} else {
					z.DecFallback(yyv859, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicaSetSpec{}
			} else {
				yyv861 := &x.Spec
				yyv861.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicaSetStatus{}
			} else {
				yyv862 := &x.Status
				yyv862.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys856)
		} // end switch yys856
	} // end for yyj856
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSet) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj863 int
	var yyb863 bool
	var yyhl863 bool = l >= 0
	yyj863++
	if yyhl863 {
		yyb863 = yyj863 > l
	} else {
		yyb863 = r.CheckBreak()
	}
	if yyb863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj863++
	if yyhl863 {
		yyb863 = yyj863 > l
	} else {
		yyb863 = r.CheckBreak()
	}
	if yyb863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj863++
	if yyhl863 {
		yyb863 = yyj863 > l
	} else {
		yyb863 = r.CheckBreak()
	}
	if yyb863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv866 := &x.ObjectMeta
		yym867 := z.DecBinary()
		_ = yym867
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv866) {
		} else {
			z.DecFallback(yyv866, false)
		}
	}
	yyj863++
	if yyhl863 {
		yyb863 = yyj863 > l
	} else {
		yyb863 = r.CheckBreak()
	}
	if yyb863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicaSetSpec{}
	} else {
		yyv868 := &x.Spec
		yyv868.CodecDecodeSelf(d)
	}
	yyj863++
	if yyhl863 {
		yyb863 = yyj863 > l
	} else {
		yyb863 = r.CheckBreak()
	}
	if yyb863 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicaSetStatus{}
	} else {
		yyv869 := &x.Status
		yyv869.CodecDecodeSelf(d)
	}
	for {
		yyj863++
		if yyhl863 {
			yyb863 = yyj863 > l
		} else {
			yyb863 = r.CheckBreak()
		}
		if yyb863 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj863-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym870 := z.EncBinary()
		_ = yym870
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep871 := !z.EncBinary()
			yy2arr871 := z.EncBasicHandle().StructToArray
			var yyq871 [4]bool
			_, _, _ = yysep871, yyq871, yy2arr871
			const yyr871 bool = false
			yyq871[0] = x.Kind != ""
			yyq871[1] = x.APIVersion != ""
			yyq871[2] = true
			var yynn871 int
			if yyr871 || yy2arr871 {
				r.EncodeArrayStart(4)
			} else {
				yynn871 = 1
				for _, b := range yyq871 {
					if b {
						yynn871++
					}
				}
				r.EncodeMapStart(yynn871)
				yynn871 = 0
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[0] {
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq871[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[1] {
					yym876 := z.EncBinary()
					_ = yym876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq871[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym877 := z.EncBinary()
					_ = yym877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[2] {
					yy879 := &x.ListMeta
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else if z.HasExtensions() && z.EncExt(yy879) {
					} else {
						z.EncFallback(yy879)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq871[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy881 := &x.ListMeta
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else if z.HasExtensions() && z.EncExt(yy881) {
					} else {
						z.EncFallback(yy881)
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym884 := z.EncBinary()
					_ = yym884
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else {
						h.encSliceReplicaSet(([]ReplicaSet)(x.Items), e)
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym886 := z.DecBinary()
	_ = yym886
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct887 := r.ContainerType()
		if yyct887 == codecSelferValueTypeMap1234 {
			yyl887 := r.ReadMapStart()
			if yyl887 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl887, d)
			}
		} else if yyct887 == codecSelferValueTypeArray1234 {
			yyl887 := r.ReadArrayStart()
			if yyl887 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl887, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys888Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys888Slc
	var yyhl888 bool = l >= 0
	for yyj888 := 0; ; yyj888++ {
		if yyhl888 {
			if yyj888 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys888Slc = r.DecodeBytes(yys888Slc, true, true)
		yys888 := string(yys888Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys888 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv891 := &x.ListMeta
				yym892 := z.DecBinary()
				_ = yym892
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv891) {
				} else {
					z.DecFallback(yyv891, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv893 := &x.Items
				yym894 := z.DecBinary()
				_ = yym894
				if false {
				} else {
					h.decSliceReplicaSet((*[]ReplicaSet)(yyv893), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys888)
		} // end switch yys888
	} // end for yyj888
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj895 int
	var yyb895 bool
	var yyhl895 bool = l >= 0
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv898 := &x.ListMeta
		yym899 := z.DecBinary()
		_ = yym899
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv898) {
		} else {
			z.DecFallback(yyv898, false)
		}
	}
	yyj895++
	if yyhl895 {
		yyb895 = yyj895 > l
	} else {
		yyb895 = r.CheckBreak()
	}
	if yyb895 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv900 := &x.Items
		yym901 := z.DecBinary()
		_ = yym901
		if false {
		} else {
			h.decSliceReplicaSet((*[]ReplicaSet)(yyv900), d)
		}
	}
	for {
		yyj895++
		if yyhl895 {
			yyb895 = yyj895 > l
		} else {
			yyb895 = r.CheckBreak()
		}
		if yyb895 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj895-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym902 := z.EncBinary()
		_ = yym902
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep903 := !z.EncBinary()
			yy2arr903 := z.EncBasicHandle().StructToArray
			var yyq903 [4]bool
			_, _, _ = yysep903, yyq903, yy2arr903
			const yyr903 bool = false
			yyq903[1] = x.MinReadySeconds != 0
			yyq903[2] = x.Selector != nil
			yyq903[3] = true
			var yynn903 int
			if yyr903 || yy2arr903 {
				r.EncodeArrayStart(4)
			} else {
				yynn903 = 1
				for _, b := range yyq903 {
					if b {
						yynn903++
					}
				}
				r.EncodeMapStart(yynn903)
				yynn903 = 0
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym905 := z.EncBinary()
				_ = yym905
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym906 := z.EncBinary()
				_ = yym906
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[1] {
					yym908 := z.EncBinary()
					_ = yym908
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq903[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReadySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym909 := z.EncBinary()
					_ = yym909
					if false {
					} else {
						r.EncodeInt(int64(x.MinReadySeconds))
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[2] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym911 := z.EncBinary()
						_ = yym911
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq903[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym912 := z.EncBinary()
						_ = yym912
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq903[3] {
					yy914 := &x.Template
					yym915 := z.EncBinary()
					_ = yym915
					if false {
					} else if z.HasExtensions() && z.EncExt(yy914) {
					} else {
						z.EncFallback(yy914)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq903[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy916 := &x.Template
					yym917 := z.EncBinary()
					_ = yym917
					if false {
					} else if z.HasExtensions() && z.EncExt(yy916) {
					} else {
						z.EncFallback(yy916)
					}
				}
			}
			if yyr903 || yy2arr903 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym918 := z.DecBinary()
	_ = yym918
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct919 := r.ContainerType()
		if yyct919 == codecSelferValueTypeMap1234 {
			yyl919 := r.ReadMapStart()
			if yyl919 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl919, d)
			}
		} else if yyct919 == codecSelferValueTypeArray1234 {
			yyl919 := r.ReadArrayStart()
			if yyl919 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl919, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys920Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys920Slc
	var yyhl920 bool = l >= 0
	for yyj920 := 0; ; yyj920++ {
		if yyhl920 {
			if yyj920 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys920Slc = r.DecodeBytes(yys920Slc, true, true)
		yys920 := string(yys920Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys920 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "minReadySeconds":
			if r.TryDecodeAsNil() {
				x.MinReadySeconds = 0
			} else {
				x.MinReadySeconds = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym924 := z.DecBinary()
				_ = yym924
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv925 := &x.Template
				yym926 := z.DecBinary()
				_ = yym926
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv925) {
				} else {
					z.DecFallback(yyv925, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys920)
		} // end switch yys920
	} // end for yyj920
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj927 int
	var yyb927 bool
	var yyhl927 bool = l >= 0
	yyj927++
	if yyhl927 {
		yyb927 = yyj927 > l
	} else {
		yyb927 = r.CheckBreak()
	}
	if yyb927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj927++
	if yyhl927 {
		yyb927 = yyj927 > l
	} else {
		yyb927 = r.CheckBreak()
	}
	if yyb927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReadySeconds = 0
	} else {
		x.MinReadySeconds = int32(r.DecodeInt(32))
	}
	yyj927++
	if yyhl927 {
		yyb927 = yyj927 > l
	} else {
		yyb927 = r.CheckBreak()
	}
	if yyb927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym931 := z.DecBinary()
		_ = yym931
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj927++
	if yyhl927 {
		yyb927 = yyj927 > l
	} else {
		yyb927 = r.CheckBreak()
	}
	if yyb927 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv932 := &x.Template
		yym933 := z.DecBinary()
		_ = yym933
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv932) {
		} else {
			z.DecFallback(yyv932, false)
		}
	}
	for {
		yyj927++
		if yyhl927 {
			yyb927 = yyj927 > l
		} else {
			yyb927 = r.CheckBreak()
		}
		if yyb927 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj927-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicaSetStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym934 := z.EncBinary()
		_ = yym934
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep935 := !z.EncBinary()
			yy2arr935 := z.EncBasicHandle().StructToArray
			var yyq935 [6]bool
			_, _, _ = yysep935, yyq935, yy2arr935
			const yyr935 bool = false
			yyq935[1] = x.FullyLabeledReplicas != 0
			yyq935[2] = x.ReadyReplicas != 0
			yyq935[3] = x.AvailableReplicas != 0
			yyq935[4] = x.ObservedGeneration != 0
			yyq935[5] = len(x.Conditions) != 0
			var yynn935 int
			if yyr935 || yy2arr935 {
				r.EncodeArrayStart(6)
			} else {
				yynn935 = 1
				for _, b := range yyq935 {
					if b {
						yynn935++
					}
				}
				r.EncodeMapStart(yynn935)
				yynn935 = 0
			}
			if yyr935 || yy2arr935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym937 := z.EncBinary()
				_ = yym937
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym938 := z.EncBinary()
				_ = yym938
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr935 || yy2arr935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq935[1] {
					yym940 := z.EncBinary()
					_ = yym940
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq935[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym941 := z.EncBinary()
					_ = yym941
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr935 || yy2arr935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq935[2] {
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq935[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readyReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym944 := z.EncBinary()
					_ = yym944
					if false {
					} else {
						r.EncodeInt(int64(x.ReadyReplicas))
					}
				}
			}
			if yyr935 || yy2arr935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq935[3] {
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq935[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("availableReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym947 := z.EncBinary()
					_ = yym947
					if false {
					} else {
						r.EncodeInt(int64(x.AvailableReplicas))
					}
				}
			}
			if yyr935 || yy2arr935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq935[4] {
					yym949 := z.EncBinary()
					_ = yym949
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq935[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr935 || yy2arr935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq935[5] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym952 := z.EncBinary()
						_ = yym952
						if false {
						} else {
							h.encSliceReplicaSetCondition(([]ReplicaSetCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq935[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym953 := z.EncBinary()
						_ = yym953
						if false {
						} else {
							h.encSliceReplicaSetCondition(([]ReplicaSetCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr935 || yy2arr935 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym954 := z.DecBinary()
	_ = yym954
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct955 := r.ContainerType()
		if yyct955 == codecSelferValueTypeMap1234 {
			yyl955 := r.ReadMapStart()
			if yyl955 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl955, d)
			}
		} else if yyct955 == codecSelferValueTypeArray1234 {
			yyl955 := r.ReadArrayStart()
			if yyl955 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl955, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys956Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys956Slc
	var yyhl956 bool = l >= 0
	for yyj956 := 0; ; yyj956++ {
		if yyhl956 {
			if yyj956 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys956Slc = r.DecodeBytes(yys956Slc, true, true)
		yys956 := string(yys956Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys956 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "readyReplicas":
			if r.TryDecodeAsNil() {
				x.ReadyReplicas = 0
			} else {
				x.ReadyReplicas = int32(r.DecodeInt(32))
			}
		case "availableReplicas":
			if r.TryDecodeAsNil() {
				x.AvailableReplicas = 0
			} else {
				x.AvailableReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv962 := &x.Conditions
				yym963 := z.DecBinary()
				_ = yym963
				if false {
				} else {
					h.decSliceReplicaSetCondition((*[]ReplicaSetCondition)(yyv962), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys956)
		} // end switch yys956
	} // end for yyj956
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj964 int
	var yyb964 bool
	var yyhl964 bool = l >= 0
	yyj964++
	if yyhl964 {
		yyb964 = yyj964 > l
	} else {
		yyb964 = r.CheckBreak()
	}
	if yyb964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj964++
	if yyhl964 {
		yyb964 = yyj964 > l
	} else {
		yyb964 = r.CheckBreak()
	}
	if yyb964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj964++
	if yyhl964 {
		yyb964 = yyj964 > l
	} else {
		yyb964 = r.CheckBreak()
	}
	if yyb964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadyReplicas = 0
	} else {
		x.ReadyReplicas = int32(r.DecodeInt(32))
	}
	yyj964++
	if yyhl964 {
		yyb964 = yyj964 > l
	} else {
		yyb964 = r.CheckBreak()
	}
	if yyb964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AvailableReplicas = 0
	} else {
		x.AvailableReplicas = int32(r.DecodeInt(32))
	}
	yyj964++
	if yyhl964 {
		yyb964 = yyj964 > l
	} else {
		yyb964 = r.CheckBreak()
	}
	if yyb964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	yyj964++
	if yyhl964 {
		yyb964 = yyj964 > l
	} else {
		yyb964 = r.CheckBreak()
	}
	if yyb964 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv970 := &x.Conditions
		yym971 := z.DecBinary()
		_ = yym971
		if false {
		} else {
			h.decSliceReplicaSetCondition((*[]ReplicaSetCondition)(yyv970), d)
		}
	}
	for {
		yyj964++
		if yyhl964 {
			yyb964 = yyj964 > l
		} else {
			yyb964 = r.CheckBreak()
		}
		if yyb964 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj964-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ReplicaSetConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym972 := z.EncBinary()
	_ = yym972
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ReplicaSetConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym973 := z.DecBinary()
	_ = yym973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ReplicaSetCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym974 := z.EncBinary()
		_ = yym974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep975 := !z.EncBinary()
			yy2arr975 := z.EncBasicHandle().StructToArray
			var yyq975 [6]bool
			_, _, _ = yysep975, yyq975, yy2arr975
			const yyr975 bool = false
			yyq975[2] = true
			yyq975[3] = true
			yyq975[4] = x.Reason != ""
			yyq975[5] = x.Message != ""
			var yynn975 int
			if yyr975 || yy2arr975 {
				r.EncodeArrayStart(6)
			} else {
				yynn975 = 2
				for _, b := range yyq975 {
					if b {
						yynn975++
					}
				}
				r.EncodeMapStart(yynn975)
				yynn975 = 0
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym978 := z.EncBinary()
				_ = yym978
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym979 := z.EncBinary()
				_ = yym979
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq975[2] {
					yy981 := &x.LastProbeTime
					yym982 := z.EncBinary()
					_ = yym982
					if false {
					} else if z.HasExtensions() && z.EncExt(yy981) {
					} else if yym982 {
						z.EncBinaryMarshal(yy981)
					} else if !yym982 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy981)
					} else {
						z.EncFallback(yy981)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq975[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy983 := &x.LastProbeTime
					yym984 := z.EncBinary()
					_ = yym984
					if false {
					} else if z.HasExtensions() && z.EncExt(yy983) {
					} else if yym984 {
						z.EncBinaryMarshal(yy983)
					} else if !yym984 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy983)
					} else {
						z.EncFallback(yy983)
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq975[3] {
					yy986 := &x.LastTransitionTime
					yym987 := z.EncBinary()
					_ = yym987
					if false {
					} else if z.HasExtensions() && z.EncExt(yy986) {
					} else if yym987 {
						z.EncBinaryMarshal(yy986)
					} else if !yym987 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy986)
					} else {
						z.EncFallback(yy986)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq975[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy988 := &x.LastTransitionTime
					yym989 := z.EncBinary()
					_ = yym989
					if false {
					} else if z.HasExtensions() && z.EncExt(yy988) {
					} else if yym989 {
						z.EncBinaryMarshal(yy988)
					} else if !yym989 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy988)
					} else {
						z.EncFallback(yy988)
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq975[4] {
					yym991 := z.EncBinary()
					_ = yym991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq975[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym992 := z.EncBinary()
					_ = yym992
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq975[5] {
					yym994 := z.EncBinary()
					_ = yym994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq975[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym995 := z.EncBinary()
					_ = yym995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr975 || yy2arr975 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicaSetCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym996 := z.DecBinary()
	_ = yym996
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct997 := r.ContainerType()
		if yyct997 == codecSelferValueTypeMap1234 {
			yyl997 := r.ReadMapStart()
			if yyl997 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl997, d)
			}
		} else if yyct997 == codecSelferValueTypeArray1234 {
			yyl997 := r.ReadArrayStart()
			if yyl997 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl997, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicaSetCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys998Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys998Slc
	var yyhl998 bool = l >= 0
	for yyj998 := 0; ; yyj998++ {
		if yyhl998 {
			if yyj998 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys998Slc = r.DecodeBytes(yys998Slc, true, true)
		yys998 := string(yys998Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys998 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ReplicaSetConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv1001 := &x.LastProbeTime
				yym1002 := z.DecBinary()
				_ = yym1002
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1001) {
				} else if yym1002 {
					z.DecBinaryUnmarshal(yyv1001)
				} else if !yym1002 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1001)
				} else {
					z.DecFallback(yyv1001, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv1003 := &x.LastTransitionTime
				yym1004 := z.DecBinary()
				_ = yym1004
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1003) {
				} else if yym1004 {
					z.DecBinaryUnmarshal(yyv1003)
				} else if !yym1004 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1003)
				} else {
					z.DecFallback(yyv1003, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys998)
		} // end switch yys998
	} // end for yyj998
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicaSetCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1007 int
	var yyb1007 bool
	var yyhl1007 bool = l >= 0
	yyj1007++
	if yyhl1007 {
		yyb1007 = yyj1007 > l
	} else {
		yyb1007 = r.CheckBreak()
	}
	if yyb1007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ReplicaSetConditionType(r.DecodeString())
	}
	yyj1007++
	if yyhl1007 {
		yyb1007 = yyj1007 > l
	} else {
		yyb1007 = r.CheckBreak()
	}
	if yyb1007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj1007++
	if yyhl1007 {
		yyb1007 = yyj1007 > l
	} else {
		yyb1007 = r.CheckBreak()
	}
	if yyb1007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv1010 := &x.LastProbeTime
		yym1011 := z.DecBinary()
		_ = yym1011
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1010) {
		} else if yym1011 {
			z.DecBinaryUnmarshal(yyv1010)
		} else if !yym1011 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1010)
		} else {
			z.DecFallback(yyv1010, false)
		}
	}
	yyj1007++
	if yyhl1007 {
		yyb1007 = yyj1007 > l
	} else {
		yyb1007 = r.CheckBreak()
	}
	if yyb1007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv1012 := &x.LastTransitionTime
		yym1013 := z.DecBinary()
		_ = yym1013
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1012) {
		} else if yym1013 {
			z.DecBinaryUnmarshal(yyv1012)
		} else if !yym1013 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1012)
		} else {
			z.DecFallback(yyv1012, false)
		}
	}
	yyj1007++
	if yyhl1007 {
		yyb1007 = yyj1007 > l
	} else {
		yyb1007 = r.CheckBreak()
	}
	if yyb1007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1007++
	if yyhl1007 {
		yyb1007 = yyj1007 > l
	} else {
		yyb1007 = r.CheckBreak()
	}
	if yyb1007 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1007++
		if yyhl1007 {
			yyb1007 = yyj1007 > l
		} else {
			yyb1007 = r.CheckBreak()
		}
		if yyb1007 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1007-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1016 := z.EncBinary()
		_ = yym1016
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1017 := !z.EncBinary()
			yy2arr1017 := z.EncBasicHandle().StructToArray
			var yyq1017 [4]bool
			_, _, _ = yysep1017, yyq1017, yy2arr1017
			const yyr1017 bool = false
			yyq1017[0] = x.Kind != ""
			yyq1017[1] = x.APIVersion != ""
			yyq1017[2] = true
			yyq1017[3] = true
			var yynn1017 int
			if yyr1017 || yy2arr1017 {
				r.EncodeArrayStart(4)
			} else {
				yynn1017 = 0
				for _, b := range yyq1017 {
					if b {
						yynn1017++
					}
				}
				r.EncodeMapStart(yynn1017)
				yynn1017 = 0
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1017[0] {
					yym1019 := z.EncBinary()
					_ = yym1019
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1017[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1020 := z.EncBinary()
					_ = yym1020
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1017[1] {
					yym1022 := z.EncBinary()
					_ = yym1022
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1017[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1023 := z.EncBinary()
					_ = yym1023
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1017[2] {
					yy1025 := &x.ObjectMeta
					yym1026 := z.EncBinary()
					_ = yym1026
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1025) {
					} else {
						z.EncFallback(yy1025)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1017[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1027 := &x.ObjectMeta
					yym1028 := z.EncBinary()
					_ = yym1028
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1027) {
					} else {
						z.EncFallback(yy1027)
					}
				}
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1017[3] {
					yy1030 := &x.Spec
					yy1030.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1017[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1031 := &x.Spec
					yy1031.CodecEncodeSelf(e)
				}
			}
			if yyr1017 || yy2arr1017 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1032 := z.DecBinary()
	_ = yym1032
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1033 := r.ContainerType()
		if yyct1033 == codecSelferValueTypeMap1234 {
			yyl1033 := r.ReadMapStart()
			if yyl1033 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1033, d)
			}
		} else if yyct1033 == codecSelferValueTypeArray1234 {
			yyl1033 := r.ReadArrayStart()
			if yyl1033 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1033, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1034Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1034Slc
	var yyhl1034 bool = l >= 0
	for yyj1034 := 0; ; yyj1034++ {
		if yyhl1034 {
			if yyj1034 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1034Slc = r.DecodeBytes(yys1034Slc, true, true)
		yys1034 := string(yys1034Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1034 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1037 := &x.ObjectMeta
				yym1038 := z.DecBinary()
				_ = yym1038
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1037) {
				} else {
					z.DecFallback(yyv1037, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSecurityPolicySpec{}
			} else {
				yyv1039 := &x.Spec
				yyv1039.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1034)
		} // end switch yys1034
	} // end for yyj1034
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1040 int
	var yyb1040 bool
	var yyhl1040 bool = l >= 0
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1043 := &x.ObjectMeta
		yym1044 := z.DecBinary()
		_ = yym1044
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1043) {
		} else {
			z.DecFallback(yyv1043, false)
		}
	}
	yyj1040++
	if yyhl1040 {
		yyb1040 = yyj1040 > l
	} else {
		yyb1040 = r.CheckBreak()
	}
	if yyb1040 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSecurityPolicySpec{}
	} else {
		yyv1045 := &x.Spec
		yyv1045.CodecDecodeSelf(d)
	}
	for {
		yyj1040++
		if yyhl1040 {
			yyb1040 = yyj1040 > l
		} else {
			yyb1040 = r.CheckBreak()
		}
		if yyb1040 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1040-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1046 := z.EncBinary()
		_ = yym1046
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1047 := !z.EncBinary()
			yy2arr1047 := z.EncBasicHandle().StructToArray
			var yyq1047 [14]bool
			_, _, _ = yysep1047, yyq1047, yy2arr1047
			const yyr1047 bool = false
			yyq1047[0] = x.Privileged != false
			yyq1047[1] = len(x.DefaultAddCapabilities) != 0
			yyq1047[2] = len(x.RequiredDropCapabilities) != 0
			yyq1047[3] = len(x.AllowedCapabilities) != 0
			yyq1047[4] = len(x.Volumes) != 0
			yyq1047[5] = x.HostNetwork != false
			yyq1047[6] = len(x.HostPorts) != 0
			yyq1047[7] = x.HostPID != false
			yyq1047[8] = x.HostIPC != false
			yyq1047[13] = x.ReadOnlyRootFilesystem != false
			var yynn1047 int
			if yyr1047 || yy2arr1047 {
				r.EncodeArrayStart(14)
			} else {
				yynn1047 = 4
				for _, b := range yyq1047 {
					if b {
						yynn1047++
					}
				}
				r.EncodeMapStart(yynn1047)
				yynn1047 = 0
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[0] {
					yym1049 := z.EncBinary()
					_ = yym1049
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1047[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1050 := z.EncBinary()
					_ = yym1050
					if false {
					} else {
						r.EncodeBool(bool(x.Privileged))
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[1] {
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1052 := z.EncBinary()
						_ = yym1052
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultAddCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultAddCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1053 := z.EncBinary()
						_ = yym1053
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.DefaultAddCapabilities), e)
						}
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[2] {
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1055 := z.EncBinary()
						_ = yym1055
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDropCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDropCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1056 := z.EncBinary()
						_ = yym1056
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.RequiredDropCapabilities), e)
						}
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[3] {
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1058 := z.EncBinary()
						_ = yym1058
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.AllowedCapabilities), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allowedCapabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AllowedCapabilities == nil {
						r.EncodeNil()
					} else {
						yym1059 := z.EncBinary()
						_ = yym1059
						if false {
						} else {
							h.encSliceapi_Capability(([]pkg2_api.Capability)(x.AllowedCapabilities), e)
						}
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[4] {
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1061 := z.EncBinary()
						_ = yym1061
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Volumes == nil {
						r.EncodeNil()
					} else {
						yym1062 := z.EncBinary()
						_ = yym1062
						if false {
						} else {
							h.encSliceFSType(([]FSType)(x.Volumes), e)
						}
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[5] {
					yym1064 := z.EncBinary()
					_ = yym1064
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1047[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1065 := z.EncBinary()
					_ = yym1065
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[6] {
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1067 := z.EncBinary()
						_ = yym1067
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1047[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPorts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPorts == nil {
						r.EncodeNil()
					} else {
						yym1068 := z.EncBinary()
						_ = yym1068
						if false {
						} else {
							h.encSliceHostPortRange(([]HostPortRange)(x.HostPorts), e)
						}
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[7] {
					yym1070 := z.EncBinary()
					_ = yym1070
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1047[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1071 := z.EncBinary()
					_ = yym1071
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[8] {
					yym1073 := z.EncBinary()
					_ = yym1073
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1047[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1074 := z.EncBinary()
					_ = yym1074
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1076 := &x.SELinux
				yy1076.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("seLinux"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1077 := &x.SELinux
				yy1077.CodecEncodeSelf(e)
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1079 := &x.RunAsUser
				yy1079.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1080 := &x.RunAsUser
				yy1080.CodecEncodeSelf(e)
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1082 := &x.SupplementalGroups
				yy1082.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1083 := &x.SupplementalGroups
				yy1083.CodecEncodeSelf(e)
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1085 := &x.FSGroup
				yy1085.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1086 := &x.FSGroup
				yy1086.CodecEncodeSelf(e)
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1047[13] {
					yym1088 := z.EncBinary()
					_ = yym1088
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1047[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1089 := z.EncBinary()
					_ = yym1089
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnlyRootFilesystem))
					}
				}
			}
			if yyr1047 || yy2arr1047 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1090 := z.DecBinary()
	_ = yym1090
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1091 := r.ContainerType()
		if yyct1091 == codecSelferValueTypeMap1234 {
			yyl1091 := r.ReadMapStart()
			if yyl1091 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1091, d)
			}
		} else if yyct1091 == codecSelferValueTypeArray1234 {
			yyl1091 := r.ReadArrayStart()
			if yyl1091 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1091, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1092Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1092Slc
	var yyhl1092 bool = l >= 0
	for yyj1092 := 0; ; yyj1092++ {
		if yyhl1092 {
			if yyj1092 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1092Slc = r.DecodeBytes(yys1092Slc, true, true)
		yys1092 := string(yys1092Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1092 {
		case "privileged":
			if r.TryDecodeAsNil() {
				x.Privileged = false
			} else {
				x.Privileged = bool(r.DecodeBool())
			}
		case "defaultAddCapabilities":
			if r.TryDecodeAsNil() {
				x.DefaultAddCapabilities = nil
			} else {
				yyv1094 := &x.DefaultAddCapabilities
				yym1095 := z.DecBinary()
				_ = yym1095
				if false {
				} else {
					h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1094), d)
				}
			}
		case "requiredDropCapabilities":
			if r.TryDecodeAsNil() {
				x.RequiredDropCapabilities = nil
			} else {
				yyv1096 := &x.RequiredDropCapabilities
				yym1097 := z.DecBinary()
				_ = yym1097
				if false {
				} else {
					h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1096), d)
				}
			}
		case "allowedCapabilities":
			if r.TryDecodeAsNil() {
				x.AllowedCapabilities = nil
			} else {
				yyv1098 := &x.AllowedCapabilities
				yym1099 := z.DecBinary()
				_ = yym1099
				if false {
				} else {
					h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1098), d)
				}
			}
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv1100 := &x.Volumes
				yym1101 := z.DecBinary()
				_ = yym1101
				if false {
				} else {
					h.decSliceFSType((*[]FSType)(yyv1100), d)
				}
			}
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPorts":
			if r.TryDecodeAsNil() {
				x.HostPorts = nil
			} else {
				yyv1103 := &x.HostPorts
				yym1104 := z.DecBinary()
				_ = yym1104
				if false {
				} else {
					h.decSliceHostPortRange((*[]HostPortRange)(yyv1103), d)
				}
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinux":
			if r.TryDecodeAsNil() {
				x.SELinux = SELinuxStrategyOptions{}
			} else {
				yyv1107 := &x.SELinux
				yyv1107.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				x.RunAsUser = RunAsUserStrategyOptions{}
			} else {
				yyv1108 := &x.RunAsUser
				yyv1108.CodecDecodeSelf(d)
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
			} else {
				yyv1109 := &x.SupplementalGroups
				yyv1109.CodecDecodeSelf(d)
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				x.FSGroup = FSGroupStrategyOptions{}
			} else {
				yyv1110 := &x.FSGroup
				yyv1110.CodecDecodeSelf(d)
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				x.ReadOnlyRootFilesystem = false
			} else {
				x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1092)
		} // end switch yys1092
	} // end for yyj1092
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1112 int
	var yyb1112 bool
	var yyhl1112 bool = l >= 0
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Privileged = false
	} else {
		x.Privileged = bool(r.DecodeBool())
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultAddCapabilities = nil
	} else {
		yyv1114 := &x.DefaultAddCapabilities
		yym1115 := z.DecBinary()
		_ = yym1115
		if false {
		} else {
			h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1114), d)
		}
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDropCapabilities = nil
	} else {
		yyv1116 := &x.RequiredDropCapabilities
		yym1117 := z.DecBinary()
		_ = yym1117
		if false {
		} else {
			h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1116), d)
		}
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AllowedCapabilities = nil
	} else {
		yyv1118 := &x.AllowedCapabilities
		yym1119 := z.DecBinary()
		_ = yym1119
		if false {
		} else {
			h.decSliceapi_Capability((*[]pkg2_api.Capability)(yyv1118), d)
		}
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv1120 := &x.Volumes
		yym1121 := z.DecBinary()
		_ = yym1121
		if false {
		} else {
			h.decSliceFSType((*[]FSType)(yyv1120), d)
		}
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPorts = nil
	} else {
		yyv1123 := &x.HostPorts
		yym1124 := z.DecBinary()
		_ = yym1124
		if false {
		} else {
			h.decSliceHostPortRange((*[]HostPortRange)(yyv1123), d)
		}
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SELinux = SELinuxStrategyOptions{}
	} else {
		yyv1127 := &x.SELinux
		yyv1127.CodecDecodeSelf(d)
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RunAsUser = RunAsUserStrategyOptions{}
	} else {
		yyv1128 := &x.RunAsUser
		yyv1128.CodecDecodeSelf(d)
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = SupplementalGroupsStrategyOptions{}
	} else {
		yyv1129 := &x.SupplementalGroups
		yyv1129.CodecDecodeSelf(d)
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSGroup = FSGroupStrategyOptions{}
	} else {
		yyv1130 := &x.FSGroup
		yyv1130.CodecDecodeSelf(d)
	}
	yyj1112++
	if yyhl1112 {
		yyb1112 = yyj1112 > l
	} else {
		yyb1112 = r.CheckBreak()
	}
	if yyb1112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnlyRootFilesystem = false
	} else {
		x.ReadOnlyRootFilesystem = bool(r.DecodeBool())
	}
	for {
		yyj1112++
		if yyhl1112 {
			yyb1112 = yyj1112 > l
		} else {
			yyb1112 = r.CheckBreak()
		}
		if yyb1112 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1112-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HostPortRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1132 := z.EncBinary()
		_ = yym1132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1133 := !z.EncBinary()
			yy2arr1133 := z.EncBasicHandle().StructToArray
			var yyq1133 [2]bool
			_, _, _ = yysep1133, yyq1133, yy2arr1133
			const yyr1133 bool = false
			var yynn1133 int
			if yyr1133 || yy2arr1133 {
				r.EncodeArrayStart(2)
			} else {
				yynn1133 = 2
				for _, b := range yyq1133 {
					if b {
						yynn1133++
					}
				}
				r.EncodeMapStart(yynn1133)
				yynn1133 = 0
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1135 := z.EncBinary()
				_ = yym1135
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1136 := z.EncBinary()
				_ = yym1136
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1138 := z.EncBinary()
				_ = yym1138
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1139 := z.EncBinary()
				_ = yym1139
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1133 || yy2arr1133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPortRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1140 := z.DecBinary()
	_ = yym1140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1141 := r.ContainerType()
		if yyct1141 == codecSelferValueTypeMap1234 {
			yyl1141 := r.ReadMapStart()
			if yyl1141 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1141, d)
			}
		} else if yyct1141 == codecSelferValueTypeArray1234 {
			yyl1141 := r.ReadArrayStart()
			if yyl1141 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1141, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPortRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1142Slc
	var yyhl1142 bool = l >= 0
	for yyj1142 := 0; ; yyj1142++ {
		if yyhl1142 {
			if yyj1142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1142Slc = r.DecodeBytes(yys1142Slc, true, true)
		yys1142 := string(yys1142Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1142 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int(r.DecodeInt(codecSelferBitsize1234))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1142)
		} // end switch yys1142
	} // end for yyj1142
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPortRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1145 int
	var yyb1145 bool
	var yyhl1145 bool = l >= 0
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1145++
	if yyhl1145 {
		yyb1145 = yyj1145 > l
	} else {
		yyb1145 = r.CheckBreak()
	}
	if yyb1145 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int(r.DecodeInt(codecSelferBitsize1234))
	}
	for {
		yyj1145++
		if yyhl1145 {
			yyb1145 = yyj1145 > l
		} else {
			yyb1145 = r.CheckBreak()
		}
		if yyb1145 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1145-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1148 := z.EncBinary()
	_ = yym1148
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1149 := z.DecBinary()
	_ = yym1149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SELinuxStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1150 := z.EncBinary()
		_ = yym1150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1151 := !z.EncBinary()
			yy2arr1151 := z.EncBasicHandle().StructToArray
			var yyq1151 [2]bool
			_, _, _ = yysep1151, yyq1151, yy2arr1151
			const yyr1151 bool = false
			yyq1151[1] = x.SELinuxOptions != nil
			var yynn1151 int
			if yyr1151 || yy2arr1151 {
				r.EncodeArrayStart(2)
			} else {
				yynn1151 = 1
				for _, b := range yyq1151 {
					if b {
						yynn1151++
					}
				}
				r.EncodeMapStart(yynn1151)
				yynn1151 = 0
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1151[1] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						yym1154 := z.EncBinary()
						_ = yym1154
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SELinuxOptions) {
						} else {
							z.EncFallback(x.SELinuxOptions)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1151[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						yym1155 := z.EncBinary()
						_ = yym1155
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SELinuxOptions) {
						} else {
							z.EncFallback(x.SELinuxOptions)
						}
					}
				}
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1156 := z.DecBinary()
	_ = yym1156
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1157 := r.ContainerType()
		if yyct1157 == codecSelferValueTypeMap1234 {
			yyl1157 := r.ReadMapStart()
			if yyl1157 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1157, d)
			}
		} else if yyct1157 == codecSelferValueTypeArray1234 {
			yyl1157 := r.ReadArrayStart()
			if yyl1157 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1157, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1158Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1158Slc
	var yyhl1158 bool = l >= 0
	for yyj1158 := 0; ; yyj1158++ {
		if yyhl1158 {
			if yyj1158 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1158Slc = r.DecodeBytes(yys1158Slc, true, true)
		yys1158 := string(yys1158Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1158 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SELinuxStrategy(r.DecodeString())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(pkg2_api.SELinuxOptions)
				}
				yym1161 := z.DecBinary()
				_ = yym1161
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SELinuxOptions) {
				} else {
					z.DecFallback(x.SELinuxOptions, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1158)
		} // end switch yys1158
	} // end for yyj1158
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1162 int
	var yyb1162 bool
	var yyhl1162 bool = l >= 0
	yyj1162++
	if yyhl1162 {
		yyb1162 = yyj1162 > l
	} else {
		yyb1162 = r.CheckBreak()
	}
	if yyb1162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SELinuxStrategy(r.DecodeString())
	}
	yyj1162++
	if yyhl1162 {
		yyb1162 = yyj1162 > l
	} else {
		yyb1162 = r.CheckBreak()
	}
	if yyb1162 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(pkg2_api.SELinuxOptions)
		}
		yym1165 := z.DecBinary()
		_ = yym1165
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SELinuxOptions) {
		} else {
			z.DecFallback(x.SELinuxOptions, false)
		}
	}
	for {
		yyj1162++
		if yyhl1162 {
			yyb1162 = yyj1162 > l
		} else {
			yyb1162 = r.CheckBreak()
		}
		if yyb1162 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1162-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SELinuxStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1166 := z.EncBinary()
	_ = yym1166
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SELinuxStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1167 := z.DecBinary()
	_ = yym1167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *RunAsUserStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1168 := z.EncBinary()
		_ = yym1168
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1169 := !z.EncBinary()
			yy2arr1169 := z.EncBasicHandle().StructToArray
			var yyq1169 [2]bool
			_, _, _ = yysep1169, yyq1169, yy2arr1169
			const yyr1169 bool = false
			yyq1169[1] = len(x.Ranges) != 0
			var yynn1169 int
			if yyr1169 || yy2arr1169 {
				r.EncodeArrayStart(2)
			} else {
				yynn1169 = 1
				for _, b := range yyq1169 {
					if b {
						yynn1169++
					}
				}
				r.EncodeMapStart(yynn1169)
				yynn1169 = 0
			}
			if yyr1169 || yy2arr1169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Rule.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Rule.CodecEncodeSelf(e)
			}
			if yyr1169 || yy2arr1169 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1169[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1172 := z.EncBinary()
						_ = yym1172
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1169[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1173 := z.EncBinary()
						_ = yym1173
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1169 || yy2arr1169 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RunAsUserStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1174 := z.DecBinary()
	_ = yym1174
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1175 := r.ContainerType()
		if yyct1175 == codecSelferValueTypeMap1234 {
			yyl1175 := r.ReadMapStart()
			if yyl1175 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1175, d)
			}
		} else if yyct1175 == codecSelferValueTypeArray1234 {
			yyl1175 := r.ReadArrayStart()
			if yyl1175 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1175, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1176Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1176Slc
	var yyhl1176 bool = l >= 0
	for yyj1176 := 0; ; yyj1176++ {
		if yyhl1176 {
			if yyj1176 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1176Slc = r.DecodeBytes(yys1176Slc, true, true)
		yys1176 := string(yys1176Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1176 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = RunAsUserStrategy(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1178 := &x.Ranges
				yym1179 := z.DecBinary()
				_ = yym1179
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1178), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1176)
		} // end switch yys1176
	} // end for yyj1176
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RunAsUserStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1180 int
	var yyb1180 bool
	var yyhl1180 bool = l >= 0
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = RunAsUserStrategy(r.DecodeString())
	}
	yyj1180++
	if yyhl1180 {
		yyb1180 = yyj1180 > l
	} else {
		yyb1180 = r.CheckBreak()
	}
	if yyb1180 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1182 := &x.Ranges
		yym1183 := z.DecBinary()
		_ = yym1183
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1182), d)
		}
	}
	for {
		yyj1180++
		if yyhl1180 {
			yyb1180 = yyj1180 > l
		} else {
			yyb1180 = r.CheckBreak()
		}
		if yyb1180 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1180-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *IDRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1184 := z.EncBinary()
		_ = yym1184
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1185 := !z.EncBinary()
			yy2arr1185 := z.EncBasicHandle().StructToArray
			var yyq1185 [2]bool
			_, _, _ = yysep1185, yyq1185, yy2arr1185
			const yyr1185 bool = false
			var yynn1185 int
			if yyr1185 || yy2arr1185 {
				r.EncodeArrayStart(2)
			} else {
				yynn1185 = 2
				for _, b := range yyq1185 {
					if b {
						yynn1185++
					}
				}
				r.EncodeMapStart(yynn1185)
				yynn1185 = 0
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1187 := z.EncBinary()
				_ = yym1187
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("min"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1188 := z.EncBinary()
				_ = yym1188
				if false {
				} else {
					r.EncodeInt(int64(x.Min))
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1190 := z.EncBinary()
				_ = yym1190
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("max"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1191 := z.EncBinary()
				_ = yym1191
				if false {
				} else {
					r.EncodeInt(int64(x.Max))
				}
			}
			if yyr1185 || yy2arr1185 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *IDRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1192 := z.DecBinary()
	_ = yym1192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1193 := r.ContainerType()
		if yyct1193 == codecSelferValueTypeMap1234 {
			yyl1193 := r.ReadMapStart()
			if yyl1193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1193, d)
			}
		} else if yyct1193 == codecSelferValueTypeArray1234 {
			yyl1193 := r.ReadArrayStart()
			if yyl1193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *IDRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1194Slc
	var yyhl1194 bool = l >= 0
	for yyj1194 := 0; ; yyj1194++ {
		if yyhl1194 {
			if yyj1194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1194Slc = r.DecodeBytes(yys1194Slc, true, true)
		yys1194 := string(yys1194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1194 {
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = 0
			} else {
				x.Min = int64(r.DecodeInt(64))
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = 0
			} else {
				x.Max = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1194)
		} // end switch yys1194
	} // end for yyj1194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *IDRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1197 int
	var yyb1197 bool
	var yyhl1197 bool = l >= 0
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = 0
	} else {
		x.Min = int64(r.DecodeInt(64))
	}
	yyj1197++
	if yyhl1197 {
		yyb1197 = yyj1197 > l
	} else {
		yyb1197 = r.CheckBreak()
	}
	if yyb1197 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = 0
	} else {
		x.Max = int64(r.DecodeInt(64))
	}
	for {
		yyj1197++
		if yyhl1197 {
			yyb1197 = yyj1197 > l
		} else {
			yyb1197 = r.CheckBreak()
		}
		if yyb1197 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1197-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RunAsUserStrategy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1200 := z.EncBinary()
	_ = yym1200
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RunAsUserStrategy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1201 := z.DecBinary()
	_ = yym1201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *FSGroupStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1202 := z.EncBinary()
		_ = yym1202
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1203 := !z.EncBinary()
			yy2arr1203 := z.EncBasicHandle().StructToArray
			var yyq1203 [2]bool
			_, _, _ = yysep1203, yyq1203, yy2arr1203
			const yyr1203 bool = false
			yyq1203[0] = x.Rule != ""
			yyq1203[1] = len(x.Ranges) != 0
			var yynn1203 int
			if yyr1203 || yy2arr1203 {
				r.EncodeArrayStart(2)
			} else {
				yynn1203 = 0
				for _, b := range yyq1203 {
					if b {
						yynn1203++
					}
				}
				r.EncodeMapStart(yynn1203)
				yynn1203 = 0
			}
			if yyr1203 || yy2arr1203 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1203[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1203[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1203 || yy2arr1203 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1203[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1206 := z.EncBinary()
						_ = yym1206
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1203[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1207 := z.EncBinary()
						_ = yym1207
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1203 || yy2arr1203 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FSGroupStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1208 := z.DecBinary()
	_ = yym1208
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1209 := r.ContainerType()
		if yyct1209 == codecSelferValueTypeMap1234 {
			yyl1209 := r.ReadMapStart()
			if yyl1209 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1209, d)
			}
		} else if yyct1209 == codecSelferValueTypeArray1234 {
			yyl1209 := r.ReadArrayStart()
			if yyl1209 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1209, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1210Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1210Slc
	var yyhl1210 bool = l >= 0
	for yyj1210 := 0; ; yyj1210++ {
		if yyhl1210 {
			if yyj1210 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1210Slc = r.DecodeBytes(yys1210Slc, true, true)
		yys1210 := string(yys1210Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1210 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = FSGroupStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1212 := &x.Ranges
				yym1213 := z.DecBinary()
				_ = yym1213
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1212), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1210)
		} // end switch yys1210
	} // end for yyj1210
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FSGroupStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1214 int
	var yyb1214 bool
	var yyhl1214 bool = l >= 0
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = FSGroupStrategyType(r.DecodeString())
	}
	yyj1214++
	if yyhl1214 {
		yyb1214 = yyj1214 > l
	} else {
		yyb1214 = r.CheckBreak()
	}
	if yyb1214 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1216 := &x.Ranges
		yym1217 := z.DecBinary()
		_ = yym1217
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1216), d)
		}
	}
	for {
		yyj1214++
		if yyhl1214 {
			yyb1214 = yyj1214 > l
		} else {
			yyb1214 = r.CheckBreak()
		}
		if yyb1214 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1214-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FSGroupStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1218 := z.EncBinary()
	_ = yym1218
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FSGroupStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1219 := z.DecBinary()
	_ = yym1219
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1220 := z.EncBinary()
		_ = yym1220
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1221 := !z.EncBinary()
			yy2arr1221 := z.EncBasicHandle().StructToArray
			var yyq1221 [2]bool
			_, _, _ = yysep1221, yyq1221, yy2arr1221
			const yyr1221 bool = false
			yyq1221[0] = x.Rule != ""
			yyq1221[1] = len(x.Ranges) != 0
			var yynn1221 int
			if yyr1221 || yy2arr1221 {
				r.EncodeArrayStart(2)
			} else {
				yynn1221 = 0
				for _, b := range yyq1221 {
					if b {
						yynn1221++
					}
				}
				r.EncodeMapStart(yynn1221)
				yynn1221 = 0
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[0] {
					x.Rule.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1221[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rule"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Rule.CodecEncodeSelf(e)
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1221[1] {
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1224 := z.EncBinary()
						_ = yym1224
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1221[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ranges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ranges == nil {
						r.EncodeNil()
					} else {
						yym1225 := z.EncBinary()
						_ = yym1225
						if false {
						} else {
							h.encSliceIDRange(([]IDRange)(x.Ranges), e)
						}
					}
				}
			}
			if yyr1221 || yy2arr1221 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1226 := z.DecBinary()
	_ = yym1226
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1227 := r.ContainerType()
		if yyct1227 == codecSelferValueTypeMap1234 {
			yyl1227 := r.ReadMapStart()
			if yyl1227 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1227, d)
			}
		} else if yyct1227 == codecSelferValueTypeArray1234 {
			yyl1227 := r.ReadArrayStart()
			if yyl1227 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1227, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1228Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1228Slc
	var yyhl1228 bool = l >= 0
	for yyj1228 := 0; ; yyj1228++ {
		if yyhl1228 {
			if yyj1228 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1228Slc = r.DecodeBytes(yys1228Slc, true, true)
		yys1228 := string(yys1228Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1228 {
		case "rule":
			if r.TryDecodeAsNil() {
				x.Rule = ""
			} else {
				x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
			}
		case "ranges":
			if r.TryDecodeAsNil() {
				x.Ranges = nil
			} else {
				yyv1230 := &x.Ranges
				yym1231 := z.DecBinary()
				_ = yym1231
				if false {
				} else {
					h.decSliceIDRange((*[]IDRange)(yyv1230), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1228)
		} // end switch yys1228
	} // end for yyj1228
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SupplementalGroupsStrategyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1232 int
	var yyb1232 bool
	var yyhl1232 bool = l >= 0
	yyj1232++
	if yyhl1232 {
		yyb1232 = yyj1232 > l
	} else {
		yyb1232 = r.CheckBreak()
	}
	if yyb1232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rule = ""
	} else {
		x.Rule = SupplementalGroupsStrategyType(r.DecodeString())
	}
	yyj1232++
	if yyhl1232 {
		yyb1232 = yyj1232 > l
	} else {
		yyb1232 = r.CheckBreak()
	}
	if yyb1232 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ranges = nil
	} else {
		yyv1234 := &x.Ranges
		yym1235 := z.DecBinary()
		_ = yym1235
		if false {
		} else {
			h.decSliceIDRange((*[]IDRange)(yyv1234), d)
		}
	}
	for {
		yyj1232++
		if yyhl1232 {
			yyb1232 = yyj1232 > l
		} else {
			yyb1232 = r.CheckBreak()
		}
		if yyb1232 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1232-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SupplementalGroupsStrategyType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1236 := z.EncBinary()
	_ = yym1236
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SupplementalGroupsStrategyType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1237 := z.DecBinary()
	_ = yym1237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSecurityPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1238 := z.EncBinary()
		_ = yym1238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1239 := !z.EncBinary()
			yy2arr1239 := z.EncBasicHandle().StructToArray
			var yyq1239 [4]bool
			_, _, _ = yysep1239, yyq1239, yy2arr1239
			const yyr1239 bool = false
			yyq1239[0] = x.Kind != ""
			yyq1239[1] = x.APIVersion != ""
			yyq1239[2] = true
			var yynn1239 int
			if yyr1239 || yy2arr1239 {
				r.EncodeArrayStart(4)
			} else {
				yynn1239 = 1
				for _, b := range yyq1239 {
					if b {
						yynn1239++
					}
				}
				r.EncodeMapStart(yynn1239)
				yynn1239 = 0
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[0] {
					yym1241 := z.EncBinary()
					_ = yym1241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1239[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1242 := z.EncBinary()
					_ = yym1242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[1] {
					yym1244 := z.EncBinary()
					_ = yym1244
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1239[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1245 := z.EncBinary()
					_ = yym1245
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1239[2] {
					yy1247 := &x.ListMeta
					yym1248 := z.EncBinary()
					_ = yym1248
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1247) {
					} else {
						z.EncFallback(yy1247)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1239[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1249 := &x.ListMeta
					yym1250 := z.EncBinary()
					_ = yym1250
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1249) {
					} else {
						z.EncFallback(yy1249)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1252 := z.EncBinary()
					_ = yym1252
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1253 := z.EncBinary()
					_ = yym1253
					if false {
					} else {
						h.encSlicePodSecurityPolicy(([]PodSecurityPolicy)(x.Items), e)
					}
				}
			}
			if yyr1239 || yy2arr1239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1254 := z.DecBinary()
	_ = yym1254
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1255 := r.ContainerType()
		if yyct1255 == codecSelferValueTypeMap1234 {
			yyl1255 := r.ReadMapStart()
			if yyl1255 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1255, d)
			}
		} else if yyct1255 == codecSelferValueTypeArray1234 {
			yyl1255 := r.ReadArrayStart()
			if yyl1255 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1255, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1256Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1256Slc
	var yyhl1256 bool = l >= 0
	for yyj1256 := 0; ; yyj1256++ {
		if yyhl1256 {
			if yyj1256 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1256Slc = r.DecodeBytes(yys1256Slc, true, true)
		yys1256 := string(yys1256Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1256 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1259 := &x.ListMeta
				yym1260 := z.DecBinary()
				_ = yym1260
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1259) {
				} else {
					z.DecFallback(yyv1259, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1261 := &x.Items
				yym1262 := z.DecBinary()
				_ = yym1262
				if false {
				} else {
					h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1261), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1256)
		} // end switch yys1256
	} // end for yyj1256
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1263 int
	var yyb1263 bool
	var yyhl1263 bool = l >= 0
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1266 := &x.ListMeta
		yym1267 := z.DecBinary()
		_ = yym1267
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1266) {
		} else {
			z.DecFallback(yyv1266, false)
		}
	}
	yyj1263++
	if yyhl1263 {
		yyb1263 = yyj1263 > l
	} else {
		yyb1263 = r.CheckBreak()
	}
	if yyb1263 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1268 := &x.Items
		yym1269 := z.DecBinary()
		_ = yym1269
		if false {
		} else {
			h.decSlicePodSecurityPolicy((*[]PodSecurityPolicy)(yyv1268), d)
		}
	}
	for {
		yyj1263++
		if yyhl1263 {
			yyb1263 = yyj1263 > l
		} else {
			yyb1263 = r.CheckBreak()
		}
		if yyb1263 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1263-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1270 := z.EncBinary()
		_ = yym1270
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1271 := !z.EncBinary()
			yy2arr1271 := z.EncBasicHandle().StructToArray
			var yyq1271 [4]bool
			_, _, _ = yysep1271, yyq1271, yy2arr1271
			const yyr1271 bool = false
			yyq1271[0] = x.Kind != ""
			yyq1271[1] = x.APIVersion != ""
			yyq1271[2] = true
			yyq1271[3] = true
			var yynn1271 int
			if yyr1271 || yy2arr1271 {
				r.EncodeArrayStart(4)
			} else {
				yynn1271 = 0
				for _, b := range yyq1271 {
					if b {
						yynn1271++
					}
				}
				r.EncodeMapStart(yynn1271)
				yynn1271 = 0
			}
			if yyr1271 || yy2arr1271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1271[0] {
					yym1273 := z.EncBinary()
					_ = yym1273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1271[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1274 := z.EncBinary()
					_ = yym1274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1271 || yy2arr1271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1271[1] {
					yym1276 := z.EncBinary()
					_ = yym1276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1271[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1277 := z.EncBinary()
					_ = yym1277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1271 || yy2arr1271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1271[2] {
					yy1279 := &x.ObjectMeta
					yym1280 := z.EncBinary()
					_ = yym1280
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1279) {
					} else {
						z.EncFallback(yy1279)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1271[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1281 := &x.ObjectMeta
					yym1282 := z.EncBinary()
					_ = yym1282
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1281) {
					} else {
						z.EncFallback(yy1281)
					}
				}
			}
			if yyr1271 || yy2arr1271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1271[3] {
					yy1284 := &x.Spec
					yy1284.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1271[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1285 := &x.Spec
					yy1285.CodecEncodeSelf(e)
				}
			}
			if yyr1271 || yy2arr1271 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1286 := z.DecBinary()
	_ = yym1286
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1287 := r.ContainerType()
		if yyct1287 == codecSelferValueTypeMap1234 {
			yyl1287 := r.ReadMapStart()
			if yyl1287 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1287, d)
			}
		} else if yyct1287 == codecSelferValueTypeArray1234 {
			yyl1287 := r.ReadArrayStart()
			if yyl1287 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1287, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicy) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1288Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1288Slc
	var yyhl1288 bool = l >= 0
	for yyj1288 := 0; ; yyj1288++ {
		if yyhl1288 {
			if yyj1288 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1288Slc = r.DecodeBytes(yys1288Slc, true, true)
		yys1288 := string(yys1288Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1288 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv1291 := &x.ObjectMeta
				yym1292 := z.DecBinary()
				_ = yym1292
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1291) {
				} else {
					z.DecFallback(yyv1291, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NetworkPolicySpec{}
			} else {
				yyv1293 := &x.Spec
				yyv1293.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1288)
		} // end switch yys1288
	} // end for yyj1288
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicy) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1294 int
	var yyb1294 bool
	var yyhl1294 bool = l >= 0
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv1297 := &x.ObjectMeta
		yym1298 := z.DecBinary()
		_ = yym1298
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1297) {
		} else {
			z.DecFallback(yyv1297, false)
		}
	}
	yyj1294++
	if yyhl1294 {
		yyb1294 = yyj1294 > l
	} else {
		yyb1294 = r.CheckBreak()
	}
	if yyb1294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NetworkPolicySpec{}
	} else {
		yyv1299 := &x.Spec
		yyv1299.CodecDecodeSelf(d)
	}
	for {
		yyj1294++
		if yyhl1294 {
			yyb1294 = yyj1294 > l
		} else {
			yyb1294 = r.CheckBreak()
		}
		if yyb1294 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1294-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicySpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1300 := z.EncBinary()
		_ = yym1300
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1301 := !z.EncBinary()
			yy2arr1301 := z.EncBasicHandle().StructToArray
			var yyq1301 [2]bool
			_, _, _ = yysep1301, yyq1301, yy2arr1301
			const yyr1301 bool = false
			yyq1301[1] = len(x.Ingress) != 0
			var yynn1301 int
			if yyr1301 || yy2arr1301 {
				r.EncodeArrayStart(2)
			} else {
				yynn1301 = 1
				for _, b := range yyq1301 {
					if b {
						yynn1301++
					}
				}
				r.EncodeMapStart(yynn1301)
				yynn1301 = 0
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1303 := &x.PodSelector
				yym1304 := z.EncBinary()
				_ = yym1304
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1303) {
				} else {
					z.EncFallback(yy1303)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1305 := &x.PodSelector
				yym1306 := z.EncBinary()
				_ = yym1306
				if false {
				} else if z.HasExtensions() && z.EncExt(yy1305) {
				} else {
					z.EncFallback(yy1305)
				}
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1301[1] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1308 := z.EncBinary()
						_ = yym1308
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1301[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym1309 := z.EncBinary()
						_ = yym1309
						if false {
						} else {
							h.encSliceNetworkPolicyIngressRule(([]NetworkPolicyIngressRule)(x.Ingress), e)
						}
					}
				}
			}
			if yyr1301 || yy2arr1301 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicySpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1310 := z.DecBinary()
	_ = yym1310
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1311 := r.ContainerType()
		if yyct1311 == codecSelferValueTypeMap1234 {
			yyl1311 := r.ReadMapStart()
			if yyl1311 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1311, d)
			}
		} else if yyct1311 == codecSelferValueTypeArray1234 {
			yyl1311 := r.ReadArrayStart()
			if yyl1311 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1311, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicySpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1312Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1312Slc
	var yyhl1312 bool = l >= 0
	for yyj1312 := 0; ; yyj1312++ {
		if yyhl1312 {
			if yyj1312 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1312Slc = r.DecodeBytes(yys1312Slc, true, true)
		yys1312 := string(yys1312Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1312 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				x.PodSelector = pkg1_unversioned.LabelSelector{}
			} else {
				yyv1313 := &x.PodSelector
				yym1314 := z.DecBinary()
				_ = yym1314
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1313) {
				} else {
					z.DecFallback(yyv1313, false)
				}
			}
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv1315 := &x.Ingress
				yym1316 := z.DecBinary()
				_ = yym1316
				if false {
				} else {
					h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1315), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1312)
		} // end switch yys1312
	} // end for yyj1312
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicySpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1317 int
	var yyb1317 bool
	var yyhl1317 bool = l >= 0
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSelector = pkg1_unversioned.LabelSelector{}
	} else {
		yyv1318 := &x.PodSelector
		yym1319 := z.DecBinary()
		_ = yym1319
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1318) {
		} else {
			z.DecFallback(yyv1318, false)
		}
	}
	yyj1317++
	if yyhl1317 {
		yyb1317 = yyj1317 > l
	} else {
		yyb1317 = r.CheckBreak()
	}
	if yyb1317 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv1320 := &x.Ingress
		yym1321 := z.DecBinary()
		_ = yym1321
		if false {
		} else {
			h.decSliceNetworkPolicyIngressRule((*[]NetworkPolicyIngressRule)(yyv1320), d)
		}
	}
	for {
		yyj1317++
		if yyhl1317 {
			yyb1317 = yyj1317 > l
		} else {
			yyb1317 = r.CheckBreak()
		}
		if yyb1317 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1317-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyIngressRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1322 := z.EncBinary()
		_ = yym1322
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1323 := !z.EncBinary()
			yy2arr1323 := z.EncBasicHandle().StructToArray
			var yyq1323 [2]bool
			_, _, _ = yysep1323, yyq1323, yy2arr1323
			const yyr1323 bool = false
			yyq1323[0] = len(x.Ports) != 0
			yyq1323[1] = len(x.From) != 0
			var yynn1323 int
			if yyr1323 || yy2arr1323 {
				r.EncodeArrayStart(2)
			} else {
				yynn1323 = 0
				for _, b := range yyq1323 {
					if b {
						yynn1323++
					}
				}
				r.EncodeMapStart(yynn1323)
				yynn1323 = 0
			}
			if yyr1323 || yy2arr1323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1323[0] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1325 := z.EncBinary()
						_ = yym1325
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1323[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1326 := z.EncBinary()
						_ = yym1326
						if false {
						} else {
							h.encSliceNetworkPolicyPort(([]NetworkPolicyPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1323 || yy2arr1323 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1323[1] {
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1328 := z.EncBinary()
						_ = yym1328
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1323[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("from"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.From == nil {
						r.EncodeNil()
					} else {
						yym1329 := z.EncBinary()
						_ = yym1329
						if false {
						} else {
							h.encSliceNetworkPolicyPeer(([]NetworkPolicyPeer)(x.From), e)
						}
					}
				}
			}
			if yyr1323 || yy2arr1323 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyIngressRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1330 := z.DecBinary()
	_ = yym1330
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1331 := r.ContainerType()
		if yyct1331 == codecSelferValueTypeMap1234 {
			yyl1331 := r.ReadMapStart()
			if yyl1331 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1331, d)
			}
		} else if yyct1331 == codecSelferValueTypeArray1234 {
			yyl1331 := r.ReadArrayStart()
			if yyl1331 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1331, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1332Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1332Slc
	var yyhl1332 bool = l >= 0
	for yyj1332 := 0; ; yyj1332++ {
		if yyhl1332 {
			if yyj1332 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1332Slc = r.DecodeBytes(yys1332Slc, true, true)
		yys1332 := string(yys1332Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1332 {
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1333 := &x.Ports
				yym1334 := z.DecBinary()
				_ = yym1334
				if false {
				} else {
					h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1333), d)
				}
			}
		case "from":
			if r.TryDecodeAsNil() {
				x.From = nil
			} else {
				yyv1335 := &x.From
				yym1336 := z.DecBinary()
				_ = yym1336
				if false {
				} else {
					h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1335), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1332)
		} // end switch yys1332
	} // end for yyj1332
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyIngressRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1337 int
	var yyb1337 bool
	var yyhl1337 bool = l >= 0
	yyj1337++
	if yyhl1337 {
		yyb1337 = yyj1337 > l
	} else {
		yyb1337 = r.CheckBreak()
	}
	if yyb1337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1338 := &x.Ports
		yym1339 := z.DecBinary()
		_ = yym1339
		if false {
		} else {
			h.decSliceNetworkPolicyPort((*[]NetworkPolicyPort)(yyv1338), d)
		}
	}
	yyj1337++
	if yyhl1337 {
		yyb1337 = yyj1337 > l
	} else {
		yyb1337 = r.CheckBreak()
	}
	if yyb1337 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.From = nil
	} else {
		yyv1340 := &x.From
		yym1341 := z.DecBinary()
		_ = yym1341
		if false {
		} else {
			h.decSliceNetworkPolicyPeer((*[]NetworkPolicyPeer)(yyv1340), d)
		}
	}
	for {
		yyj1337++
		if yyhl1337 {
			yyb1337 = yyj1337 > l
		} else {
			yyb1337 = r.CheckBreak()
		}
		if yyb1337 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1337-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1342 := z.EncBinary()
		_ = yym1342
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1343 := !z.EncBinary()
			yy2arr1343 := z.EncBasicHandle().StructToArray
			var yyq1343 [2]bool
			_, _, _ = yysep1343, yyq1343, yy2arr1343
			const yyr1343 bool = false
			yyq1343[0] = x.Protocol != nil
			yyq1343[1] = x.Port != nil
			var yynn1343 int
			if yyr1343 || yy2arr1343 {
				r.EncodeArrayStart(2)
			} else {
				yynn1343 = 0
				for _, b := range yyq1343 {
					if b {
						yynn1343++
					}
				}
				r.EncodeMapStart(yynn1343)
				yynn1343 = 0
			}
			if yyr1343 || yy2arr1343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1343[0] {
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1345 := *x.Protocol
						yym1346 := z.EncBinary()
						_ = yym1346
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1345) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1345))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1343[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Protocol == nil {
						r.EncodeNil()
					} else {
						yy1347 := *x.Protocol
						yym1348 := z.EncBinary()
						_ = yym1348
						if false {
						} else if z.HasExtensions() && z.EncExt(yy1347) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy1347))
						}
					}
				}
			}
			if yyr1343 || yy2arr1343 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1343[1] {
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1350 := z.EncBinary()
						_ = yym1350
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1350 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1343[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Port == nil {
						r.EncodeNil()
					} else {
						yym1351 := z.EncBinary()
						_ = yym1351
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Port) {
						} else if !yym1351 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.Port)
						} else {
							z.EncFallback(x.Port)
						}
					}
				}
			}
			if yyr1343 || yy2arr1343 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1352 := z.DecBinary()
	_ = yym1352
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1353 := r.ContainerType()
		if yyct1353 == codecSelferValueTypeMap1234 {
			yyl1353 := r.ReadMapStart()
			if yyl1353 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1353, d)
			}
		} else if yyct1353 == codecSelferValueTypeArray1234 {
			yyl1353 := r.ReadArrayStart()
			if yyl1353 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1353, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1354Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1354Slc
	var yyhl1354 bool = l >= 0
	for yyj1354 := 0; ; yyj1354++ {
		if yyhl1354 {
			if yyj1354 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1354Slc = r.DecodeBytes(yys1354Slc, true, true)
		yys1354 := string(yys1354Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1354 {
		case "protocol":
			if r.TryDecodeAsNil() {
				if x.Protocol != nil {
					x.Protocol = nil
				}
			} else {
				if x.Protocol == nil {
					x.Protocol = new(pkg2_api.Protocol)
				}
				yym1356 := z.DecBinary()
				_ = yym1356
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Protocol) {
				} else {
					*((*string)(x.Protocol)) = r.DecodeString()
				}
			}
		case "port":
			if r.TryDecodeAsNil() {
				if x.Port != nil {
					x.Port = nil
				}
			} else {
				if x.Port == nil {
					x.Port = new(pkg5_intstr.IntOrString)
				}
				yym1358 := z.DecBinary()
				_ = yym1358
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Port) {
				} else if !yym1358 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.Port)
				} else {
					z.DecFallback(x.Port, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1354)
		} // end switch yys1354
	} // end for yyj1354
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1359 int
	var yyb1359 bool
	var yyhl1359 bool = l >= 0
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Protocol != nil {
			x.Protocol = nil
		}
	} else {
		if x.Protocol == nil {
			x.Protocol = new(pkg2_api.Protocol)
		}
		yym1361 := z.DecBinary()
		_ = yym1361
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Protocol) {
		} else {
			*((*string)(x.Protocol)) = r.DecodeString()
		}
	}
	yyj1359++
	if yyhl1359 {
		yyb1359 = yyj1359 > l
	} else {
		yyb1359 = r.CheckBreak()
	}
	if yyb1359 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Port != nil {
			x.Port = nil
		}
	} else {
		if x.Port == nil {
			x.Port = new(pkg5_intstr.IntOrString)
		}
		yym1363 := z.DecBinary()
		_ = yym1363
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Port) {
		} else if !yym1363 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.Port)
		} else {
			z.DecFallback(x.Port, false)
		}
	}
	for {
		yyj1359++
		if yyhl1359 {
			yyb1359 = yyj1359 > l
		} else {
			yyb1359 = r.CheckBreak()
		}
		if yyb1359 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1359-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyPeer) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1364 := z.EncBinary()
		_ = yym1364
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1365 := !z.EncBinary()
			yy2arr1365 := z.EncBasicHandle().StructToArray
			var yyq1365 [2]bool
			_, _, _ = yysep1365, yyq1365, yy2arr1365
			const yyr1365 bool = false
			yyq1365[0] = x.PodSelector != nil
			yyq1365[1] = x.NamespaceSelector != nil
			var yynn1365 int
			if yyr1365 || yy2arr1365 {
				r.EncodeArrayStart(2)
			} else {
				yynn1365 = 0
				for _, b := range yyq1365 {
					if b {
						yynn1365++
					}
				}
				r.EncodeMapStart(yynn1365)
				yynn1365 = 0
			}
			if yyr1365 || yy2arr1365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1365[0] {
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						yym1367 := z.EncBinary()
						_ = yym1367
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodSelector) {
						} else {
							z.EncFallback(x.PodSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1365[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodSelector == nil {
						r.EncodeNil()
					} else {
						yym1368 := z.EncBinary()
						_ = yym1368
						if false {
						} else if z.HasExtensions() && z.EncExt(x.PodSelector) {
						} else {
							z.EncFallback(x.PodSelector)
						}
					}
				}
			}
			if yyr1365 || yy2arr1365 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1365[1] {
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						yym1370 := z.EncBinary()
						_ = yym1370
						if false {
						} else if z.HasExtensions() && z.EncExt(x.NamespaceSelector) {
						} else {
							z.EncFallback(x.NamespaceSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1365[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespaceSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NamespaceSelector == nil {
						r.EncodeNil()
					} else {
						yym1371 := z.EncBinary()
						_ = yym1371
						if false {
						} else if z.HasExtensions() && z.EncExt(x.NamespaceSelector) {
						} else {
							z.EncFallback(x.NamespaceSelector)
						}
					}
				}
			}
			if yyr1365 || yy2arr1365 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyPeer) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1372 := z.DecBinary()
	_ = yym1372
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1373 := r.ContainerType()
		if yyct1373 == codecSelferValueTypeMap1234 {
			yyl1373 := r.ReadMapStart()
			if yyl1373 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1373, d)
			}
		} else if yyct1373 == codecSelferValueTypeArray1234 {
			yyl1373 := r.ReadArrayStart()
			if yyl1373 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1373, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1374Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1374Slc
	var yyhl1374 bool = l >= 0
	for yyj1374 := 0; ; yyj1374++ {
		if yyhl1374 {
			if yyj1374 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1374Slc = r.DecodeBytes(yys1374Slc, true, true)
		yys1374 := string(yys1374Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1374 {
		case "podSelector":
			if r.TryDecodeAsNil() {
				if x.PodSelector != nil {
					x.PodSelector = nil
				}
			} else {
				if x.PodSelector == nil {
					x.PodSelector = new(pkg1_unversioned.LabelSelector)
				}
				yym1376 := z.DecBinary()
				_ = yym1376
				if false {
				} else if z.HasExtensions() && z.DecExt(x.PodSelector) {
				} else {
					z.DecFallback(x.PodSelector, false)
				}
			}
		case "namespaceSelector":
			if r.TryDecodeAsNil() {
				if x.NamespaceSelector != nil {
					x.NamespaceSelector = nil
				}
			} else {
				if x.NamespaceSelector == nil {
					x.NamespaceSelector = new(pkg1_unversioned.LabelSelector)
				}
				yym1378 := z.DecBinary()
				_ = yym1378
				if false {
				} else if z.HasExtensions() && z.DecExt(x.NamespaceSelector) {
				} else {
					z.DecFallback(x.NamespaceSelector, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1374)
		} // end switch yys1374
	} // end for yyj1374
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyPeer) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1379 int
	var yyb1379 bool
	var yyhl1379 bool = l >= 0
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodSelector != nil {
			x.PodSelector = nil
		}
	} else {
		if x.PodSelector == nil {
			x.PodSelector = new(pkg1_unversioned.LabelSelector)
		}
		yym1381 := z.DecBinary()
		_ = yym1381
		if false {
		} else if z.HasExtensions() && z.DecExt(x.PodSelector) {
		} else {
			z.DecFallback(x.PodSelector, false)
		}
	}
	yyj1379++
	if yyhl1379 {
		yyb1379 = yyj1379 > l
	} else {
		yyb1379 = r.CheckBreak()
	}
	if yyb1379 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NamespaceSelector != nil {
			x.NamespaceSelector = nil
		}
	} else {
		if x.NamespaceSelector == nil {
			x.NamespaceSelector = new(pkg1_unversioned.LabelSelector)
		}
		yym1383 := z.DecBinary()
		_ = yym1383
		if false {
		} else if z.HasExtensions() && z.DecExt(x.NamespaceSelector) {
		} else {
			z.DecFallback(x.NamespaceSelector, false)
		}
	}
	for {
		yyj1379++
		if yyhl1379 {
			yyb1379 = yyj1379 > l
		} else {
			yyb1379 = r.CheckBreak()
		}
		if yyb1379 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1379-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NetworkPolicyList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1384 := z.EncBinary()
		_ = yym1384
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1385 := !z.EncBinary()
			yy2arr1385 := z.EncBasicHandle().StructToArray
			var yyq1385 [4]bool
			_, _, _ = yysep1385, yyq1385, yy2arr1385
			const yyr1385 bool = false
			yyq1385[0] = x.Kind != ""
			yyq1385[1] = x.APIVersion != ""
			yyq1385[2] = true
			var yynn1385 int
			if yyr1385 || yy2arr1385 {
				r.EncodeArrayStart(4)
			} else {
				yynn1385 = 1
				for _, b := range yyq1385 {
					if b {
						yynn1385++
					}
				}
				r.EncodeMapStart(yynn1385)
				yynn1385 = 0
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1385[0] {
					yym1387 := z.EncBinary()
					_ = yym1387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1385[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1388 := z.EncBinary()
					_ = yym1388
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1385[1] {
					yym1390 := z.EncBinary()
					_ = yym1390
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1385[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1391 := z.EncBinary()
					_ = yym1391
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1385[2] {
					yy1393 := &x.ListMeta
					yym1394 := z.EncBinary()
					_ = yym1394
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1393) {
					} else {
						z.EncFallback(yy1393)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1385[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1395 := &x.ListMeta
					yym1396 := z.EncBinary()
					_ = yym1396
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1395) {
					} else {
						z.EncFallback(yy1395)
					}
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1398 := z.EncBinary()
					_ = yym1398
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1399 := z.EncBinary()
					_ = yym1399
					if false {
					} else {
						h.encSliceNetworkPolicy(([]NetworkPolicy)(x.Items), e)
					}
				}
			}
			if yyr1385 || yy2arr1385 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NetworkPolicyList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1400 := z.DecBinary()
	_ = yym1400
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1401 := r.ContainerType()
		if yyct1401 == codecSelferValueTypeMap1234 {
			yyl1401 := r.ReadMapStart()
			if yyl1401 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1401, d)
			}
		} else if yyct1401 == codecSelferValueTypeArray1234 {
			yyl1401 := r.ReadArrayStart()
			if yyl1401 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1401, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NetworkPolicyList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1402Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1402Slc
	var yyhl1402 bool = l >= 0
	for yyj1402 := 0; ; yyj1402++ {
		if yyhl1402 {
			if yyj1402 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1402Slc = r.DecodeBytes(yys1402Slc, true, true)
		yys1402 := string(yys1402Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1402 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv1405 := &x.ListMeta
				yym1406 := z.DecBinary()
				_ = yym1406
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1405) {
				} else {
					z.DecFallback(yyv1405, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1407 := &x.Items
				yym1408 := z.DecBinary()
				_ = yym1408
				if false {
				} else {
					h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1407), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1402)
		} // end switch yys1402
	} // end for yyj1402
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NetworkPolicyList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1409 int
	var yyb1409 bool
	var yyhl1409 bool = l >= 0
	yyj1409++
	if yyhl1409 {
		yyb1409 = yyj1409 > l
	} else {
		yyb1409 = r.CheckBreak()
	}
	if yyb1409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1409++
	if yyhl1409 {
		yyb1409 = yyj1409 > l
	} else {
		yyb1409 = r.CheckBreak()
	}
	if yyb1409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1409++
	if yyhl1409 {
		yyb1409 = yyj1409 > l
	} else {
		yyb1409 = r.CheckBreak()
	}
	if yyb1409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv1412 := &x.ListMeta
		yym1413 := z.DecBinary()
		_ = yym1413
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1412) {
		} else {
			z.DecFallback(yyv1412, false)
		}
	}
	yyj1409++
	if yyhl1409 {
		yyb1409 = yyj1409 > l
	} else {
		yyb1409 = r.CheckBreak()
	}
	if yyb1409 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1414 := &x.Items
		yym1415 := z.DecBinary()
		_ = yym1415
		if false {
		} else {
			h.decSliceNetworkPolicy((*[]NetworkPolicy)(yyv1414), d)
		}
	}
	for {
		yyj1409++
		if yyhl1409 {
			yyb1409 = yyj1409 > l
		} else {
			yyb1409 = r.CheckBreak()
		}
		if yyb1409 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1409-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceCustomMetricTarget(v []CustomMetricTarget, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1416 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1417 := &yyv1416
		yy1417.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricTarget(v *[]CustomMetricTarget, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1418 := *v
	yyh1418, yyl1418 := z.DecSliceHelperStart()
	var yyc1418 bool
	if yyl1418 == 0 {
		if yyv1418 == nil {
			yyv1418 = []CustomMetricTarget{}
			yyc1418 = true
		} else if len(yyv1418) != 0 {
			yyv1418 = yyv1418[:0]
			yyc1418 = true
		}
	} else if yyl1418 > 0 {
		var yyrr1418, yyrl1418 int
		var yyrt1418 bool
		if yyl1418 > cap(yyv1418) {

			yyrg1418 := len(yyv1418) > 0
			yyv21418 := yyv1418
			yyrl1418, yyrt1418 = z.DecInferLen(yyl1418, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1418 {
				if yyrl1418 <= cap(yyv1418) {
					yyv1418 = yyv1418[:yyrl1418]
				} else {
					yyv1418 = make([]CustomMetricTarget, yyrl1418)
				}
			} else {
				yyv1418 = make([]CustomMetricTarget, yyrl1418)
			}
			yyc1418 = true
			yyrr1418 = len(yyv1418)
			if yyrg1418 {
				copy(yyv1418, yyv21418)
			}
		} else if yyl1418 != len(yyv1418) {
			yyv1418 = yyv1418[:yyl1418]
			yyc1418 = true
		}
		yyj1418 := 0
		for ; yyj1418 < yyrr1418; yyj1418++ {
			yyh1418.ElemContainerState(yyj1418)
			if r.TryDecodeAsNil() {
				yyv1418[yyj1418] = CustomMetricTarget{}
			} else {
				yyv1419 := &yyv1418[yyj1418]
				yyv1419.CodecDecodeSelf(d)
			}

		}
		if yyrt1418 {
			for ; yyj1418 < yyl1418; yyj1418++ {
				yyv1418 = append(yyv1418, CustomMetricTarget{})
				yyh1418.ElemContainerState(yyj1418)
				if r.TryDecodeAsNil() {
					yyv1418[yyj1418] = CustomMetricTarget{}
				} else {
					yyv1420 := &yyv1418[yyj1418]
					yyv1420.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1418 := 0
		for ; !r.CheckBreak(); yyj1418++ {

			if yyj1418 >= len(yyv1418) {
				yyv1418 = append(yyv1418, CustomMetricTarget{}) // var yyz1418 CustomMetricTarget
				yyc1418 = true
			}
			yyh1418.ElemContainerState(yyj1418)
			if yyj1418 < len(yyv1418) {
				if r.TryDecodeAsNil() {
					yyv1418[yyj1418] = CustomMetricTarget{}
				} else {
					yyv1421 := &yyv1418[yyj1418]
					yyv1421.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1418 < len(yyv1418) {
			yyv1418 = yyv1418[:yyj1418]
			yyc1418 = true
		} else if yyj1418 == 0 && yyv1418 == nil {
			yyv1418 = []CustomMetricTarget{}
			yyc1418 = true
		}
	}
	yyh1418.End()
	if yyc1418 {
		*v = yyv1418
	}
}

func (x codecSelfer1234) encSliceCustomMetricCurrentStatus(v []CustomMetricCurrentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1422 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1423 := &yyv1422
		yy1423.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCustomMetricCurrentStatus(v *[]CustomMetricCurrentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1424 := *v
	yyh1424, yyl1424 := z.DecSliceHelperStart()
	var yyc1424 bool
	if yyl1424 == 0 {
		if yyv1424 == nil {
			yyv1424 = []CustomMetricCurrentStatus{}
			yyc1424 = true
		} else if len(yyv1424) != 0 {
			yyv1424 = yyv1424[:0]
			yyc1424 = true
		}
	} else if yyl1424 > 0 {
		var yyrr1424, yyrl1424 int
		var yyrt1424 bool
		if yyl1424 > cap(yyv1424) {

			yyrg1424 := len(yyv1424) > 0
			yyv21424 := yyv1424
			yyrl1424, yyrt1424 = z.DecInferLen(yyl1424, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt1424 {
				if yyrl1424 <= cap(yyv1424) {
					yyv1424 = yyv1424[:yyrl1424]
				} else {
					yyv1424 = make([]CustomMetricCurrentStatus, yyrl1424)
				}
			} else {
				yyv1424 = make([]CustomMetricCurrentStatus, yyrl1424)
			}
			yyc1424 = true
			yyrr1424 = len(yyv1424)
			if yyrg1424 {
				copy(yyv1424, yyv21424)
			}
		} else if yyl1424 != len(yyv1424) {
			yyv1424 = yyv1424[:yyl1424]
			yyc1424 = true
		}
		yyj1424 := 0
		for ; yyj1424 < yyrr1424; yyj1424++ {
			yyh1424.ElemContainerState(yyj1424)
			if r.TryDecodeAsNil() {
				yyv1424[yyj1424] = CustomMetricCurrentStatus{}
			} else {
				yyv1425 := &yyv1424[yyj1424]
				yyv1425.CodecDecodeSelf(d)
			}

		}
		if yyrt1424 {
			for ; yyj1424 < yyl1424; yyj1424++ {
				yyv1424 = append(yyv1424, CustomMetricCurrentStatus{})
				yyh1424.ElemContainerState(yyj1424)
				if r.TryDecodeAsNil() {
					yyv1424[yyj1424] = CustomMetricCurrentStatus{}
				} else {
					yyv1426 := &yyv1424[yyj1424]
					yyv1426.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1424 := 0
		for ; !r.CheckBreak(); yyj1424++ {

			if yyj1424 >= len(yyv1424) {
				yyv1424 = append(yyv1424, CustomMetricCurrentStatus{}) // var yyz1424 CustomMetricCurrentStatus
				yyc1424 = true
			}
			yyh1424.ElemContainerState(yyj1424)
			if yyj1424 < len(yyv1424) {
				if r.TryDecodeAsNil() {
					yyv1424[yyj1424] = CustomMetricCurrentStatus{}
				} else {
					yyv1427 := &yyv1424[yyj1424]
					yyv1427.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1424 < len(yyv1424) {
			yyv1424 = yyv1424[:yyj1424]
			yyc1424 = true
		} else if yyj1424 == 0 && yyv1424 == nil {
			yyv1424 = []CustomMetricCurrentStatus{}
			yyc1424 = true
		}
	}
	yyh1424.End()
	if yyc1424 {
		*v = yyv1424
	}
}

func (x codecSelfer1234) encSliceAPIVersion(v []APIVersion, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1428 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1429 := &yyv1428
		yy1429.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAPIVersion(v *[]APIVersion, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1430 := *v
	yyh1430, yyl1430 := z.DecSliceHelperStart()
	var yyc1430 bool
	if yyl1430 == 0 {
		if yyv1430 == nil {
			yyv1430 = []APIVersion{}
			yyc1430 = true
		} else if len(yyv1430) != 0 {
			yyv1430 = yyv1430[:0]
			yyc1430 = true
		}
	} else if yyl1430 > 0 {
		var yyrr1430, yyrl1430 int
		var yyrt1430 bool
		if yyl1430 > cap(yyv1430) {

			yyrg1430 := len(yyv1430) > 0
			yyv21430 := yyv1430
			yyrl1430, yyrt1430 = z.DecInferLen(yyl1430, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1430 {
				if yyrl1430 <= cap(yyv1430) {
					yyv1430 = yyv1430[:yyrl1430]
				} else {
					yyv1430 = make([]APIVersion, yyrl1430)
				}
			} else {
				yyv1430 = make([]APIVersion, yyrl1430)
			}
			yyc1430 = true
			yyrr1430 = len(yyv1430)
			if yyrg1430 {
				copy(yyv1430, yyv21430)
			}
		} else if yyl1430 != len(yyv1430) {
			yyv1430 = yyv1430[:yyl1430]
			yyc1430 = true
		}
		yyj1430 := 0
		for ; yyj1430 < yyrr1430; yyj1430++ {
			yyh1430.ElemContainerState(yyj1430)
			if r.TryDecodeAsNil() {
				yyv1430[yyj1430] = APIVersion{}
			} else {
				yyv1431 := &yyv1430[yyj1430]
				yyv1431.CodecDecodeSelf(d)
			}

		}
		if yyrt1430 {
			for ; yyj1430 < yyl1430; yyj1430++ {
				yyv1430 = append(yyv1430, APIVersion{})
				yyh1430.ElemContainerState(yyj1430)
				if r.TryDecodeAsNil() {
					yyv1430[yyj1430] = APIVersion{}
				} else {
					yyv1432 := &yyv1430[yyj1430]
					yyv1432.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1430 := 0
		for ; !r.CheckBreak(); yyj1430++ {

			if yyj1430 >= len(yyv1430) {
				yyv1430 = append(yyv1430, APIVersion{}) // var yyz1430 APIVersion
				yyc1430 = true
			}
			yyh1430.ElemContainerState(yyj1430)
			if yyj1430 < len(yyv1430) {
				if r.TryDecodeAsNil() {
					yyv1430[yyj1430] = APIVersion{}
				} else {
					yyv1433 := &yyv1430[yyj1430]
					yyv1433.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1430 < len(yyv1430) {
			yyv1430 = yyv1430[:yyj1430]
			yyc1430 = true
		} else if yyj1430 == 0 && yyv1430 == nil {
			yyv1430 = []APIVersion{}
			yyc1430 = true
		}
	}
	yyh1430.End()
	if yyc1430 {
		*v = yyv1430
	}
}

func (x codecSelfer1234) encSliceThirdPartyResource(v []ThirdPartyResource, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1434 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1435 := &yyv1434
		yy1435.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResource(v *[]ThirdPartyResource, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1436 := *v
	yyh1436, yyl1436 := z.DecSliceHelperStart()
	var yyc1436 bool
	if yyl1436 == 0 {
		if yyv1436 == nil {
			yyv1436 = []ThirdPartyResource{}
			yyc1436 = true
		} else if len(yyv1436) != 0 {
			yyv1436 = yyv1436[:0]
			yyc1436 = true
		}
	} else if yyl1436 > 0 {
		var yyrr1436, yyrl1436 int
		var yyrt1436 bool
		if yyl1436 > cap(yyv1436) {

			yyrg1436 := len(yyv1436) > 0
			yyv21436 := yyv1436
			yyrl1436, yyrt1436 = z.DecInferLen(yyl1436, z.DecBasicHandle().MaxInitLen, 296)
			if yyrt1436 {
				if yyrl1436 <= cap(yyv1436) {
					yyv1436 = yyv1436[:yyrl1436]
				} else {
					yyv1436 = make([]ThirdPartyResource, yyrl1436)
				}
			} else {
				yyv1436 = make([]ThirdPartyResource, yyrl1436)
			}
			yyc1436 = true
			yyrr1436 = len(yyv1436)
			if yyrg1436 {
				copy(yyv1436, yyv21436)
			}
		} else if yyl1436 != len(yyv1436) {
			yyv1436 = yyv1436[:yyl1436]
			yyc1436 = true
		}
		yyj1436 := 0
		for ; yyj1436 < yyrr1436; yyj1436++ {
			yyh1436.ElemContainerState(yyj1436)
			if r.TryDecodeAsNil() {
				yyv1436[yyj1436] = ThirdPartyResource{}
			} else {
				yyv1437 := &yyv1436[yyj1436]
				yyv1437.CodecDecodeSelf(d)
			}

		}
		if yyrt1436 {
			for ; yyj1436 < yyl1436; yyj1436++ {
				yyv1436 = append(yyv1436, ThirdPartyResource{})
				yyh1436.ElemContainerState(yyj1436)
				if r.TryDecodeAsNil() {
					yyv1436[yyj1436] = ThirdPartyResource{}
				} else {
					yyv1438 := &yyv1436[yyj1436]
					yyv1438.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1436 := 0
		for ; !r.CheckBreak(); yyj1436++ {

			if yyj1436 >= len(yyv1436) {
				yyv1436 = append(yyv1436, ThirdPartyResource{}) // var yyz1436 ThirdPartyResource
				yyc1436 = true
			}
			yyh1436.ElemContainerState(yyj1436)
			if yyj1436 < len(yyv1436) {
				if r.TryDecodeAsNil() {
					yyv1436[yyj1436] = ThirdPartyResource{}
				} else {
					yyv1439 := &yyv1436[yyj1436]
					yyv1439.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1436 < len(yyv1436) {
			yyv1436 = yyv1436[:yyj1436]
			yyc1436 = true
		} else if yyj1436 == 0 && yyv1436 == nil {
			yyv1436 = []ThirdPartyResource{}
			yyc1436 = true
		}
	}
	yyh1436.End()
	if yyc1436 {
		*v = yyv1436
	}
}

func (x codecSelfer1234) encSliceDeployment(v []Deployment, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1440 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1441 := &yyv1440
		yy1441.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDeployment(v *[]Deployment, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1442 := *v
	yyh1442, yyl1442 := z.DecSliceHelperStart()
	var yyc1442 bool
	if yyl1442 == 0 {
		if yyv1442 == nil {
			yyv1442 = []Deployment{}
			yyc1442 = true
		} else if len(yyv1442) != 0 {
			yyv1442 = yyv1442[:0]
			yyc1442 = true
		}
	} else if yyl1442 > 0 {
		var yyrr1442, yyrl1442 int
		var yyrt1442 bool
		if yyl1442 > cap(yyv1442) {

			yyrg1442 := len(yyv1442) > 0
			yyv21442 := yyv1442
			yyrl1442, yyrt1442 = z.DecInferLen(yyl1442, z.DecBasicHandle().MaxInitLen, 800)
			if yyrt1442 {
				if yyrl1442 <= cap(yyv1442) {
					yyv1442 = yyv1442[:yyrl1442]
				} else {
					yyv1442 = make([]Deployment, yyrl1442)
				}
			} else {
				yyv1442 = make([]Deployment, yyrl1442)
			}
			yyc1442 = true
			yyrr1442 = len(yyv1442)
			if yyrg1442 {
				copy(yyv1442, yyv21442)
			}
		} else if yyl1442 != len(yyv1442) {
			yyv1442 = yyv1442[:yyl1442]
			yyc1442 = true
		}
		yyj1442 := 0
		for ; yyj1442 < yyrr1442; yyj1442++ {
			yyh1442.ElemContainerState(yyj1442)
			if r.TryDecodeAsNil() {
				yyv1442[yyj1442] = Deployment{}
			} else {
				yyv1443 := &yyv1442[yyj1442]
				yyv1443.CodecDecodeSelf(d)
			}

		}
		if yyrt1442 {
			for ; yyj1442 < yyl1442; yyj1442++ {
				yyv1442 = append(yyv1442, Deployment{})
				yyh1442.ElemContainerState(yyj1442)
				if r.TryDecodeAsNil() {
					yyv1442[yyj1442] = Deployment{}
				} else {
					yyv1444 := &yyv1442[yyj1442]
					yyv1444.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1442 := 0
		for ; !r.CheckBreak(); yyj1442++ {

			if yyj1442 >= len(yyv1442) {
				yyv1442 = append(yyv1442, Deployment{}) // var yyz1442 Deployment
				yyc1442 = true
			}
			yyh1442.ElemContainerState(yyj1442)
			if yyj1442 < len(yyv1442) {
				if r.TryDecodeAsNil() {
					yyv1442[yyj1442] = Deployment{}
				} else {
					yyv1445 := &yyv1442[yyj1442]
					yyv1445.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1442 < len(yyv1442) {
			yyv1442 = yyv1442[:yyj1442]
			yyc1442 = true
		} else if yyj1442 == 0 && yyv1442 == nil {
			yyv1442 = []Deployment{}
			yyc1442 = true
		}
	}
	yyh1442.End()
	if yyc1442 {
		*v = yyv1442
	}
}

func (x codecSelfer1234) encSliceDaemonSet(v []DaemonSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1446 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1447 := &yyv1446
		yy1447.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDaemonSet(v *[]DaemonSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1448 := *v
	yyh1448, yyl1448 := z.DecSliceHelperStart()
	var yyc1448 bool
	if yyl1448 == 0 {
		if yyv1448 == nil {
			yyv1448 = []DaemonSet{}
			yyc1448 = true
		} else if len(yyv1448) != 0 {
			yyv1448 = yyv1448[:0]
			yyc1448 = true
		}
	} else if yyl1448 > 0 {
		var yyrr1448, yyrl1448 int
		var yyrt1448 bool
		if yyl1448 > cap(yyv1448) {

			yyrg1448 := len(yyv1448) > 0
			yyv21448 := yyv1448
			yyrl1448, yyrt1448 = z.DecInferLen(yyl1448, z.DecBasicHandle().MaxInitLen, 728)
			if yyrt1448 {
				if yyrl1448 <= cap(yyv1448) {
					yyv1448 = yyv1448[:yyrl1448]
				} else {
					yyv1448 = make([]DaemonSet, yyrl1448)
				}
			} else {
				yyv1448 = make([]DaemonSet, yyrl1448)
			}
			yyc1448 = true
			yyrr1448 = len(yyv1448)
			if yyrg1448 {
				copy(yyv1448, yyv21448)
			}
		} else if yyl1448 != len(yyv1448) {
			yyv1448 = yyv1448[:yyl1448]
			yyc1448 = true
		}
		yyj1448 := 0
		for ; yyj1448 < yyrr1448; yyj1448++ {
			yyh1448.ElemContainerState(yyj1448)
			if r.TryDecodeAsNil() {
				yyv1448[yyj1448] = DaemonSet{}
			} else {
				yyv1449 := &yyv1448[yyj1448]
				yyv1449.CodecDecodeSelf(d)
			}

		}
		if yyrt1448 {
			for ; yyj1448 < yyl1448; yyj1448++ {
				yyv1448 = append(yyv1448, DaemonSet{})
				yyh1448.ElemContainerState(yyj1448)
				if r.TryDecodeAsNil() {
					yyv1448[yyj1448] = DaemonSet{}
				} else {
					yyv1450 := &yyv1448[yyj1448]
					yyv1450.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1448 := 0
		for ; !r.CheckBreak(); yyj1448++ {

			if yyj1448 >= len(yyv1448) {
				yyv1448 = append(yyv1448, DaemonSet{}) // var yyz1448 DaemonSet
				yyc1448 = true
			}
			yyh1448.ElemContainerState(yyj1448)
			if yyj1448 < len(yyv1448) {
				if r.TryDecodeAsNil() {
					yyv1448[yyj1448] = DaemonSet{}
				} else {
					yyv1451 := &yyv1448[yyj1448]
					yyv1451.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1448 < len(yyv1448) {
			yyv1448 = yyv1448[:yyj1448]
			yyc1448 = true
		} else if yyj1448 == 0 && yyv1448 == nil {
			yyv1448 = []DaemonSet{}
			yyc1448 = true
		}
	}
	yyh1448.End()
	if yyc1448 {
		*v = yyv1448
	}
}

func (x codecSelfer1234) encSliceThirdPartyResourceData(v []ThirdPartyResourceData, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1452 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1453 := &yyv1452
		yy1453.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceThirdPartyResourceData(v *[]ThirdPartyResourceData, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1454 := *v
	yyh1454, yyl1454 := z.DecSliceHelperStart()
	var yyc1454 bool
	if yyl1454 == 0 {
		if yyv1454 == nil {
			yyv1454 = []ThirdPartyResourceData{}
			yyc1454 = true
		} else if len(yyv1454) != 0 {
			yyv1454 = yyv1454[:0]
			yyc1454 = true
		}
	} else if yyl1454 > 0 {
		var yyrr1454, yyrl1454 int
		var yyrt1454 bool
		if yyl1454 > cap(yyv1454) {

			yyrg1454 := len(yyv1454) > 0
			yyv21454 := yyv1454
			yyrl1454, yyrt1454 = z.DecInferLen(yyl1454, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt1454 {
				if yyrl1454 <= cap(yyv1454) {
					yyv1454 = yyv1454[:yyrl1454]
				} else {
					yyv1454 = make([]ThirdPartyResourceData, yyrl1454)
				}
			} else {
				yyv1454 = make([]ThirdPartyResourceData, yyrl1454)
			}
			yyc1454 = true
			yyrr1454 = len(yyv1454)
			if yyrg1454 {
				copy(yyv1454, yyv21454)
			}
		} else if yyl1454 != len(yyv1454) {
			yyv1454 = yyv1454[:yyl1454]
			yyc1454 = true
		}
		yyj1454 := 0
		for ; yyj1454 < yyrr1454; yyj1454++ {
			yyh1454.ElemContainerState(yyj1454)
			if r.TryDecodeAsNil() {
				yyv1454[yyj1454] = ThirdPartyResourceData{}
			} else {
				yyv1455 := &yyv1454[yyj1454]
				yyv1455.CodecDecodeSelf(d)
			}

		}
		if yyrt1454 {
			for ; yyj1454 < yyl1454; yyj1454++ {
				yyv1454 = append(yyv1454, ThirdPartyResourceData{})
				yyh1454.ElemContainerState(yyj1454)
				if r.TryDecodeAsNil() {
					yyv1454[yyj1454] = ThirdPartyResourceData{}
				} else {
					yyv1456 := &yyv1454[yyj1454]
					yyv1456.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1454 := 0
		for ; !r.CheckBreak(); yyj1454++ {

			if yyj1454 >= len(yyv1454) {
				yyv1454 = append(yyv1454, ThirdPartyResourceData{}) // var yyz1454 ThirdPartyResourceData
				yyc1454 = true
			}
			yyh1454.ElemContainerState(yyj1454)
			if yyj1454 < len(yyv1454) {
				if r.TryDecodeAsNil() {
					yyv1454[yyj1454] = ThirdPartyResourceData{}
				} else {
					yyv1457 := &yyv1454[yyj1454]
					yyv1457.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1454 < len(yyv1454) {
			yyv1454 = yyv1454[:yyj1454]
			yyc1454 = true
		} else if yyj1454 == 0 && yyv1454 == nil {
			yyv1454 = []ThirdPartyResourceData{}
			yyc1454 = true
		}
	}
	yyh1454.End()
	if yyc1454 {
		*v = yyv1454
	}
}

func (x codecSelfer1234) encSliceIngress(v []Ingress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1458 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1459 := &yyv1458
		yy1459.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngress(v *[]Ingress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1460 := *v
	yyh1460, yyl1460 := z.DecSliceHelperStart()
	var yyc1460 bool
	if yyl1460 == 0 {
		if yyv1460 == nil {
			yyv1460 = []Ingress{}
			yyc1460 = true
		} else if len(yyv1460) != 0 {
			yyv1460 = yyv1460[:0]
			yyc1460 = true
		}
	} else if yyl1460 > 0 {
		var yyrr1460, yyrl1460 int
		var yyrt1460 bool
		if yyl1460 > cap(yyv1460) {

			yyrg1460 := len(yyv1460) > 0
			yyv21460 := yyv1460
			yyrl1460, yyrt1460 = z.DecInferLen(yyl1460, z.DecBasicHandle().MaxInitLen, 336)
			if yyrt1460 {
				if yyrl1460 <= cap(yyv1460) {
					yyv1460 = yyv1460[:yyrl1460]
				} else {
					yyv1460 = make([]Ingress, yyrl1460)
				}
			} else {
				yyv1460 = make([]Ingress, yyrl1460)
			}
			yyc1460 = true
			yyrr1460 = len(yyv1460)
			if yyrg1460 {
				copy(yyv1460, yyv21460)
			}
		} else if yyl1460 != len(yyv1460) {
			yyv1460 = yyv1460[:yyl1460]
			yyc1460 = true
		}
		yyj1460 := 0
		for ; yyj1460 < yyrr1460; yyj1460++ {
			yyh1460.ElemContainerState(yyj1460)
			if r.TryDecodeAsNil() {
				yyv1460[yyj1460] = Ingress{}
			} else {
				yyv1461 := &yyv1460[yyj1460]
				yyv1461.CodecDecodeSelf(d)
			}

		}
		if yyrt1460 {
			for ; yyj1460 < yyl1460; yyj1460++ {
				yyv1460 = append(yyv1460, Ingress{})
				yyh1460.ElemContainerState(yyj1460)
				if r.TryDecodeAsNil() {
					yyv1460[yyj1460] = Ingress{}
				} else {
					yyv1462 := &yyv1460[yyj1460]
					yyv1462.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1460 := 0
		for ; !r.CheckBreak(); yyj1460++ {

			if yyj1460 >= len(yyv1460) {
				yyv1460 = append(yyv1460, Ingress{}) // var yyz1460 Ingress
				yyc1460 = true
			}
			yyh1460.ElemContainerState(yyj1460)
			if yyj1460 < len(yyv1460) {
				if r.TryDecodeAsNil() {
					yyv1460[yyj1460] = Ingress{}
				} else {
					yyv1463 := &yyv1460[yyj1460]
					yyv1463.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1460 < len(yyv1460) {
			yyv1460 = yyv1460[:yyj1460]
			yyc1460 = true
		} else if yyj1460 == 0 && yyv1460 == nil {
			yyv1460 = []Ingress{}
			yyc1460 = true
		}
	}
	yyh1460.End()
	if yyc1460 {
		*v = yyv1460
	}
}

func (x codecSelfer1234) encSliceIngressTLS(v []IngressTLS, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1464 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1465 := &yyv1464
		yy1465.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressTLS(v *[]IngressTLS, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1466 := *v
	yyh1466, yyl1466 := z.DecSliceHelperStart()
	var yyc1466 bool
	if yyl1466 == 0 {
		if yyv1466 == nil {
			yyv1466 = []IngressTLS{}
			yyc1466 = true
		} else if len(yyv1466) != 0 {
			yyv1466 = yyv1466[:0]
			yyc1466 = true
		}
	} else if yyl1466 > 0 {
		var yyrr1466, yyrl1466 int
		var yyrt1466 bool
		if yyl1466 > cap(yyv1466) {

			yyrg1466 := len(yyv1466) > 0
			yyv21466 := yyv1466
			yyrl1466, yyrt1466 = z.DecInferLen(yyl1466, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt1466 {
				if yyrl1466 <= cap(yyv1466) {
					yyv1466 = yyv1466[:yyrl1466]
				} else {
					yyv1466 = make([]IngressTLS, yyrl1466)
				}
			} else {
				yyv1466 = make([]IngressTLS, yyrl1466)
			}
			yyc1466 = true
			yyrr1466 = len(yyv1466)
			if yyrg1466 {
				copy(yyv1466, yyv21466)
			}
		} else if yyl1466 != len(yyv1466) {
			yyv1466 = yyv1466[:yyl1466]
			yyc1466 = true
		}
		yyj1466 := 0
		for ; yyj1466 < yyrr1466; yyj1466++ {
			yyh1466.ElemContainerState(yyj1466)
			if r.TryDecodeAsNil() {
				yyv1466[yyj1466] = IngressTLS{}
			} else {
				yyv1467 := &yyv1466[yyj1466]
				yyv1467.CodecDecodeSelf(d)
			}

		}
		if yyrt1466 {
			for ; yyj1466 < yyl1466; yyj1466++ {
				yyv1466 = append(yyv1466, IngressTLS{})
				yyh1466.ElemContainerState(yyj1466)
				if r.TryDecodeAsNil() {
					yyv1466[yyj1466] = IngressTLS{}
				} else {
					yyv1468 := &yyv1466[yyj1466]
					yyv1468.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1466 := 0
		for ; !r.CheckBreak(); yyj1466++ {

			if yyj1466 >= len(yyv1466) {
				yyv1466 = append(yyv1466, IngressTLS{}) // var yyz1466 IngressTLS
				yyc1466 = true
			}
			yyh1466.ElemContainerState(yyj1466)
			if yyj1466 < len(yyv1466) {
				if r.TryDecodeAsNil() {
					yyv1466[yyj1466] = IngressTLS{}
				} else {
					yyv1469 := &yyv1466[yyj1466]
					yyv1469.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1466 < len(yyv1466) {
			yyv1466 = yyv1466[:yyj1466]
			yyc1466 = true
		} else if yyj1466 == 0 && yyv1466 == nil {
			yyv1466 = []IngressTLS{}
			yyc1466 = true
		}
	}
	yyh1466.End()
	if yyc1466 {
		*v = yyv1466
	}
}

func (x codecSelfer1234) encSliceIngressRule(v []IngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1470 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1471 := &yyv1470
		yy1471.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIngressRule(v *[]IngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1472 := *v
	yyh1472, yyl1472 := z.DecSliceHelperStart()
	var yyc1472 bool
	if yyl1472 == 0 {
		if yyv1472 == nil {
			yyv1472 = []IngressRule{}
			yyc1472 = true
		} else if len(yyv1472) != 0 {
			yyv1472 = yyv1472[:0]
			yyc1472 = true
		}
	} else if yyl1472 > 0 {
		var yyrr1472, yyrl1472 int
		var yyrt1472 bool
		if yyl1472 > cap(yyv1472) {

			yyrg1472 := len(yyv1472) > 0
			yyv21472 := yyv1472
			yyrl1472, yyrt1472 = z.DecInferLen(yyl1472, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt1472 {
				if yyrl1472 <= cap(yyv1472) {
					yyv1472 = yyv1472[:yyrl1472]
				} else {
					yyv1472 = make([]IngressRule, yyrl1472)
				}
			} else {
				yyv1472 = make([]IngressRule, yyrl1472)
			}
			yyc1472 = true
			yyrr1472 = len(yyv1472)
			if yyrg1472 {
				copy(yyv1472, yyv21472)
			}
		} else if yyl1472 != len(yyv1472) {
			yyv1472 = yyv1472[:yyl1472]
			yyc1472 = true
		}
		yyj1472 := 0
		for ; yyj1472 < yyrr1472; yyj1472++ {
			yyh1472.ElemContainerState(yyj1472)
			if r.TryDecodeAsNil() {
				yyv1472[yyj1472] = IngressRule{}
			} else {
				yyv1473 := &yyv1472[yyj1472]
				yyv1473.CodecDecodeSelf(d)
			}

		}
		if yyrt1472 {
			for ; yyj1472 < yyl1472; yyj1472++ {
				yyv1472 = append(yyv1472, IngressRule{})
				yyh1472.ElemContainerState(yyj1472)
				if r.TryDecodeAsNil() {
					yyv1472[yyj1472] = IngressRule{}
				} else {
					yyv1474 := &yyv1472[yyj1472]
					yyv1474.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1472 := 0
		for ; !r.CheckBreak(); yyj1472++ {

			if yyj1472 >= len(yyv1472) {
				yyv1472 = append(yyv1472, IngressRule{}) // var yyz1472 IngressRule
				yyc1472 = true
			}
			yyh1472.ElemContainerState(yyj1472)
			if yyj1472 < len(yyv1472) {
				if r.TryDecodeAsNil() {
					yyv1472[yyj1472] = IngressRule{}
				} else {
					yyv1475 := &yyv1472[yyj1472]
					yyv1475.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1472 < len(yyv1472) {
			yyv1472 = yyv1472[:yyj1472]
			yyc1472 = true
		} else if yyj1472 == 0 && yyv1472 == nil {
			yyv1472 = []IngressRule{}
			yyc1472 = true
		}
	}
	yyh1472.End()
	if yyc1472 {
		*v = yyv1472
	}
}

func (x codecSelfer1234) encSliceHTTPIngressPath(v []HTTPIngressPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1476 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1477 := &yyv1476
		yy1477.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPIngressPath(v *[]HTTPIngressPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1478 := *v
	yyh1478, yyl1478 := z.DecSliceHelperStart()
	var yyc1478 bool
	if yyl1478 == 0 {
		if yyv1478 == nil {
			yyv1478 = []HTTPIngressPath{}
			yyc1478 = true
		} else if len(yyv1478) != 0 {
			yyv1478 = yyv1478[:0]
			yyc1478 = true
		}
	} else if yyl1478 > 0 {
		var yyrr1478, yyrl1478 int
		var yyrt1478 bool
		if yyl1478 > cap(yyv1478) {

			yyrg1478 := len(yyv1478) > 0
			yyv21478 := yyv1478
			yyrl1478, yyrt1478 = z.DecInferLen(yyl1478, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt1478 {
				if yyrl1478 <= cap(yyv1478) {
					yyv1478 = yyv1478[:yyrl1478]
				} else {
					yyv1478 = make([]HTTPIngressPath, yyrl1478)
				}
			} else {
				yyv1478 = make([]HTTPIngressPath, yyrl1478)
			}
			yyc1478 = true
			yyrr1478 = len(yyv1478)
			if yyrg1478 {
				copy(yyv1478, yyv21478)
			}
		} else if yyl1478 != len(yyv1478) {
			yyv1478 = yyv1478[:yyl1478]
			yyc1478 = true
		}
		yyj1478 := 0
		for ; yyj1478 < yyrr1478; yyj1478++ {
			yyh1478.ElemContainerState(yyj1478)
			if r.TryDecodeAsNil() {
				yyv1478[yyj1478] = HTTPIngressPath{}
			} else {
				yyv1479 := &yyv1478[yyj1478]
				yyv1479.CodecDecodeSelf(d)
			}

		}
		if yyrt1478 {
			for ; yyj1478 < yyl1478; yyj1478++ {
				yyv1478 = append(yyv1478, HTTPIngressPath{})
				yyh1478.ElemContainerState(yyj1478)
				if r.TryDecodeAsNil() {
					yyv1478[yyj1478] = HTTPIngressPath{}
				} else {
					yyv1480 := &yyv1478[yyj1478]
					yyv1480.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1478 := 0
		for ; !r.CheckBreak(); yyj1478++ {

			if yyj1478 >= len(yyv1478) {
				yyv1478 = append(yyv1478, HTTPIngressPath{}) // var yyz1478 HTTPIngressPath
				yyc1478 = true
			}
			yyh1478.ElemContainerState(yyj1478)
			if yyj1478 < len(yyv1478) {
				if r.TryDecodeAsNil() {
					yyv1478[yyj1478] = HTTPIngressPath{}
				} else {
					yyv1481 := &yyv1478[yyj1478]
					yyv1481.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1478 < len(yyv1478) {
			yyv1478 = yyv1478[:yyj1478]
			yyc1478 = true
		} else if yyj1478 == 0 && yyv1478 == nil {
			yyv1478 = []HTTPIngressPath{}
			yyc1478 = true
		}
	}
	yyh1478.End()
	if yyc1478 {
		*v = yyv1478
	}
}

func (x codecSelfer1234) encSliceReplicaSet(v []ReplicaSet, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1482 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1483 := &yyv1482
		yy1483.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSet(v *[]ReplicaSet, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1484 := *v
	yyh1484, yyl1484 := z.DecSliceHelperStart()
	var yyc1484 bool
	if yyl1484 == 0 {
		if yyv1484 == nil {
			yyv1484 = []ReplicaSet{}
			yyc1484 = true
		} else if len(yyv1484) != 0 {
			yyv1484 = yyv1484[:0]
			yyc1484 = true
		}
	} else if yyl1484 > 0 {
		var yyrr1484, yyrl1484 int
		var yyrt1484 bool
		if yyl1484 > cap(yyv1484) {

			yyrg1484 := len(yyv1484) > 0
			yyv21484 := yyv1484
			yyrl1484, yyrt1484 = z.DecInferLen(yyl1484, z.DecBasicHandle().MaxInitLen, 768)
			if yyrt1484 {
				if yyrl1484 <= cap(yyv1484) {
					yyv1484 = yyv1484[:yyrl1484]
				} else {
					yyv1484 = make([]ReplicaSet, yyrl1484)
				}
			} else {
				yyv1484 = make([]ReplicaSet, yyrl1484)
			}
			yyc1484 = true
			yyrr1484 = len(yyv1484)
			if yyrg1484 {
				copy(yyv1484, yyv21484)
			}
		} else if yyl1484 != len(yyv1484) {
			yyv1484 = yyv1484[:yyl1484]
			yyc1484 = true
		}
		yyj1484 := 0
		for ; yyj1484 < yyrr1484; yyj1484++ {
			yyh1484.ElemContainerState(yyj1484)
			if r.TryDecodeAsNil() {
				yyv1484[yyj1484] = ReplicaSet{}
			} else {
				yyv1485 := &yyv1484[yyj1484]
				yyv1485.CodecDecodeSelf(d)
			}

		}
		if yyrt1484 {
			for ; yyj1484 < yyl1484; yyj1484++ {
				yyv1484 = append(yyv1484, ReplicaSet{})
				yyh1484.ElemContainerState(yyj1484)
				if r.TryDecodeAsNil() {
					yyv1484[yyj1484] = ReplicaSet{}
				} else {
					yyv1486 := &yyv1484[yyj1484]
					yyv1486.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1484 := 0
		for ; !r.CheckBreak(); yyj1484++ {

			if yyj1484 >= len(yyv1484) {
				yyv1484 = append(yyv1484, ReplicaSet{}) // var yyz1484 ReplicaSet
				yyc1484 = true
			}
			yyh1484.ElemContainerState(yyj1484)
			if yyj1484 < len(yyv1484) {
				if r.TryDecodeAsNil() {
					yyv1484[yyj1484] = ReplicaSet{}
				} else {
					yyv1487 := &yyv1484[yyj1484]
					yyv1487.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1484 < len(yyv1484) {
			yyv1484 = yyv1484[:yyj1484]
			yyc1484 = true
		} else if yyj1484 == 0 && yyv1484 == nil {
			yyv1484 = []ReplicaSet{}
			yyc1484 = true
		}
	}
	yyh1484.End()
	if yyc1484 {
		*v = yyv1484
	}
}

func (x codecSelfer1234) encSliceReplicaSetCondition(v []ReplicaSetCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1488 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1489 := &yyv1488
		yy1489.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicaSetCondition(v *[]ReplicaSetCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1490 := *v
	yyh1490, yyl1490 := z.DecSliceHelperStart()
	var yyc1490 bool
	if yyl1490 == 0 {
		if yyv1490 == nil {
			yyv1490 = []ReplicaSetCondition{}
			yyc1490 = true
		} else if len(yyv1490) != 0 {
			yyv1490 = yyv1490[:0]
			yyc1490 = true
		}
	} else if yyl1490 > 0 {
		var yyrr1490, yyrl1490 int
		var yyrt1490 bool
		if yyl1490 > cap(yyv1490) {

			yyrg1490 := len(yyv1490) > 0
			yyv21490 := yyv1490
			yyrl1490, yyrt1490 = z.DecInferLen(yyl1490, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt1490 {
				if yyrl1490 <= cap(yyv1490) {
					yyv1490 = yyv1490[:yyrl1490]
				} else {
					yyv1490 = make([]ReplicaSetCondition, yyrl1490)
				}
			} else {
				yyv1490 = make([]ReplicaSetCondition, yyrl1490)
			}
			yyc1490 = true
			yyrr1490 = len(yyv1490)
			if yyrg1490 {
				copy(yyv1490, yyv21490)
			}
		} else if yyl1490 != len(yyv1490) {
			yyv1490 = yyv1490[:yyl1490]
			yyc1490 = true
		}
		yyj1490 := 0
		for ; yyj1490 < yyrr1490; yyj1490++ {
			yyh1490.ElemContainerState(yyj1490)
			if r.TryDecodeAsNil() {
				yyv1490[yyj1490] = ReplicaSetCondition{}
			} else {
				yyv1491 := &yyv1490[yyj1490]
				yyv1491.CodecDecodeSelf(d)
			}

		}
		if yyrt1490 {
			for ; yyj1490 < yyl1490; yyj1490++ {
				yyv1490 = append(yyv1490, ReplicaSetCondition{})
				yyh1490.ElemContainerState(yyj1490)
				if r.TryDecodeAsNil() {
					yyv1490[yyj1490] = ReplicaSetCondition{}
				} else {
					yyv1492 := &yyv1490[yyj1490]
					yyv1492.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1490 := 0
		for ; !r.CheckBreak(); yyj1490++ {

			if yyj1490 >= len(yyv1490) {
				yyv1490 = append(yyv1490, ReplicaSetCondition{}) // var yyz1490 ReplicaSetCondition
				yyc1490 = true
			}
			yyh1490.ElemContainerState(yyj1490)
			if yyj1490 < len(yyv1490) {
				if r.TryDecodeAsNil() {
					yyv1490[yyj1490] = ReplicaSetCondition{}
				} else {
					yyv1493 := &yyv1490[yyj1490]
					yyv1493.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1490 < len(yyv1490) {
			yyv1490 = yyv1490[:yyj1490]
			yyc1490 = true
		} else if yyj1490 == 0 && yyv1490 == nil {
			yyv1490 = []ReplicaSetCondition{}
			yyc1490 = true
		}
	}
	yyh1490.End()
	if yyc1490 {
		*v = yyv1490
	}
}

func (x codecSelfer1234) encSliceapi_Capability(v []pkg2_api.Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1494 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yym1495 := z.EncBinary()
		_ = yym1495
		if false {
		} else if z.HasExtensions() && z.EncExt(yyv1494) {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyv1494))
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceapi_Capability(v *[]pkg2_api.Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1496 := *v
	yyh1496, yyl1496 := z.DecSliceHelperStart()
	var yyc1496 bool
	if yyl1496 == 0 {
		if yyv1496 == nil {
			yyv1496 = []pkg2_api.Capability{}
			yyc1496 = true
		} else if len(yyv1496) != 0 {
			yyv1496 = yyv1496[:0]
			yyc1496 = true
		}
	} else if yyl1496 > 0 {
		var yyrr1496, yyrl1496 int
		var yyrt1496 bool
		if yyl1496 > cap(yyv1496) {

			yyrl1496, yyrt1496 = z.DecInferLen(yyl1496, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1496 {
				if yyrl1496 <= cap(yyv1496) {
					yyv1496 = yyv1496[:yyrl1496]
				} else {
					yyv1496 = make([]pkg2_api.Capability, yyrl1496)
				}
			} else {
				yyv1496 = make([]pkg2_api.Capability, yyrl1496)
			}
			yyc1496 = true
			yyrr1496 = len(yyv1496)
		} else if yyl1496 != len(yyv1496) {
			yyv1496 = yyv1496[:yyl1496]
			yyc1496 = true
		}
		yyj1496 := 0
		for ; yyj1496 < yyrr1496; yyj1496++ {
			yyh1496.ElemContainerState(yyj1496)
			if r.TryDecodeAsNil() {
				yyv1496[yyj1496] = ""
			} else {
				yyv1496[yyj1496] = pkg2_api.Capability(r.DecodeString())
			}

		}
		if yyrt1496 {
			for ; yyj1496 < yyl1496; yyj1496++ {
				yyv1496 = append(yyv1496, "")
				yyh1496.ElemContainerState(yyj1496)
				if r.TryDecodeAsNil() {
					yyv1496[yyj1496] = ""
				} else {
					yyv1496[yyj1496] = pkg2_api.Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj1496 := 0
		for ; !r.CheckBreak(); yyj1496++ {

			if yyj1496 >= len(yyv1496) {
				yyv1496 = append(yyv1496, "") // var yyz1496 pkg2_api.Capability
				yyc1496 = true
			}
			yyh1496.ElemContainerState(yyj1496)
			if yyj1496 < len(yyv1496) {
				if r.TryDecodeAsNil() {
					yyv1496[yyj1496] = ""
				} else {
					yyv1496[yyj1496] = pkg2_api.Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1496 < len(yyv1496) {
			yyv1496 = yyv1496[:yyj1496]
			yyc1496 = true
		} else if yyj1496 == 0 && yyv1496 == nil {
			yyv1496 = []pkg2_api.Capability{}
			yyc1496 = true
		}
	}
	yyh1496.End()
	if yyc1496 {
		*v = yyv1496
	}
}

func (x codecSelfer1234) encSliceFSType(v []FSType, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1500 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv1500.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFSType(v *[]FSType, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1501 := *v
	yyh1501, yyl1501 := z.DecSliceHelperStart()
	var yyc1501 bool
	if yyl1501 == 0 {
		if yyv1501 == nil {
			yyv1501 = []FSType{}
			yyc1501 = true
		} else if len(yyv1501) != 0 {
			yyv1501 = yyv1501[:0]
			yyc1501 = true
		}
	} else if yyl1501 > 0 {
		var yyrr1501, yyrl1501 int
		var yyrt1501 bool
		if yyl1501 > cap(yyv1501) {

			yyrl1501, yyrt1501 = z.DecInferLen(yyl1501, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1501 {
				if yyrl1501 <= cap(yyv1501) {
					yyv1501 = yyv1501[:yyrl1501]
				} else {
					yyv1501 = make([]FSType, yyrl1501)
				}
			} else {
				yyv1501 = make([]FSType, yyrl1501)
			}
			yyc1501 = true
			yyrr1501 = len(yyv1501)
		} else if yyl1501 != len(yyv1501) {
			yyv1501 = yyv1501[:yyl1501]
			yyc1501 = true
		}
		yyj1501 := 0
		for ; yyj1501 < yyrr1501; yyj1501++ {
			yyh1501.ElemContainerState(yyj1501)
			if r.TryDecodeAsNil() {
				yyv1501[yyj1501] = ""
			} else {
				yyv1501[yyj1501] = FSType(r.DecodeString())
			}

		}
		if yyrt1501 {
			for ; yyj1501 < yyl1501; yyj1501++ {
				yyv1501 = append(yyv1501, "")
				yyh1501.ElemContainerState(yyj1501)
				if r.TryDecodeAsNil() {
					yyv1501[yyj1501] = ""
				} else {
					yyv1501[yyj1501] = FSType(r.DecodeString())
				}

			}
		}

	} else {
		yyj1501 := 0
		for ; !r.CheckBreak(); yyj1501++ {

			if yyj1501 >= len(yyv1501) {
				yyv1501 = append(yyv1501, "") // var yyz1501 FSType
				yyc1501 = true
			}
			yyh1501.ElemContainerState(yyj1501)
			if yyj1501 < len(yyv1501) {
				if r.TryDecodeAsNil() {
					yyv1501[yyj1501] = ""
				} else {
					yyv1501[yyj1501] = FSType(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1501 < len(yyv1501) {
			yyv1501 = yyv1501[:yyj1501]
			yyc1501 = true
		} else if yyj1501 == 0 && yyv1501 == nil {
			yyv1501 = []FSType{}
			yyc1501 = true
		}
	}
	yyh1501.End()
	if yyc1501 {
		*v = yyv1501
	}
}

func (x codecSelfer1234) encSliceHostPortRange(v []HostPortRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1505 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1506 := &yyv1505
		yy1506.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHostPortRange(v *[]HostPortRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1507 := *v
	yyh1507, yyl1507 := z.DecSliceHelperStart()
	var yyc1507 bool
	if yyl1507 == 0 {
		if yyv1507 == nil {
			yyv1507 = []HostPortRange{}
			yyc1507 = true
		} else if len(yyv1507) != 0 {
			yyv1507 = yyv1507[:0]
			yyc1507 = true
		}
	} else if yyl1507 > 0 {
		var yyrr1507, yyrl1507 int
		var yyrt1507 bool
		if yyl1507 > cap(yyv1507) {

			yyrg1507 := len(yyv1507) > 0
			yyv21507 := yyv1507
			yyrl1507, yyrt1507 = z.DecInferLen(yyl1507, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1507 {
				if yyrl1507 <= cap(yyv1507) {
					yyv1507 = yyv1507[:yyrl1507]
				} else {
					yyv1507 = make([]HostPortRange, yyrl1507)
				}
			} else {
				yyv1507 = make([]HostPortRange, yyrl1507)
			}
			yyc1507 = true
			yyrr1507 = len(yyv1507)
			if yyrg1507 {
				copy(yyv1507, yyv21507)
			}
		} else if yyl1507 != len(yyv1507) {
			yyv1507 = yyv1507[:yyl1507]
			yyc1507 = true
		}
		yyj1507 := 0
		for ; yyj1507 < yyrr1507; yyj1507++ {
			yyh1507.ElemContainerState(yyj1507)
			if r.TryDecodeAsNil() {
				yyv1507[yyj1507] = HostPortRange{}
			} else {
				yyv1508 := &yyv1507[yyj1507]
				yyv1508.CodecDecodeSelf(d)
			}

		}
		if yyrt1507 {
			for ; yyj1507 < yyl1507; yyj1507++ {
				yyv1507 = append(yyv1507, HostPortRange{})
				yyh1507.ElemContainerState(yyj1507)
				if r.TryDecodeAsNil() {
					yyv1507[yyj1507] = HostPortRange{}
				} else {
					yyv1509 := &yyv1507[yyj1507]
					yyv1509.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1507 := 0
		for ; !r.CheckBreak(); yyj1507++ {

			if yyj1507 >= len(yyv1507) {
				yyv1507 = append(yyv1507, HostPortRange{}) // var yyz1507 HostPortRange
				yyc1507 = true
			}
			yyh1507.ElemContainerState(yyj1507)
			if yyj1507 < len(yyv1507) {
				if r.TryDecodeAsNil() {
					yyv1507[yyj1507] = HostPortRange{}
				} else {
					yyv1510 := &yyv1507[yyj1507]
					yyv1510.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1507 < len(yyv1507) {
			yyv1507 = yyv1507[:yyj1507]
			yyc1507 = true
		} else if yyj1507 == 0 && yyv1507 == nil {
			yyv1507 = []HostPortRange{}
			yyc1507 = true
		}
	}
	yyh1507.End()
	if yyc1507 {
		*v = yyv1507
	}
}

func (x codecSelfer1234) encSliceIDRange(v []IDRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1511 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1512 := &yyv1511
		yy1512.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceIDRange(v *[]IDRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1513 := *v
	yyh1513, yyl1513 := z.DecSliceHelperStart()
	var yyc1513 bool
	if yyl1513 == 0 {
		if yyv1513 == nil {
			yyv1513 = []IDRange{}
			yyc1513 = true
		} else if len(yyv1513) != 0 {
			yyv1513 = yyv1513[:0]
			yyc1513 = true
		}
	} else if yyl1513 > 0 {
		var yyrr1513, yyrl1513 int
		var yyrt1513 bool
		if yyl1513 > cap(yyv1513) {

			yyrg1513 := len(yyv1513) > 0
			yyv21513 := yyv1513
			yyrl1513, yyrt1513 = z.DecInferLen(yyl1513, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1513 {
				if yyrl1513 <= cap(yyv1513) {
					yyv1513 = yyv1513[:yyrl1513]
				} else {
					yyv1513 = make([]IDRange, yyrl1513)
				}
			} else {
				yyv1513 = make([]IDRange, yyrl1513)
			}
			yyc1513 = true
			yyrr1513 = len(yyv1513)
			if yyrg1513 {
				copy(yyv1513, yyv21513)
			}
		} else if yyl1513 != len(yyv1513) {
			yyv1513 = yyv1513[:yyl1513]
			yyc1513 = true
		}
		yyj1513 := 0
		for ; yyj1513 < yyrr1513; yyj1513++ {
			yyh1513.ElemContainerState(yyj1513)
			if r.TryDecodeAsNil() {
				yyv1513[yyj1513] = IDRange{}
			} else {
				yyv1514 := &yyv1513[yyj1513]
				yyv1514.CodecDecodeSelf(d)
			}

		}
		if yyrt1513 {
			for ; yyj1513 < yyl1513; yyj1513++ {
				yyv1513 = append(yyv1513, IDRange{})
				yyh1513.ElemContainerState(yyj1513)
				if r.TryDecodeAsNil() {
					yyv1513[yyj1513] = IDRange{}
				} else {
					yyv1515 := &yyv1513[yyj1513]
					yyv1515.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1513 := 0
		for ; !r.CheckBreak(); yyj1513++ {

			if yyj1513 >= len(yyv1513) {
				yyv1513 = append(yyv1513, IDRange{}) // var yyz1513 IDRange
				yyc1513 = true
			}
			yyh1513.ElemContainerState(yyj1513)
			if yyj1513 < len(yyv1513) {
				if r.TryDecodeAsNil() {
					yyv1513[yyj1513] = IDRange{}
				} else {
					yyv1516 := &yyv1513[yyj1513]
					yyv1516.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1513 < len(yyv1513) {
			yyv1513 = yyv1513[:yyj1513]
			yyc1513 = true
		} else if yyj1513 == 0 && yyv1513 == nil {
			yyv1513 = []IDRange{}
			yyc1513 = true
		}
	}
	yyh1513.End()
	if yyc1513 {
		*v = yyv1513
	}
}

func (x codecSelfer1234) encSlicePodSecurityPolicy(v []PodSecurityPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1517 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1518 := &yyv1517
		yy1518.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodSecurityPolicy(v *[]PodSecurityPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1519 := *v
	yyh1519, yyl1519 := z.DecSliceHelperStart()
	var yyc1519 bool
	if yyl1519 == 0 {
		if yyv1519 == nil {
			yyv1519 = []PodSecurityPolicy{}
			yyc1519 = true
		} else if len(yyv1519) != 0 {
			yyv1519 = yyv1519[:0]
			yyc1519 = true
		}
	} else if yyl1519 > 0 {
		var yyrr1519, yyrl1519 int
		var yyrt1519 bool
		if yyl1519 > cap(yyv1519) {

			yyrg1519 := len(yyv1519) > 0
			yyv21519 := yyv1519
			yyrl1519, yyrt1519 = z.DecInferLen(yyl1519, z.DecBasicHandle().MaxInitLen, 552)
			if yyrt1519 {
				if yyrl1519 <= cap(yyv1519) {
					yyv1519 = yyv1519[:yyrl1519]
				} else {
					yyv1519 = make([]PodSecurityPolicy, yyrl1519)
				}
			} else {
				yyv1519 = make([]PodSecurityPolicy, yyrl1519)
			}
			yyc1519 = true
			yyrr1519 = len(yyv1519)
			if yyrg1519 {
				copy(yyv1519, yyv21519)
			}
		} else if yyl1519 != len(yyv1519) {
			yyv1519 = yyv1519[:yyl1519]
			yyc1519 = true
		}
		yyj1519 := 0
		for ; yyj1519 < yyrr1519; yyj1519++ {
			yyh1519.ElemContainerState(yyj1519)
			if r.TryDecodeAsNil() {
				yyv1519[yyj1519] = PodSecurityPolicy{}
			} else {
				yyv1520 := &yyv1519[yyj1519]
				yyv1520.CodecDecodeSelf(d)
			}

		}
		if yyrt1519 {
			for ; yyj1519 < yyl1519; yyj1519++ {
				yyv1519 = append(yyv1519, PodSecurityPolicy{})
				yyh1519.ElemContainerState(yyj1519)
				if r.TryDecodeAsNil() {
					yyv1519[yyj1519] = PodSecurityPolicy{}
				} else {
					yyv1521 := &yyv1519[yyj1519]
					yyv1521.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1519 := 0
		for ; !r.CheckBreak(); yyj1519++ {

			if yyj1519 >= len(yyv1519) {
				yyv1519 = append(yyv1519, PodSecurityPolicy{}) // var yyz1519 PodSecurityPolicy
				yyc1519 = true
			}
			yyh1519.ElemContainerState(yyj1519)
			if yyj1519 < len(yyv1519) {
				if r.TryDecodeAsNil() {
					yyv1519[yyj1519] = PodSecurityPolicy{}
				} else {
					yyv1522 := &yyv1519[yyj1519]
					yyv1522.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1519 < len(yyv1519) {
			yyv1519 = yyv1519[:yyj1519]
			yyc1519 = true
		} else if yyj1519 == 0 && yyv1519 == nil {
			yyv1519 = []PodSecurityPolicy{}
			yyc1519 = true
		}
	}
	yyh1519.End()
	if yyc1519 {
		*v = yyv1519
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyIngressRule(v []NetworkPolicyIngressRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1523 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1524 := &yyv1523
		yy1524.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyIngressRule(v *[]NetworkPolicyIngressRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1525 := *v
	yyh1525, yyl1525 := z.DecSliceHelperStart()
	var yyc1525 bool
	if yyl1525 == 0 {
		if yyv1525 == nil {
			yyv1525 = []NetworkPolicyIngressRule{}
			yyc1525 = true
		} else if len(yyv1525) != 0 {
			yyv1525 = yyv1525[:0]
			yyc1525 = true
		}
	} else if yyl1525 > 0 {
		var yyrr1525, yyrl1525 int
		var yyrt1525 bool
		if yyl1525 > cap(yyv1525) {

			yyrg1525 := len(yyv1525) > 0
			yyv21525 := yyv1525
			yyrl1525, yyrt1525 = z.DecInferLen(yyl1525, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt1525 {
				if yyrl1525 <= cap(yyv1525) {
					yyv1525 = yyv1525[:yyrl1525]
				} else {
					yyv1525 = make([]NetworkPolicyIngressRule, yyrl1525)
				}
			} else {
				yyv1525 = make([]NetworkPolicyIngressRule, yyrl1525)
			}
			yyc1525 = true
			yyrr1525 = len(yyv1525)
			if yyrg1525 {
				copy(yyv1525, yyv21525)
			}
		} else if yyl1525 != len(yyv1525) {
			yyv1525 = yyv1525[:yyl1525]
			yyc1525 = true
		}
		yyj1525 := 0
		for ; yyj1525 < yyrr1525; yyj1525++ {
			yyh1525.ElemContainerState(yyj1525)
			if r.TryDecodeAsNil() {
				yyv1525[yyj1525] = NetworkPolicyIngressRule{}
			} else {
				yyv1526 := &yyv1525[yyj1525]
				yyv1526.CodecDecodeSelf(d)
			}

		}
		if yyrt1525 {
			for ; yyj1525 < yyl1525; yyj1525++ {
				yyv1525 = append(yyv1525, NetworkPolicyIngressRule{})
				yyh1525.ElemContainerState(yyj1525)
				if r.TryDecodeAsNil() {
					yyv1525[yyj1525] = NetworkPolicyIngressRule{}
				} else {
					yyv1527 := &yyv1525[yyj1525]
					yyv1527.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1525 := 0
		for ; !r.CheckBreak(); yyj1525++ {

			if yyj1525 >= len(yyv1525) {
				yyv1525 = append(yyv1525, NetworkPolicyIngressRule{}) // var yyz1525 NetworkPolicyIngressRule
				yyc1525 = true
			}
			yyh1525.ElemContainerState(yyj1525)
			if yyj1525 < len(yyv1525) {
				if r.TryDecodeAsNil() {
					yyv1525[yyj1525] = NetworkPolicyIngressRule{}
				} else {
					yyv1528 := &yyv1525[yyj1525]
					yyv1528.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1525 < len(yyv1525) {
			yyv1525 = yyv1525[:yyj1525]
			yyc1525 = true
		} else if yyj1525 == 0 && yyv1525 == nil {
			yyv1525 = []NetworkPolicyIngressRule{}
			yyc1525 = true
		}
	}
	yyh1525.End()
	if yyc1525 {
		*v = yyv1525
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPort(v []NetworkPolicyPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1529 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1530 := &yyv1529
		yy1530.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPort(v *[]NetworkPolicyPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1531 := *v
	yyh1531, yyl1531 := z.DecSliceHelperStart()
	var yyc1531 bool
	if yyl1531 == 0 {
		if yyv1531 == nil {
			yyv1531 = []NetworkPolicyPort{}
			yyc1531 = true
		} else if len(yyv1531) != 0 {
			yyv1531 = yyv1531[:0]
			yyc1531 = true
		}
	} else if yyl1531 > 0 {
		var yyrr1531, yyrl1531 int
		var yyrt1531 bool
		if yyl1531 > cap(yyv1531) {

			yyrg1531 := len(yyv1531) > 0
			yyv21531 := yyv1531
			yyrl1531, yyrt1531 = z.DecInferLen(yyl1531, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1531 {
				if yyrl1531 <= cap(yyv1531) {
					yyv1531 = yyv1531[:yyrl1531]
				} else {
					yyv1531 = make([]NetworkPolicyPort, yyrl1531)
				}
			} else {
				yyv1531 = make([]NetworkPolicyPort, yyrl1531)
			}
			yyc1531 = true
			yyrr1531 = len(yyv1531)
			if yyrg1531 {
				copy(yyv1531, yyv21531)
			}
		} else if yyl1531 != len(yyv1531) {
			yyv1531 = yyv1531[:yyl1531]
			yyc1531 = true
		}
		yyj1531 := 0
		for ; yyj1531 < yyrr1531; yyj1531++ {
			yyh1531.ElemContainerState(yyj1531)
			if r.TryDecodeAsNil() {
				yyv1531[yyj1531] = NetworkPolicyPort{}
			} else {
				yyv1532 := &yyv1531[yyj1531]
				yyv1532.CodecDecodeSelf(d)
			}

		}
		if yyrt1531 {
			for ; yyj1531 < yyl1531; yyj1531++ {
				yyv1531 = append(yyv1531, NetworkPolicyPort{})
				yyh1531.ElemContainerState(yyj1531)
				if r.TryDecodeAsNil() {
					yyv1531[yyj1531] = NetworkPolicyPort{}
				} else {
					yyv1533 := &yyv1531[yyj1531]
					yyv1533.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1531 := 0
		for ; !r.CheckBreak(); yyj1531++ {

			if yyj1531 >= len(yyv1531) {
				yyv1531 = append(yyv1531, NetworkPolicyPort{}) // var yyz1531 NetworkPolicyPort
				yyc1531 = true
			}
			yyh1531.ElemContainerState(yyj1531)
			if yyj1531 < len(yyv1531) {
				if r.TryDecodeAsNil() {
					yyv1531[yyj1531] = NetworkPolicyPort{}
				} else {
					yyv1534 := &yyv1531[yyj1531]
					yyv1534.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1531 < len(yyv1531) {
			yyv1531 = yyv1531[:yyj1531]
			yyc1531 = true
		} else if yyj1531 == 0 && yyv1531 == nil {
			yyv1531 = []NetworkPolicyPort{}
			yyc1531 = true
		}
	}
	yyh1531.End()
	if yyc1531 {
		*v = yyv1531
	}
}

func (x codecSelfer1234) encSliceNetworkPolicyPeer(v []NetworkPolicyPeer, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1535 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1536 := &yyv1535
		yy1536.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicyPeer(v *[]NetworkPolicyPeer, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1537 := *v
	yyh1537, yyl1537 := z.DecSliceHelperStart()
	var yyc1537 bool
	if yyl1537 == 0 {
		if yyv1537 == nil {
			yyv1537 = []NetworkPolicyPeer{}
			yyc1537 = true
		} else if len(yyv1537) != 0 {
			yyv1537 = yyv1537[:0]
			yyc1537 = true
		}
	} else if yyl1537 > 0 {
		var yyrr1537, yyrl1537 int
		var yyrt1537 bool
		if yyl1537 > cap(yyv1537) {

			yyrg1537 := len(yyv1537) > 0
			yyv21537 := yyv1537
			yyrl1537, yyrt1537 = z.DecInferLen(yyl1537, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt1537 {
				if yyrl1537 <= cap(yyv1537) {
					yyv1537 = yyv1537[:yyrl1537]
				} else {
					yyv1537 = make([]NetworkPolicyPeer, yyrl1537)
				}
			} else {
				yyv1537 = make([]NetworkPolicyPeer, yyrl1537)
			}
			yyc1537 = true
			yyrr1537 = len(yyv1537)
			if yyrg1537 {
				copy(yyv1537, yyv21537)
			}
		} else if yyl1537 != len(yyv1537) {
			yyv1537 = yyv1537[:yyl1537]
			yyc1537 = true
		}
		yyj1537 := 0
		for ; yyj1537 < yyrr1537; yyj1537++ {
			yyh1537.ElemContainerState(yyj1537)
			if r.TryDecodeAsNil() {
				yyv1537[yyj1537] = NetworkPolicyPeer{}
			} else {
				yyv1538 := &yyv1537[yyj1537]
				yyv1538.CodecDecodeSelf(d)
			}

		}
		if yyrt1537 {
			for ; yyj1537 < yyl1537; yyj1537++ {
				yyv1537 = append(yyv1537, NetworkPolicyPeer{})
				yyh1537.ElemContainerState(yyj1537)
				if r.TryDecodeAsNil() {
					yyv1537[yyj1537] = NetworkPolicyPeer{}
				} else {
					yyv1539 := &yyv1537[yyj1537]
					yyv1539.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1537 := 0
		for ; !r.CheckBreak(); yyj1537++ {

			if yyj1537 >= len(yyv1537) {
				yyv1537 = append(yyv1537, NetworkPolicyPeer{}) // var yyz1537 NetworkPolicyPeer
				yyc1537 = true
			}
			yyh1537.ElemContainerState(yyj1537)
			if yyj1537 < len(yyv1537) {
				if r.TryDecodeAsNil() {
					yyv1537[yyj1537] = NetworkPolicyPeer{}
				} else {
					yyv1540 := &yyv1537[yyj1537]
					yyv1540.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1537 < len(yyv1537) {
			yyv1537 = yyv1537[:yyj1537]
			yyc1537 = true
		} else if yyj1537 == 0 && yyv1537 == nil {
			yyv1537 = []NetworkPolicyPeer{}
			yyc1537 = true
		}
	}
	yyh1537.End()
	if yyc1537 {
		*v = yyv1537
	}
}

func (x codecSelfer1234) encSliceNetworkPolicy(v []NetworkPolicy, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv1541 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy1542 := &yyv1541
		yy1542.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNetworkPolicy(v *[]NetworkPolicy, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1543 := *v
	yyh1543, yyl1543 := z.DecSliceHelperStart()
	var yyc1543 bool
	if yyl1543 == 0 {
		if yyv1543 == nil {
			yyv1543 = []NetworkPolicy{}
			yyc1543 = true
		} else if len(yyv1543) != 0 {
			yyv1543 = yyv1543[:0]
			yyc1543 = true
		}
	} else if yyl1543 > 0 {
		var yyrr1543, yyrl1543 int
		var yyrt1543 bool
		if yyl1543 > cap(yyv1543) {

			yyrg1543 := len(yyv1543) > 0
			yyv21543 := yyv1543
			yyrl1543, yyrt1543 = z.DecInferLen(yyl1543, z.DecBasicHandle().MaxInitLen, 312)
			if yyrt1543 {
				if yyrl1543 <= cap(yyv1543) {
					yyv1543 = yyv1543[:yyrl1543]
				} else {
					yyv1543 = make([]NetworkPolicy, yyrl1543)
				}
			} else {
				yyv1543 = make([]NetworkPolicy, yyrl1543)
			}
			yyc1543 = true
			yyrr1543 = len(yyv1543)
			if yyrg1543 {
				copy(yyv1543, yyv21543)
			}
		} else if yyl1543 != len(yyv1543) {
			yyv1543 = yyv1543[:yyl1543]
			yyc1543 = true
		}
		yyj1543 := 0
		for ; yyj1543 < yyrr1543; yyj1543++ {
			yyh1543.ElemContainerState(yyj1543)
			if r.TryDecodeAsNil() {
				yyv1543[yyj1543] = NetworkPolicy{}
			} else {
				yyv1544 := &yyv1543[yyj1543]
				yyv1544.CodecDecodeSelf(d)
			}

		}
		if yyrt1543 {
			for ; yyj1543 < yyl1543; yyj1543++ {
				yyv1543 = append(yyv1543, NetworkPolicy{})
				yyh1543.ElemContainerState(yyj1543)
				if r.TryDecodeAsNil() {
					yyv1543[yyj1543] = NetworkPolicy{}
				} else {
					yyv1545 := &yyv1543[yyj1543]
					yyv1545.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj1543 := 0
		for ; !r.CheckBreak(); yyj1543++ {

			if yyj1543 >= len(yyv1543) {
				yyv1543 = append(yyv1543, NetworkPolicy{}) // var yyz1543 NetworkPolicy
				yyc1543 = true
			}
			yyh1543.ElemContainerState(yyj1543)
			if yyj1543 < len(yyv1543) {
				if r.TryDecodeAsNil() {
					yyv1543[yyj1543] = NetworkPolicy{}
				} else {
					yyv1546 := &yyv1543[yyj1543]
					yyv1546.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj1543 < len(yyv1543) {
			yyv1543 = yyv1543[:yyj1543]
			yyc1543 = true
		} else if yyj1543 == 0 && yyv1543 == nil {
			yyv1543 = []NetworkPolicy{}
			yyc1543 = true
		}
	}
	yyh1543.End()
	if yyc1543 {
		*v = yyv1543
	}
}
