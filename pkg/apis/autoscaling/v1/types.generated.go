/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_unversioned.Time
		var v1 pkg2_v1.ObjectMeta
		var v2 pkg3_types.UID
		var v3 time.Time
		_, _, _, _ = v0, v1, v2, v3
	}
}

func (x *CrossVersionObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [3]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[2] = x.APIVersion != ""
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(3)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CrossVersionObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym12 := z.DecBinary()
	_ = yym12
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct13 := r.ContainerType()
		if yyct13 == codecSelferValueTypeMap1234 {
			yyl13 := r.ReadMapStart()
			if yyl13 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl13, d)
			}
		} else if yyct13 == codecSelferValueTypeArray1234 {
			yyl13 := r.ReadArrayStart()
			if yyl13 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl13, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CrossVersionObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys14Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys14Slc
	var yyhl14 bool = l >= 0
	for yyj14 := 0; ; yyj14++ {
		if yyhl14 {
			if yyj14 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys14Slc = r.DecodeBytes(yys14Slc, true, true)
		yys14 := string(yys14Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys14 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys14)
		} // end switch yys14
	} // end for yyj14
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CrossVersionObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj18 int
	var yyb18 bool
	var yyhl18 bool = l >= 0
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj18++
	if yyhl18 {
		yyb18 = yyj18 > l
	} else {
		yyb18 = r.CheckBreak()
	}
	if yyb18 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	for {
		yyj18++
		if yyhl18 {
			yyb18 = yyj18 > l
		} else {
			yyb18 = r.CheckBreak()
		}
		if yyb18 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj18-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym22 := z.EncBinary()
		_ = yym22
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep23 := !z.EncBinary()
			yy2arr23 := z.EncBasicHandle().StructToArray
			var yyq23 [4]bool
			_, _, _ = yysep23, yyq23, yy2arr23
			const yyr23 bool = false
			yyq23[1] = x.MinReplicas != nil
			yyq23[3] = x.TargetCPUUtilizationPercentage != nil
			var yynn23 int
			if yyr23 || yy2arr23 {
				r.EncodeArrayStart(4)
			} else {
				yynn23 = 2
				for _, b := range yyq23 {
					if b {
						yynn23++
					}
				}
				r.EncodeMapStart(yynn23)
				yynn23 = 0
			}
			if yyr23 || yy2arr23 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy25 := &x.ScaleTargetRef
				yy25.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("scaleTargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy26 := &x.ScaleTargetRef
				yy26.CodecEncodeSelf(e)
			}
			if yyr23 || yy2arr23 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq23[1] {
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy28 := *x.MinReplicas
						yym29 := z.EncBinary()
						_ = yym29
						if false {
						} else {
							r.EncodeInt(int64(yy28))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq23[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MinReplicas == nil {
						r.EncodeNil()
					} else {
						yy30 := *x.MinReplicas
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else {
							r.EncodeInt(int64(yy30))
						}
					}
				}
			}
			if yyr23 || yy2arr23 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym33 := z.EncBinary()
				_ = yym33
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym34 := z.EncBinary()
				_ = yym34
				if false {
				} else {
					r.EncodeInt(int64(x.MaxReplicas))
				}
			}
			if yyr23 || yy2arr23 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq23[3] {
					if x.TargetCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy36 := *x.TargetCPUUtilizationPercentage
						yym37 := z.EncBinary()
						_ = yym37
						if false {
						} else {
							r.EncodeInt(int64(yy36))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq23[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TargetCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy38 := *x.TargetCPUUtilizationPercentage
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							r.EncodeInt(int64(yy38))
						}
					}
				}
			}
			if yyr23 || yy2arr23 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym40 := z.DecBinary()
	_ = yym40
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct41 := r.ContainerType()
		if yyct41 == codecSelferValueTypeMap1234 {
			yyl41 := r.ReadMapStart()
			if yyl41 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl41, d)
			}
		} else if yyct41 == codecSelferValueTypeArray1234 {
			yyl41 := r.ReadArrayStart()
			if yyl41 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl41, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys42Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys42Slc
	var yyhl42 bool = l >= 0
	for yyj42 := 0; ; yyj42++ {
		if yyhl42 {
			if yyj42 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys42Slc = r.DecodeBytes(yys42Slc, true, true)
		yys42 := string(yys42Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys42 {
		case "scaleTargetRef":
			if r.TryDecodeAsNil() {
				x.ScaleTargetRef = CrossVersionObjectReference{}
			} else {
				yyv43 := &x.ScaleTargetRef
				yyv43.CodecDecodeSelf(d)
			}
		case "minReplicas":
			if r.TryDecodeAsNil() {
				if x.MinReplicas != nil {
					x.MinReplicas = nil
				}
			} else {
				if x.MinReplicas == nil {
					x.MinReplicas = new(int32)
				}
				yym45 := z.DecBinary()
				_ = yym45
				if false {
				} else {
					*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
				}
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				x.MaxReplicas = 0
			} else {
				x.MaxReplicas = int32(r.DecodeInt(32))
			}
		case "targetCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.TargetCPUUtilizationPercentage != nil {
					x.TargetCPUUtilizationPercentage = nil
				}
			} else {
				if x.TargetCPUUtilizationPercentage == nil {
					x.TargetCPUUtilizationPercentage = new(int32)
				}
				yym48 := z.DecBinary()
				_ = yym48
				if false {
				} else {
					*((*int32)(x.TargetCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys42)
		} // end switch yys42
	} // end for yyj42
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj49 int
	var yyb49 bool
	var yyhl49 bool = l >= 0
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ScaleTargetRef = CrossVersionObjectReference{}
	} else {
		yyv50 := &x.ScaleTargetRef
		yyv50.CodecDecodeSelf(d)
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MinReplicas != nil {
			x.MinReplicas = nil
		}
	} else {
		if x.MinReplicas == nil {
			x.MinReplicas = new(int32)
		}
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*int32)(x.MinReplicas)) = int32(r.DecodeInt(32))
		}
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxReplicas = 0
	} else {
		x.MaxReplicas = int32(r.DecodeInt(32))
	}
	yyj49++
	if yyhl49 {
		yyb49 = yyj49 > l
	} else {
		yyb49 = r.CheckBreak()
	}
	if yyb49 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetCPUUtilizationPercentage != nil {
			x.TargetCPUUtilizationPercentage = nil
		}
	} else {
		if x.TargetCPUUtilizationPercentage == nil {
			x.TargetCPUUtilizationPercentage = new(int32)
		}
		yym55 := z.DecBinary()
		_ = yym55
		if false {
		} else {
			*((*int32)(x.TargetCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj49++
		if yyhl49 {
			yyb49 = yyj49 > l
		} else {
			yyb49 = r.CheckBreak()
		}
		if yyb49 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj49-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym56 := z.EncBinary()
		_ = yym56
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep57 := !z.EncBinary()
			yy2arr57 := z.EncBasicHandle().StructToArray
			var yyq57 [5]bool
			_, _, _ = yysep57, yyq57, yy2arr57
			const yyr57 bool = false
			yyq57[0] = x.ObservedGeneration != nil
			yyq57[1] = x.LastScaleTime != nil
			yyq57[4] = x.CurrentCPUUtilizationPercentage != nil
			var yynn57 int
			if yyr57 || yy2arr57 {
				r.EncodeArrayStart(5)
			} else {
				yynn57 = 2
				for _, b := range yyq57 {
					if b {
						yynn57++
					}
				}
				r.EncodeMapStart(yynn57)
				yynn57 = 0
			}
			if yyr57 || yy2arr57 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq57[0] {
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy59 := *x.ObservedGeneration
						yym60 := z.EncBinary()
						_ = yym60
						if false {
						} else {
							r.EncodeInt(int64(yy59))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq57[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ObservedGeneration == nil {
						r.EncodeNil()
					} else {
						yy61 := *x.ObservedGeneration
						yym62 := z.EncBinary()
						_ = yym62
						if false {
						} else {
							r.EncodeInt(int64(yy61))
						}
					}
				}
			}
			if yyr57 || yy2arr57 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq57[1] {
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym64 := z.EncBinary()
						_ = yym64
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym64 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym64 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq57[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScaleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScaleTime == nil {
						r.EncodeNil()
					} else {
						yym65 := z.EncBinary()
						_ = yym65
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScaleTime) {
						} else if yym65 {
							z.EncBinaryMarshal(x.LastScaleTime)
						} else if !yym65 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScaleTime)
						} else {
							z.EncFallback(x.LastScaleTime)
						}
					}
				}
			}
			if yyr57 || yy2arr57 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym67 := z.EncBinary()
				_ = yym67
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("currentReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym68 := z.EncBinary()
				_ = yym68
				if false {
				} else {
					r.EncodeInt(int64(x.CurrentReplicas))
				}
			}
			if yyr57 || yy2arr57 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym70 := z.EncBinary()
				_ = yym70
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("desiredReplicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym71 := z.EncBinary()
				_ = yym71
				if false {
				} else {
					r.EncodeInt(int64(x.DesiredReplicas))
				}
			}
			if yyr57 || yy2arr57 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq57[4] {
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy73 := *x.CurrentCPUUtilizationPercentage
						yym74 := z.EncBinary()
						_ = yym74
						if false {
						} else {
							r.EncodeInt(int64(yy73))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq57[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("currentCPUUtilizationPercentage"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CurrentCPUUtilizationPercentage == nil {
						r.EncodeNil()
					} else {
						yy75 := *x.CurrentCPUUtilizationPercentage
						yym76 := z.EncBinary()
						_ = yym76
						if false {
						} else {
							r.EncodeInt(int64(yy75))
						}
					}
				}
			}
			if yyr57 || yy2arr57 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym77 := z.DecBinary()
	_ = yym77
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct78 := r.ContainerType()
		if yyct78 == codecSelferValueTypeMap1234 {
			yyl78 := r.ReadMapStart()
			if yyl78 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl78, d)
			}
		} else if yyct78 == codecSelferValueTypeArray1234 {
			yyl78 := r.ReadArrayStart()
			if yyl78 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl78, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys79Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys79Slc
	var yyhl79 bool = l >= 0
	for yyj79 := 0; ; yyj79++ {
		if yyhl79 {
			if yyj79 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys79Slc = r.DecodeBytes(yys79Slc, true, true)
		yys79 := string(yys79Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys79 {
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				if x.ObservedGeneration != nil {
					x.ObservedGeneration = nil
				}
			} else {
				if x.ObservedGeneration == nil {
					x.ObservedGeneration = new(int64)
				}
				yym81 := z.DecBinary()
				_ = yym81
				if false {
				} else {
					*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
				}
			}
		case "lastScaleTime":
			if r.TryDecodeAsNil() {
				if x.LastScaleTime != nil {
					x.LastScaleTime = nil
				}
			} else {
				if x.LastScaleTime == nil {
					x.LastScaleTime = new(pkg1_unversioned.Time)
				}
				yym83 := z.DecBinary()
				_ = yym83
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
				} else if yym83 {
					z.DecBinaryUnmarshal(x.LastScaleTime)
				} else if !yym83 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScaleTime)
				} else {
					z.DecFallback(x.LastScaleTime, false)
				}
			}
		case "currentReplicas":
			if r.TryDecodeAsNil() {
				x.CurrentReplicas = 0
			} else {
				x.CurrentReplicas = int32(r.DecodeInt(32))
			}
		case "desiredReplicas":
			if r.TryDecodeAsNil() {
				x.DesiredReplicas = 0
			} else {
				x.DesiredReplicas = int32(r.DecodeInt(32))
			}
		case "currentCPUUtilizationPercentage":
			if r.TryDecodeAsNil() {
				if x.CurrentCPUUtilizationPercentage != nil {
					x.CurrentCPUUtilizationPercentage = nil
				}
			} else {
				if x.CurrentCPUUtilizationPercentage == nil {
					x.CurrentCPUUtilizationPercentage = new(int32)
				}
				yym87 := z.DecBinary()
				_ = yym87
				if false {
				} else {
					*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys79)
		} // end switch yys79
	} // end for yyj79
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj88 int
	var yyb88 bool
	var yyhl88 bool = l >= 0
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ObservedGeneration != nil {
			x.ObservedGeneration = nil
		}
	} else {
		if x.ObservedGeneration == nil {
			x.ObservedGeneration = new(int64)
		}
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			*((*int64)(x.ObservedGeneration)) = int64(r.DecodeInt(64))
		}
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScaleTime != nil {
			x.LastScaleTime = nil
		}
	} else {
		if x.LastScaleTime == nil {
			x.LastScaleTime = new(pkg1_unversioned.Time)
		}
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScaleTime) {
		} else if yym92 {
			z.DecBinaryUnmarshal(x.LastScaleTime)
		} else if !yym92 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScaleTime)
		} else {
			z.DecFallback(x.LastScaleTime, false)
		}
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CurrentReplicas = 0
	} else {
		x.CurrentReplicas = int32(r.DecodeInt(32))
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DesiredReplicas = 0
	} else {
		x.DesiredReplicas = int32(r.DecodeInt(32))
	}
	yyj88++
	if yyhl88 {
		yyb88 = yyj88 > l
	} else {
		yyb88 = r.CheckBreak()
	}
	if yyb88 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CurrentCPUUtilizationPercentage != nil {
			x.CurrentCPUUtilizationPercentage = nil
		}
	} else {
		if x.CurrentCPUUtilizationPercentage == nil {
			x.CurrentCPUUtilizationPercentage = new(int32)
		}
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else {
			*((*int32)(x.CurrentCPUUtilizationPercentage)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj88++
		if yyhl88 {
			yyb88 = yyj88 > l
		} else {
			yyb88 = r.CheckBreak()
		}
		if yyb88 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj88-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscaler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym97 := z.EncBinary()
		_ = yym97
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep98 := !z.EncBinary()
			yy2arr98 := z.EncBasicHandle().StructToArray
			var yyq98 [5]bool
			_, _, _ = yysep98, yyq98, yy2arr98
			const yyr98 bool = false
			yyq98[0] = x.Kind != ""
			yyq98[1] = x.APIVersion != ""
			yyq98[2] = true
			yyq98[3] = true
			yyq98[4] = true
			var yynn98 int
			if yyr98 || yy2arr98 {
				r.EncodeArrayStart(5)
			} else {
				yynn98 = 0
				for _, b := range yyq98 {
					if b {
						yynn98++
					}
				}
				r.EncodeMapStart(yynn98)
				yynn98 = 0
			}
			if yyr98 || yy2arr98 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq98[0] {
					yym100 := z.EncBinary()
					_ = yym100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq98[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym101 := z.EncBinary()
					_ = yym101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr98 || yy2arr98 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq98[1] {
					yym103 := z.EncBinary()
					_ = yym103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq98[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym104 := z.EncBinary()
					_ = yym104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr98 || yy2arr98 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq98[2] {
					yy106 := &x.ObjectMeta
					yym107 := z.EncBinary()
					_ = yym107
					if false {
					} else if z.HasExtensions() && z.EncExt(yy106) {
					} else {
						z.EncFallback(yy106)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq98[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy108 := &x.ObjectMeta
					yym109 := z.EncBinary()
					_ = yym109
					if false {
					} else if z.HasExtensions() && z.EncExt(yy108) {
					} else {
						z.EncFallback(yy108)
					}
				}
			}
			if yyr98 || yy2arr98 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq98[3] {
					yy111 := &x.Spec
					yy111.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq98[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy112 := &x.Spec
					yy112.CodecEncodeSelf(e)
				}
			}
			if yyr98 || yy2arr98 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq98[4] {
					yy114 := &x.Status
					yy114.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq98[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy115 := &x.Status
					yy115.CodecEncodeSelf(e)
				}
			}
			if yyr98 || yy2arr98 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscaler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym116 := z.DecBinary()
	_ = yym116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct117 := r.ContainerType()
		if yyct117 == codecSelferValueTypeMap1234 {
			yyl117 := r.ReadMapStart()
			if yyl117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl117, d)
			}
		} else if yyct117 == codecSelferValueTypeArray1234 {
			yyl117 := r.ReadArrayStart()
			if yyl117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys118Slc
	var yyhl118 bool = l >= 0
	for yyj118 := 0; ; yyj118++ {
		if yyhl118 {
			if yyj118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys118Slc = r.DecodeBytes(yys118Slc, true, true)
		yys118 := string(yys118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys118 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv121 := &x.ObjectMeta
				yym122 := z.DecBinary()
				_ = yym122
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv121) {
				} else {
					z.DecFallback(yyv121, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = HorizontalPodAutoscalerSpec{}
			} else {
				yyv123 := &x.Spec
				yyv123.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = HorizontalPodAutoscalerStatus{}
			} else {
				yyv124 := &x.Status
				yyv124.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys118)
		} // end switch yys118
	} // end for yyj118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscaler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj125 int
	var yyb125 bool
	var yyhl125 bool = l >= 0
	yyj125++
	if yyhl125 {
		yyb125 = yyj125 > l
	} else {
		yyb125 = r.CheckBreak()
	}
	if yyb125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj125++
	if yyhl125 {
		yyb125 = yyj125 > l
	} else {
		yyb125 = r.CheckBreak()
	}
	if yyb125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj125++
	if yyhl125 {
		yyb125 = yyj125 > l
	} else {
		yyb125 = r.CheckBreak()
	}
	if yyb125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv128 := &x.ObjectMeta
		yym129 := z.DecBinary()
		_ = yym129
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv128) {
		} else {
			z.DecFallback(yyv128, false)
		}
	}
	yyj125++
	if yyhl125 {
		yyb125 = yyj125 > l
	} else {
		yyb125 = r.CheckBreak()
	}
	if yyb125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = HorizontalPodAutoscalerSpec{}
	} else {
		yyv130 := &x.Spec
		yyv130.CodecDecodeSelf(d)
	}
	yyj125++
	if yyhl125 {
		yyb125 = yyj125 > l
	} else {
		yyb125 = r.CheckBreak()
	}
	if yyb125 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = HorizontalPodAutoscalerStatus{}
	} else {
		yyv131 := &x.Status
		yyv131.CodecDecodeSelf(d)
	}
	for {
		yyj125++
		if yyhl125 {
			yyb125 = yyj125 > l
		} else {
			yyb125 = r.CheckBreak()
		}
		if yyb125 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj125-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HorizontalPodAutoscalerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym132 := z.EncBinary()
		_ = yym132
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep133 := !z.EncBinary()
			yy2arr133 := z.EncBasicHandle().StructToArray
			var yyq133 [4]bool
			_, _, _ = yysep133, yyq133, yy2arr133
			const yyr133 bool = false
			yyq133[0] = x.Kind != ""
			yyq133[1] = x.APIVersion != ""
			yyq133[2] = true
			var yynn133 int
			if yyr133 || yy2arr133 {
				r.EncodeArrayStart(4)
			} else {
				yynn133 = 1
				for _, b := range yyq133 {
					if b {
						yynn133++
					}
				}
				r.EncodeMapStart(yynn133)
				yynn133 = 0
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq133[0] {
					yym135 := z.EncBinary()
					_ = yym135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq133[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym136 := z.EncBinary()
					_ = yym136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq133[1] {
					yym138 := z.EncBinary()
					_ = yym138
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq133[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym139 := z.EncBinary()
					_ = yym139
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq133[2] {
					yy141 := &x.ListMeta
					yym142 := z.EncBinary()
					_ = yym142
					if false {
					} else if z.HasExtensions() && z.EncExt(yy141) {
					} else {
						z.EncFallback(yy141)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq133[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy143 := &x.ListMeta
					yym144 := z.EncBinary()
					_ = yym144
					if false {
					} else if z.HasExtensions() && z.EncExt(yy143) {
					} else {
						z.EncFallback(yy143)
					}
				}
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym146 := z.EncBinary()
					_ = yym146
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym147 := z.EncBinary()
					_ = yym147
					if false {
					} else {
						h.encSliceHorizontalPodAutoscaler(([]HorizontalPodAutoscaler)(x.Items), e)
					}
				}
			}
			if yyr133 || yy2arr133 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HorizontalPodAutoscalerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym148 := z.DecBinary()
	_ = yym148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct149 := r.ContainerType()
		if yyct149 == codecSelferValueTypeMap1234 {
			yyl149 := r.ReadMapStart()
			if yyl149 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl149, d)
			}
		} else if yyct149 == codecSelferValueTypeArray1234 {
			yyl149 := r.ReadArrayStart()
			if yyl149 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys150Slc
	var yyhl150 bool = l >= 0
	for yyj150 := 0; ; yyj150++ {
		if yyhl150 {
			if yyj150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys150Slc = r.DecodeBytes(yys150Slc, true, true)
		yys150 := string(yys150Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys150 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv153 := &x.ListMeta
				yym154 := z.DecBinary()
				_ = yym154
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv153) {
				} else {
					z.DecFallback(yyv153, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv155 := &x.Items
				yym156 := z.DecBinary()
				_ = yym156
				if false {
				} else {
					h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv155), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys150)
		} // end switch yys150
	} // end for yyj150
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HorizontalPodAutoscalerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj157 int
	var yyb157 bool
	var yyhl157 bool = l >= 0
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv160 := &x.ListMeta
		yym161 := z.DecBinary()
		_ = yym161
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv160) {
		} else {
			z.DecFallback(yyv160, false)
		}
	}
	yyj157++
	if yyhl157 {
		yyb157 = yyj157 > l
	} else {
		yyb157 = r.CheckBreak()
	}
	if yyb157 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv162 := &x.Items
		yym163 := z.DecBinary()
		_ = yym163
		if false {
		} else {
			h.decSliceHorizontalPodAutoscaler((*[]HorizontalPodAutoscaler)(yyv162), d)
		}
	}
	for {
		yyj157++
		if yyhl157 {
			yyb157 = yyj157 > l
		} else {
			yyb157 = r.CheckBreak()
		}
		if yyb157 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj157-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Scale) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym164 := z.EncBinary()
		_ = yym164
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep165 := !z.EncBinary()
			yy2arr165 := z.EncBasicHandle().StructToArray
			var yyq165 [5]bool
			_, _, _ = yysep165, yyq165, yy2arr165
			const yyr165 bool = false
			yyq165[0] = x.Kind != ""
			yyq165[1] = x.APIVersion != ""
			yyq165[2] = true
			yyq165[3] = true
			yyq165[4] = true
			var yynn165 int
			if yyr165 || yy2arr165 {
				r.EncodeArrayStart(5)
			} else {
				yynn165 = 0
				for _, b := range yyq165 {
					if b {
						yynn165++
					}
				}
				r.EncodeMapStart(yynn165)
				yynn165 = 0
			}
			if yyr165 || yy2arr165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq165[0] {
					yym167 := z.EncBinary()
					_ = yym167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq165[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym168 := z.EncBinary()
					_ = yym168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr165 || yy2arr165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq165[1] {
					yym170 := z.EncBinary()
					_ = yym170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq165[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym171 := z.EncBinary()
					_ = yym171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr165 || yy2arr165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq165[2] {
					yy173 := &x.ObjectMeta
					yym174 := z.EncBinary()
					_ = yym174
					if false {
					} else if z.HasExtensions() && z.EncExt(yy173) {
					} else {
						z.EncFallback(yy173)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq165[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy175 := &x.ObjectMeta
					yym176 := z.EncBinary()
					_ = yym176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy175) {
					} else {
						z.EncFallback(yy175)
					}
				}
			}
			if yyr165 || yy2arr165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq165[3] {
					yy178 := &x.Spec
					yy178.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq165[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy179 := &x.Spec
					yy179.CodecEncodeSelf(e)
				}
			}
			if yyr165 || yy2arr165 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq165[4] {
					yy181 := &x.Status
					yy181.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq165[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy182 := &x.Status
					yy182.CodecEncodeSelf(e)
				}
			}
			if yyr165 || yy2arr165 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Scale) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym183 := z.DecBinary()
	_ = yym183
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct184 := r.ContainerType()
		if yyct184 == codecSelferValueTypeMap1234 {
			yyl184 := r.ReadMapStart()
			if yyl184 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl184, d)
			}
		} else if yyct184 == codecSelferValueTypeArray1234 {
			yyl184 := r.ReadArrayStart()
			if yyl184 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl184, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Scale) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys185Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys185Slc
	var yyhl185 bool = l >= 0
	for yyj185 := 0; ; yyj185++ {
		if yyhl185 {
			if yyj185 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys185Slc = r.DecodeBytes(yys185Slc, true, true)
		yys185 := string(yys185Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys185 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv188 := &x.ObjectMeta
				yym189 := z.DecBinary()
				_ = yym189
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv188) {
				} else {
					z.DecFallback(yyv188, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScaleSpec{}
			} else {
				yyv190 := &x.Spec
				yyv190.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScaleStatus{}
			} else {
				yyv191 := &x.Status
				yyv191.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys185)
		} // end switch yys185
	} // end for yyj185
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Scale) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj192 int
	var yyb192 bool
	var yyhl192 bool = l >= 0
	yyj192++
	if yyhl192 {
		yyb192 = yyj192 > l
	} else {
		yyb192 = r.CheckBreak()
	}
	if yyb192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj192++
	if yyhl192 {
		yyb192 = yyj192 > l
	} else {
		yyb192 = r.CheckBreak()
	}
	if yyb192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj192++
	if yyhl192 {
		yyb192 = yyj192 > l
	} else {
		yyb192 = r.CheckBreak()
	}
	if yyb192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv195 := &x.ObjectMeta
		yym196 := z.DecBinary()
		_ = yym196
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv195) {
		} else {
			z.DecFallback(yyv195, false)
		}
	}
	yyj192++
	if yyhl192 {
		yyb192 = yyj192 > l
	} else {
		yyb192 = r.CheckBreak()
	}
	if yyb192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScaleSpec{}
	} else {
		yyv197 := &x.Spec
		yyv197.CodecDecodeSelf(d)
	}
	yyj192++
	if yyhl192 {
		yyb192 = yyj192 > l
	} else {
		yyb192 = r.CheckBreak()
	}
	if yyb192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScaleStatus{}
	} else {
		yyv198 := &x.Status
		yyv198.CodecDecodeSelf(d)
	}
	for {
		yyj192++
		if yyhl192 {
			yyb192 = yyj192 > l
		} else {
			yyb192 = r.CheckBreak()
		}
		if yyb192 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj192-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym199 := z.EncBinary()
		_ = yym199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep200 := !z.EncBinary()
			yy2arr200 := z.EncBasicHandle().StructToArray
			var yyq200 [1]bool
			_, _, _ = yysep200, yyq200, yy2arr200
			const yyr200 bool = false
			yyq200[0] = x.Replicas != 0
			var yynn200 int
			if yyr200 || yy2arr200 {
				r.EncodeArrayStart(1)
			} else {
				yynn200 = 0
				for _, b := range yyq200 {
					if b {
						yynn200++
					}
				}
				r.EncodeMapStart(yynn200)
				yynn200 = 0
			}
			if yyr200 || yy2arr200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq200[0] {
					yym202 := z.EncBinary()
					_ = yym202
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq200[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("replicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym203 := z.EncBinary()
					_ = yym203
					if false {
					} else {
						r.EncodeInt(int64(x.Replicas))
					}
				}
			}
			if yyr200 || yy2arr200 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym204 := z.DecBinary()
	_ = yym204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct205 := r.ContainerType()
		if yyct205 == codecSelferValueTypeMap1234 {
			yyl205 := r.ReadMapStart()
			if yyl205 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl205, d)
			}
		} else if yyct205 == codecSelferValueTypeArray1234 {
			yyl205 := r.ReadArrayStart()
			if yyl205 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys206Slc
	var yyhl206 bool = l >= 0
	for yyj206 := 0; ; yyj206++ {
		if yyhl206 {
			if yyj206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys206Slc = r.DecodeBytes(yys206Slc, true, true)
		yys206 := string(yys206Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys206 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys206)
		} // end switch yys206
	} // end for yyj206
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj208 int
	var yyb208 bool
	var yyhl208 bool = l >= 0
	yyj208++
	if yyhl208 {
		yyb208 = yyj208 > l
	} else {
		yyb208 = r.CheckBreak()
	}
	if yyb208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	for {
		yyj208++
		if yyhl208 {
			yyb208 = yyj208 > l
		} else {
			yyb208 = r.CheckBreak()
		}
		if yyb208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScaleStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym210 := z.EncBinary()
		_ = yym210
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep211 := !z.EncBinary()
			yy2arr211 := z.EncBasicHandle().StructToArray
			var yyq211 [2]bool
			_, _, _ = yysep211, yyq211, yy2arr211
			const yyr211 bool = false
			yyq211[1] = x.Selector != ""
			var yynn211 int
			if yyr211 || yy2arr211 {
				r.EncodeArrayStart(2)
			} else {
				yynn211 = 1
				for _, b := range yyq211 {
					if b {
						yynn211++
					}
				}
				r.EncodeMapStart(yynn211)
				yynn211 = 0
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym213 := z.EncBinary()
				_ = yym213
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym214 := z.EncBinary()
				_ = yym214
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq211[1] {
					yym216 := z.EncBinary()
					_ = yym216
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Selector))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq211[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym217 := z.EncBinary()
					_ = yym217
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Selector))
					}
				}
			}
			if yyr211 || yy2arr211 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScaleStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym218 := z.DecBinary()
	_ = yym218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct219 := r.ContainerType()
		if yyct219 == codecSelferValueTypeMap1234 {
			yyl219 := r.ReadMapStart()
			if yyl219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl219, d)
			}
		} else if yyct219 == codecSelferValueTypeArray1234 {
			yyl219 := r.ReadArrayStart()
			if yyl219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScaleStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys220Slc
	var yyhl220 bool = l >= 0
	for yyj220 := 0; ; yyj220++ {
		if yyhl220 {
			if yyj220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys220Slc = r.DecodeBytes(yys220Slc, true, true)
		yys220 := string(yys220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys220 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = ""
			} else {
				x.Selector = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys220)
		} // end switch yys220
	} // end for yyj220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScaleStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj223 int
	var yyb223 bool
	var yyhl223 bool = l >= 0
	yyj223++
	if yyhl223 {
		yyb223 = yyj223 > l
	} else {
		yyb223 = r.CheckBreak()
	}
	if yyb223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj223++
	if yyhl223 {
		yyb223 = yyj223 > l
	} else {
		yyb223 = r.CheckBreak()
	}
	if yyb223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = ""
	} else {
		x.Selector = string(r.DecodeString())
	}
	for {
		yyj223++
		if yyhl223 {
			yyb223 = yyj223 > l
		} else {
			yyb223 = r.CheckBreak()
		}
		if yyb223 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj223-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceHorizontalPodAutoscaler(v []HorizontalPodAutoscaler, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv226 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy227 := &yyv226
		yy227.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHorizontalPodAutoscaler(v *[]HorizontalPodAutoscaler, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv228 := *v
	yyh228, yyl228 := z.DecSliceHelperStart()
	var yyc228 bool
	if yyl228 == 0 {
		if yyv228 == nil {
			yyv228 = []HorizontalPodAutoscaler{}
			yyc228 = true
		} else if len(yyv228) != 0 {
			yyv228 = yyv228[:0]
			yyc228 = true
		}
	} else if yyl228 > 0 {
		var yyrr228, yyrl228 int
		var yyrt228 bool
		if yyl228 > cap(yyv228) {

			yyrg228 := len(yyv228) > 0
			yyv2228 := yyv228
			yyrl228, yyrt228 = z.DecInferLen(yyl228, z.DecBasicHandle().MaxInitLen, 360)
			if yyrt228 {
				if yyrl228 <= cap(yyv228) {
					yyv228 = yyv228[:yyrl228]
				} else {
					yyv228 = make([]HorizontalPodAutoscaler, yyrl228)
				}
			} else {
				yyv228 = make([]HorizontalPodAutoscaler, yyrl228)
			}
			yyc228 = true
			yyrr228 = len(yyv228)
			if yyrg228 {
				copy(yyv228, yyv2228)
			}
		} else if yyl228 != len(yyv228) {
			yyv228 = yyv228[:yyl228]
			yyc228 = true
		}
		yyj228 := 0
		for ; yyj228 < yyrr228; yyj228++ {
			yyh228.ElemContainerState(yyj228)
			if r.TryDecodeAsNil() {
				yyv228[yyj228] = HorizontalPodAutoscaler{}
			} else {
				yyv229 := &yyv228[yyj228]
				yyv229.CodecDecodeSelf(d)
			}

		}
		if yyrt228 {
			for ; yyj228 < yyl228; yyj228++ {
				yyv228 = append(yyv228, HorizontalPodAutoscaler{})
				yyh228.ElemContainerState(yyj228)
				if r.TryDecodeAsNil() {
					yyv228[yyj228] = HorizontalPodAutoscaler{}
				} else {
					yyv230 := &yyv228[yyj228]
					yyv230.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj228 := 0
		for ; !r.CheckBreak(); yyj228++ {

			if yyj228 >= len(yyv228) {
				yyv228 = append(yyv228, HorizontalPodAutoscaler{}) // var yyz228 HorizontalPodAutoscaler
				yyc228 = true
			}
			yyh228.ElemContainerState(yyj228)
			if yyj228 < len(yyv228) {
				if r.TryDecodeAsNil() {
					yyv228[yyj228] = HorizontalPodAutoscaler{}
				} else {
					yyv231 := &yyv228[yyj228]
					yyv231.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj228 < len(yyv228) {
			yyv228 = yyv228[:yyj228]
			yyc228 = true
		} else if yyj228 == 0 && yyv228 == nil {
			yyv228 = []HorizontalPodAutoscaler{}
			yyc228 = true
		}
	}
	yyh228.End()
	if yyc228 {
		*v = yyv228
	}
}
