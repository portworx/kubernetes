/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package batch

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_api "k8s.io/kubernetes/pkg/api"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_api.ObjectMeta
		var v1 pkg4_resource.Quantity
		var v2 pkg1_unversioned.TypeMeta
		var v3 pkg3_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			yyq2[3] = true
			yyq2[4] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else if z.HasExtensions() && z.EncExt(yy10) {
					} else {
						z.EncFallback(yy10)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy12 := &x.ObjectMeta
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else if z.HasExtensions() && z.EncExt(yy12) {
					} else {
						z.EncFallback(yy12)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yy15 := &x.Spec
					yy15.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy16 := &x.Spec
					yy16.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yy18 := &x.Status
					yy18.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy19 := &x.Status
					yy19.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv25 := &x.ObjectMeta
				yym26 := z.DecBinary()
				_ = yym26
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv25) {
				} else {
					z.DecFallback(yyv25, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv27 := &x.Spec
				yyv27.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv28 := &x.Status
				yyv28.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj29 int
	var yyb29 bool
	var yyhl29 bool = l >= 0
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv32 := &x.ObjectMeta
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv32) {
		} else {
			z.DecFallback(yyv32, false)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv34 := &x.Spec
		yyv34.CodecDecodeSelf(d)
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv35 := &x.Status
		yyv35.CodecDecodeSelf(d)
	}
	for {
		yyj29++
		if yyhl29 {
			yyb29 = yyj29 > l
		} else {
			yyb29 = r.CheckBreak()
		}
		if yyb29 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj29-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym36 := z.EncBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep37 := !z.EncBinary()
			yy2arr37 := z.EncBasicHandle().StructToArray
			var yyq37 [4]bool
			_, _, _ = yysep37, yyq37, yy2arr37
			const yyr37 bool = false
			yyq37[0] = x.Kind != ""
			yyq37[1] = x.APIVersion != ""
			yyq37[2] = true
			var yynn37 int
			if yyr37 || yy2arr37 {
				r.EncodeArrayStart(4)
			} else {
				yynn37 = 1
				for _, b := range yyq37 {
					if b {
						yynn37++
					}
				}
				r.EncodeMapStart(yynn37)
				yynn37 = 0
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[0] {
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq37[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[1] {
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq37[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym43 := z.EncBinary()
					_ = yym43
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[2] {
					yy45 := &x.ListMeta
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else if z.HasExtensions() && z.EncExt(yy45) {
					} else {
						z.EncFallback(yy45)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq37[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy47 := &x.ListMeta
					yym48 := z.EncBinary()
					_ = yym48
					if false {
					} else if z.HasExtensions() && z.EncExt(yy47) {
					} else {
						z.EncFallback(yy47)
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv57 := &x.ListMeta
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv57) {
				} else {
					z.DecFallback(yyv57, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv59 := &x.Items
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv59), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj61 int
	var yyb61 bool
	var yyhl61 bool = l >= 0
	yyj61++
	if yyhl61 {
		yyb61 = yyj61 > l
	} else {
		yyb61 = r.CheckBreak()
	}
	if yyb61 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj61++
	if yyhl61 {
		yyb61 = yyj61 > l
	} else {
		yyb61 = r.CheckBreak()
	}
	if yyb61 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj61++
	if yyhl61 {
		yyb61 = yyj61 > l
	} else {
		yyb61 = r.CheckBreak()
	}
	if yyb61 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv64 := &x.ListMeta
		yym65 := z.DecBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv64) {
		} else {
			z.DecFallback(yyv64, false)
		}
	}
	yyj61++
	if yyhl61 {
		yyb61 = yyj61 > l
	} else {
		yyb61 = r.CheckBreak()
	}
	if yyb61 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv66 := &x.Items
		yym67 := z.DecBinary()
		_ = yym67
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv66), d)
		}
	}
	for {
		yyj61++
		if yyhl61 {
			yyb61 = yyj61 > l
		} else {
			yyb61 = r.CheckBreak()
		}
		if yyb61 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj61-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym68 := z.EncBinary()
		_ = yym68
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep69 := !z.EncBinary()
			yy2arr69 := z.EncBasicHandle().StructToArray
			var yyq69 [4]bool
			_, _, _ = yysep69, yyq69, yy2arr69
			const yyr69 bool = false
			yyq69[0] = x.Kind != ""
			yyq69[1] = x.APIVersion != ""
			yyq69[2] = true
			yyq69[3] = true
			var yynn69 int
			if yyr69 || yy2arr69 {
				r.EncodeArrayStart(4)
			} else {
				yynn69 = 0
				for _, b := range yyq69 {
					if b {
						yynn69++
					}
				}
				r.EncodeMapStart(yynn69)
				yynn69 = 0
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[0] {
					yym71 := z.EncBinary()
					_ = yym71
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq69[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym72 := z.EncBinary()
					_ = yym72
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[1] {
					yym74 := z.EncBinary()
					_ = yym74
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq69[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym75 := z.EncBinary()
					_ = yym75
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[2] {
					yy77 := &x.ObjectMeta
					yym78 := z.EncBinary()
					_ = yym78
					if false {
					} else if z.HasExtensions() && z.EncExt(yy77) {
					} else {
						z.EncFallback(yy77)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq69[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy79 := &x.ObjectMeta
					yym80 := z.EncBinary()
					_ = yym80
					if false {
					} else if z.HasExtensions() && z.EncExt(yy79) {
					} else {
						z.EncFallback(yy79)
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[3] {
					yy82 := &x.Template
					yy82.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq69[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy83 := &x.Template
					yy83.CodecEncodeSelf(e)
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym84 := z.DecBinary()
	_ = yym84
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct85 := r.ContainerType()
		if yyct85 == codecSelferValueTypeMap1234 {
			yyl85 := r.ReadMapStart()
			if yyl85 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl85, d)
			}
		} else if yyct85 == codecSelferValueTypeArray1234 {
			yyl85 := r.ReadArrayStart()
			if yyl85 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl85, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys86Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys86Slc
	var yyhl86 bool = l >= 0
	for yyj86 := 0; ; yyj86++ {
		if yyhl86 {
			if yyj86 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys86Slc = r.DecodeBytes(yys86Slc, true, true)
		yys86 := string(yys86Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys86 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv89 := &x.ObjectMeta
				yym90 := z.DecBinary()
				_ = yym90
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv89) {
				} else {
					z.DecFallback(yyv89, false)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = JobTemplateSpec{}
			} else {
				yyv91 := &x.Template
				yyv91.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys86)
		} // end switch yys86
	} // end for yyj86
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj92 int
	var yyb92 bool
	var yyhl92 bool = l >= 0
	yyj92++
	if yyhl92 {
		yyb92 = yyj92 > l
	} else {
		yyb92 = r.CheckBreak()
	}
	if yyb92 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj92++
	if yyhl92 {
		yyb92 = yyj92 > l
	} else {
		yyb92 = r.CheckBreak()
	}
	if yyb92 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj92++
	if yyhl92 {
		yyb92 = yyj92 > l
	} else {
		yyb92 = r.CheckBreak()
	}
	if yyb92 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv95 := &x.ObjectMeta
		yym96 := z.DecBinary()
		_ = yym96
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv95) {
		} else {
			z.DecFallback(yyv95, false)
		}
	}
	yyj92++
	if yyhl92 {
		yyb92 = yyj92 > l
	} else {
		yyb92 = r.CheckBreak()
	}
	if yyb92 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = JobTemplateSpec{}
	} else {
		yyv97 := &x.Template
		yyv97.CodecDecodeSelf(d)
	}
	for {
		yyj92++
		if yyhl92 {
			yyb92 = yyj92 > l
		} else {
			yyb92 = r.CheckBreak()
		}
		if yyb92 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj92-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym98 := z.EncBinary()
		_ = yym98
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep99 := !z.EncBinary()
			yy2arr99 := z.EncBasicHandle().StructToArray
			var yyq99 [2]bool
			_, _, _ = yysep99, yyq99, yy2arr99
			const yyr99 bool = false
			yyq99[0] = true
			yyq99[1] = true
			var yynn99 int
			if yyr99 || yy2arr99 {
				r.EncodeArrayStart(2)
			} else {
				yynn99 = 0
				for _, b := range yyq99 {
					if b {
						yynn99++
					}
				}
				r.EncodeMapStart(yynn99)
				yynn99 = 0
			}
			if yyr99 || yy2arr99 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq99[0] {
					yy101 := &x.ObjectMeta
					yym102 := z.EncBinary()
					_ = yym102
					if false {
					} else if z.HasExtensions() && z.EncExt(yy101) {
					} else {
						z.EncFallback(yy101)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq99[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy103 := &x.ObjectMeta
					yym104 := z.EncBinary()
					_ = yym104
					if false {
					} else if z.HasExtensions() && z.EncExt(yy103) {
					} else {
						z.EncFallback(yy103)
					}
				}
			}
			if yyr99 || yy2arr99 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq99[1] {
					yy106 := &x.Spec
					yy106.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq99[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy107 := &x.Spec
					yy107.CodecEncodeSelf(e)
				}
			}
			if yyr99 || yy2arr99 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym108 := z.DecBinary()
	_ = yym108
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct109 := r.ContainerType()
		if yyct109 == codecSelferValueTypeMap1234 {
			yyl109 := r.ReadMapStart()
			if yyl109 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl109, d)
			}
		} else if yyct109 == codecSelferValueTypeArray1234 {
			yyl109 := r.ReadArrayStart()
			if yyl109 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl109, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys110Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys110Slc
	var yyhl110 bool = l >= 0
	for yyj110 := 0; ; yyj110++ {
		if yyhl110 {
			if yyj110 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys110Slc = r.DecodeBytes(yys110Slc, true, true)
		yys110 := string(yys110Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys110 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv111 := &x.ObjectMeta
				yym112 := z.DecBinary()
				_ = yym112
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv111) {
				} else {
					z.DecFallback(yyv111, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv113 := &x.Spec
				yyv113.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys110)
		} // end switch yys110
	} // end for yyj110
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj114 int
	var yyb114 bool
	var yyhl114 bool = l >= 0
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv115 := &x.ObjectMeta
		yym116 := z.DecBinary()
		_ = yym116
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv115) {
		} else {
			z.DecFallback(yyv115, false)
		}
	}
	yyj114++
	if yyhl114 {
		yyb114 = yyj114 > l
	} else {
		yyb114 = r.CheckBreak()
	}
	if yyb114 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv117 := &x.Spec
		yyv117.CodecDecodeSelf(d)
	}
	for {
		yyj114++
		if yyhl114 {
			yyb114 = yyj114 > l
		} else {
			yyb114 = r.CheckBreak()
		}
		if yyb114 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj114-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym118 := z.EncBinary()
		_ = yym118
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep119 := !z.EncBinary()
			yy2arr119 := z.EncBasicHandle().StructToArray
			var yyq119 [6]bool
			_, _, _ = yysep119, yyq119, yy2arr119
			const yyr119 bool = false
			yyq119[0] = x.Parallelism != nil
			yyq119[1] = x.Completions != nil
			yyq119[2] = x.ActiveDeadlineSeconds != nil
			yyq119[3] = x.Selector != nil
			yyq119[4] = x.ManualSelector != nil
			var yynn119 int
			if yyr119 || yy2arr119 {
				r.EncodeArrayStart(6)
			} else {
				yynn119 = 1
				for _, b := range yyq119 {
					if b {
						yynn119++
					}
				}
				r.EncodeMapStart(yynn119)
				yynn119 = 0
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq119[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy121 := *x.Parallelism
						yym122 := z.EncBinary()
						_ = yym122
						if false {
						} else {
							r.EncodeInt(int64(yy121))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq119[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy123 := *x.Parallelism
						yym124 := z.EncBinary()
						_ = yym124
						if false {
						} else {
							r.EncodeInt(int64(yy123))
						}
					}
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq119[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy126 := *x.Completions
						yym127 := z.EncBinary()
						_ = yym127
						if false {
						} else {
							r.EncodeInt(int64(yy126))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq119[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy128 := *x.Completions
						yym129 := z.EncBinary()
						_ = yym129
						if false {
						} else {
							r.EncodeInt(int64(yy128))
						}
					}
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq119[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy131 := *x.ActiveDeadlineSeconds
						yym132 := z.EncBinary()
						_ = yym132
						if false {
						} else {
							r.EncodeInt(int64(yy131))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq119[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy133 := *x.ActiveDeadlineSeconds
						yym134 := z.EncBinary()
						_ = yym134
						if false {
						} else {
							r.EncodeInt(int64(yy133))
						}
					}
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq119[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym136 := z.EncBinary()
						_ = yym136
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq119[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym137 := z.EncBinary()
						_ = yym137
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq119[4] {
					if x.ManualSelector == nil {
						r.EncodeNil()
					} else {
						yy139 := *x.ManualSelector
						yym140 := z.EncBinary()
						_ = yym140
						if false {
						} else {
							r.EncodeBool(bool(yy139))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq119[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("manualSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ManualSelector == nil {
						r.EncodeNil()
					} else {
						yy141 := *x.ManualSelector
						yym142 := z.EncBinary()
						_ = yym142
						if false {
						} else {
							r.EncodeBool(bool(yy141))
						}
					}
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy144 := &x.Template
				yym145 := z.EncBinary()
				_ = yym145
				if false {
				} else if z.HasExtensions() && z.EncExt(yy144) {
				} else {
					z.EncFallback(yy144)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy146 := &x.Template
				yym147 := z.EncBinary()
				_ = yym147
				if false {
				} else if z.HasExtensions() && z.EncExt(yy146) {
				} else {
					z.EncFallback(yy146)
				}
			}
			if yyr119 || yy2arr119 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym148 := z.DecBinary()
	_ = yym148
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct149 := r.ContainerType()
		if yyct149 == codecSelferValueTypeMap1234 {
			yyl149 := r.ReadMapStart()
			if yyl149 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl149, d)
			}
		} else if yyct149 == codecSelferValueTypeArray1234 {
			yyl149 := r.ReadArrayStart()
			if yyl149 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl149, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys150Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys150Slc
	var yyhl150 bool = l >= 0
	for yyj150 := 0; ; yyj150++ {
		if yyhl150 {
			if yyj150 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys150Slc = r.DecodeBytes(yys150Slc, true, true)
		yys150 := string(yys150Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys150 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int32)
				}
				yym152 := z.DecBinary()
				_ = yym152
				if false {
				} else {
					*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int32)
				}
				yym154 := z.DecBinary()
				_ = yym154
				if false {
				} else {
					*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym156 := z.DecBinary()
				_ = yym156
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg1_unversioned.LabelSelector)
				}
				yym158 := z.DecBinary()
				_ = yym158
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "manualSelector":
			if r.TryDecodeAsNil() {
				if x.ManualSelector != nil {
					x.ManualSelector = nil
				}
			} else {
				if x.ManualSelector == nil {
					x.ManualSelector = new(bool)
				}
				yym160 := z.DecBinary()
				_ = yym160
				if false {
				} else {
					*((*bool)(x.ManualSelector)) = r.DecodeBool()
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_api.PodTemplateSpec{}
			} else {
				yyv161 := &x.Template
				yym162 := z.DecBinary()
				_ = yym162
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv161) {
				} else {
					z.DecFallback(yyv161, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys150)
		} // end switch yys150
	} // end for yyj150
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj163 int
	var yyb163 bool
	var yyhl163 bool = l >= 0
	yyj163++
	if yyhl163 {
		yyb163 = yyj163 > l
	} else {
		yyb163 = r.CheckBreak()
	}
	if yyb163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int32)
		}
		yym165 := z.DecBinary()
		_ = yym165
		if false {
		} else {
			*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
		}
	}
	yyj163++
	if yyhl163 {
		yyb163 = yyj163 > l
	} else {
		yyb163 = r.CheckBreak()
	}
	if yyb163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int32)
		}
		yym167 := z.DecBinary()
		_ = yym167
		if false {
		} else {
			*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
		}
	}
	yyj163++
	if yyhl163 {
		yyb163 = yyj163 > l
	} else {
		yyb163 = r.CheckBreak()
	}
	if yyb163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym169 := z.DecBinary()
		_ = yym169
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj163++
	if yyhl163 {
		yyb163 = yyj163 > l
	} else {
		yyb163 = r.CheckBreak()
	}
	if yyb163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg1_unversioned.LabelSelector)
		}
		yym171 := z.DecBinary()
		_ = yym171
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj163++
	if yyhl163 {
		yyb163 = yyj163 > l
	} else {
		yyb163 = r.CheckBreak()
	}
	if yyb163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ManualSelector != nil {
			x.ManualSelector = nil
		}
	} else {
		if x.ManualSelector == nil {
			x.ManualSelector = new(bool)
		}
		yym173 := z.DecBinary()
		_ = yym173
		if false {
		} else {
			*((*bool)(x.ManualSelector)) = r.DecodeBool()
		}
	}
	yyj163++
	if yyhl163 {
		yyb163 = yyj163 > l
	} else {
		yyb163 = r.CheckBreak()
	}
	if yyb163 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_api.PodTemplateSpec{}
	} else {
		yyv174 := &x.Template
		yym175 := z.DecBinary()
		_ = yym175
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv174) {
		} else {
			z.DecFallback(yyv174, false)
		}
	}
	for {
		yyj163++
		if yyhl163 {
			yyb163 = yyj163 > l
		} else {
			yyb163 = r.CheckBreak()
		}
		if yyb163 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj163-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym176 := z.EncBinary()
		_ = yym176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep177 := !z.EncBinary()
			yy2arr177 := z.EncBasicHandle().StructToArray
			var yyq177 [6]bool
			_, _, _ = yysep177, yyq177, yy2arr177
			const yyr177 bool = false
			yyq177[0] = len(x.Conditions) != 0
			yyq177[1] = x.StartTime != nil
			yyq177[2] = x.CompletionTime != nil
			yyq177[3] = x.Active != 0
			yyq177[4] = x.Succeeded != 0
			yyq177[5] = x.Failed != 0
			var yynn177 int
			if yyr177 || yy2arr177 {
				r.EncodeArrayStart(6)
			} else {
				yynn177 = 0
				for _, b := range yyq177 {
					if b {
						yynn177++
					}
				}
				r.EncodeMapStart(yynn177)
				yynn177 = 0
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym179 := z.EncBinary()
						_ = yym179
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq177[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym180 := z.EncBinary()
						_ = yym180
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym182 := z.EncBinary()
						_ = yym182
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym182 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym182 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq177[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym183 := z.EncBinary()
						_ = yym183
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym183 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym183 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym185 := z.EncBinary()
						_ = yym185
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym185 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym185 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq177[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym186 := z.EncBinary()
						_ = yym186
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym186 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym186 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[3] {
					yym188 := z.EncBinary()
					_ = yym188
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq177[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym189 := z.EncBinary()
					_ = yym189
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[4] {
					yym191 := z.EncBinary()
					_ = yym191
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq177[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym192 := z.EncBinary()
					_ = yym192
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq177[5] {
					yym194 := z.EncBinary()
					_ = yym194
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq177[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym195 := z.EncBinary()
					_ = yym195
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr177 || yy2arr177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym196 := z.DecBinary()
	_ = yym196
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct197 := r.ContainerType()
		if yyct197 == codecSelferValueTypeMap1234 {
			yyl197 := r.ReadMapStart()
			if yyl197 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl197, d)
			}
		} else if yyct197 == codecSelferValueTypeArray1234 {
			yyl197 := r.ReadArrayStart()
			if yyl197 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl197, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys198Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys198Slc
	var yyhl198 bool = l >= 0
	for yyj198 := 0; ; yyj198++ {
		if yyhl198 {
			if yyj198 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys198Slc = r.DecodeBytes(yys198Slc, true, true)
		yys198 := string(yys198Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys198 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv199 := &x.Conditions
				yym200 := z.DecBinary()
				_ = yym200
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv199), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym202 := z.DecBinary()
				_ = yym202
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym202 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym202 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym204 := z.DecBinary()
				_ = yym204
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym204 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym204 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int32(r.DecodeInt(32))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int32(r.DecodeInt(32))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys198)
		} // end switch yys198
	} // end for yyj198
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj208 int
	var yyb208 bool
	var yyhl208 bool = l >= 0
	yyj208++
	if yyhl208 {
		yyb208 = yyj208 > l
	} else {
		yyb208 = r.CheckBreak()
	}
	if yyb208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv209 := &x.Conditions
		yym210 := z.DecBinary()
		_ = yym210
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv209), d)
		}
	}
	yyj208++
	if yyhl208 {
		yyb208 = yyj208 > l
	} else {
		yyb208 = r.CheckBreak()
	}
	if yyb208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym212 := z.DecBinary()
		_ = yym212
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym212 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym212 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj208++
	if yyhl208 {
		yyb208 = yyj208 > l
	} else {
		yyb208 = r.CheckBreak()
	}
	if yyb208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym214 := z.DecBinary()
		_ = yym214
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym214 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym214 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj208++
	if yyhl208 {
		yyb208 = yyj208 > l
	} else {
		yyb208 = r.CheckBreak()
	}
	if yyb208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int32(r.DecodeInt(32))
	}
	yyj208++
	if yyhl208 {
		yyb208 = yyj208 > l
	} else {
		yyb208 = r.CheckBreak()
	}
	if yyb208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int32(r.DecodeInt(32))
	}
	yyj208++
	if yyhl208 {
		yyb208 = yyj208 > l
	} else {
		yyb208 = r.CheckBreak()
	}
	if yyb208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int32(r.DecodeInt(32))
	}
	for {
		yyj208++
		if yyhl208 {
			yyb208 = yyj208 > l
		} else {
			yyb208 = r.CheckBreak()
		}
		if yyb208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym218 := z.EncBinary()
	_ = yym218
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym219 := z.DecBinary()
	_ = yym219
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym220 := z.EncBinary()
		_ = yym220
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep221 := !z.EncBinary()
			yy2arr221 := z.EncBasicHandle().StructToArray
			var yyq221 [6]bool
			_, _, _ = yysep221, yyq221, yy2arr221
			const yyr221 bool = false
			yyq221[2] = true
			yyq221[3] = true
			yyq221[4] = x.Reason != ""
			yyq221[5] = x.Message != ""
			var yynn221 int
			if yyr221 || yy2arr221 {
				r.EncodeArrayStart(6)
			} else {
				yynn221 = 2
				for _, b := range yyq221 {
					if b {
						yynn221++
					}
				}
				r.EncodeMapStart(yynn221)
				yynn221 = 0
			}
			if yyr221 || yy2arr221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr221 || yy2arr221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym224 := z.EncBinary()
				_ = yym224
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym225 := z.EncBinary()
				_ = yym225
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr221 || yy2arr221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq221[2] {
					yy227 := &x.LastProbeTime
					yym228 := z.EncBinary()
					_ = yym228
					if false {
					} else if z.HasExtensions() && z.EncExt(yy227) {
					} else if yym228 {
						z.EncBinaryMarshal(yy227)
					} else if !yym228 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy227)
					} else {
						z.EncFallback(yy227)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq221[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy229 := &x.LastProbeTime
					yym230 := z.EncBinary()
					_ = yym230
					if false {
					} else if z.HasExtensions() && z.EncExt(yy229) {
					} else if yym230 {
						z.EncBinaryMarshal(yy229)
					} else if !yym230 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy229)
					} else {
						z.EncFallback(yy229)
					}
				}
			}
			if yyr221 || yy2arr221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq221[3] {
					yy232 := &x.LastTransitionTime
					yym233 := z.EncBinary()
					_ = yym233
					if false {
					} else if z.HasExtensions() && z.EncExt(yy232) {
					} else if yym233 {
						z.EncBinaryMarshal(yy232)
					} else if !yym233 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy232)
					} else {
						z.EncFallback(yy232)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq221[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy234 := &x.LastTransitionTime
					yym235 := z.EncBinary()
					_ = yym235
					if false {
					} else if z.HasExtensions() && z.EncExt(yy234) {
					} else if yym235 {
						z.EncBinaryMarshal(yy234)
					} else if !yym235 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy234)
					} else {
						z.EncFallback(yy234)
					}
				}
			}
			if yyr221 || yy2arr221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq221[4] {
					yym237 := z.EncBinary()
					_ = yym237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq221[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym238 := z.EncBinary()
					_ = yym238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr221 || yy2arr221 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq221[5] {
					yym240 := z.EncBinary()
					_ = yym240
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq221[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym241 := z.EncBinary()
					_ = yym241
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr221 || yy2arr221 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym242 := z.DecBinary()
	_ = yym242
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct243 := r.ContainerType()
		if yyct243 == codecSelferValueTypeMap1234 {
			yyl243 := r.ReadMapStart()
			if yyl243 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl243, d)
			}
		} else if yyct243 == codecSelferValueTypeArray1234 {
			yyl243 := r.ReadArrayStart()
			if yyl243 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl243, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys244Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys244Slc
	var yyhl244 bool = l >= 0
	for yyj244 := 0; ; yyj244++ {
		if yyhl244 {
			if yyj244 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys244Slc = r.DecodeBytes(yys244Slc, true, true)
		yys244 := string(yys244Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys244 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv247 := &x.LastProbeTime
				yym248 := z.DecBinary()
				_ = yym248
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv247) {
				} else if yym248 {
					z.DecBinaryUnmarshal(yyv247)
				} else if !yym248 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv247)
				} else {
					z.DecFallback(yyv247, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv249 := &x.LastTransitionTime
				yym250 := z.DecBinary()
				_ = yym250
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv249) {
				} else if yym250 {
					z.DecBinaryUnmarshal(yyv249)
				} else if !yym250 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv249)
				} else {
					z.DecFallback(yyv249, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys244)
		} // end switch yys244
	} // end for yyj244
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj253 int
	var yyb253 bool
	var yyhl253 bool = l >= 0
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_api.ConditionStatus(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv256 := &x.LastProbeTime
		yym257 := z.DecBinary()
		_ = yym257
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv256) {
		} else if yym257 {
			z.DecBinaryUnmarshal(yyv256)
		} else if !yym257 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv256)
		} else {
			z.DecFallback(yyv256, false)
		}
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv258 := &x.LastTransitionTime
		yym259 := z.DecBinary()
		_ = yym259
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv258) {
		} else if yym259 {
			z.DecBinaryUnmarshal(yyv258)
		} else if !yym259 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv258)
		} else {
			z.DecFallback(yyv258, false)
		}
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj253++
	if yyhl253 {
		yyb253 = yyj253 > l
	} else {
		yyb253 = r.CheckBreak()
	}
	if yyb253 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj253++
		if yyhl253 {
			yyb253 = yyj253 > l
		} else {
			yyb253 = r.CheckBreak()
		}
		if yyb253 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj253-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScheduledJob) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym262 := z.EncBinary()
		_ = yym262
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep263 := !z.EncBinary()
			yy2arr263 := z.EncBasicHandle().StructToArray
			var yyq263 [5]bool
			_, _, _ = yysep263, yyq263, yy2arr263
			const yyr263 bool = false
			yyq263[0] = x.Kind != ""
			yyq263[1] = x.APIVersion != ""
			yyq263[2] = true
			yyq263[3] = true
			yyq263[4] = true
			var yynn263 int
			if yyr263 || yy2arr263 {
				r.EncodeArrayStart(5)
			} else {
				yynn263 = 0
				for _, b := range yyq263 {
					if b {
						yynn263++
					}
				}
				r.EncodeMapStart(yynn263)
				yynn263 = 0
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[0] {
					yym265 := z.EncBinary()
					_ = yym265
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq263[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[1] {
					yym268 := z.EncBinary()
					_ = yym268
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq263[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[2] {
					yy271 := &x.ObjectMeta
					yym272 := z.EncBinary()
					_ = yym272
					if false {
					} else if z.HasExtensions() && z.EncExt(yy271) {
					} else {
						z.EncFallback(yy271)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy273 := &x.ObjectMeta
					yym274 := z.EncBinary()
					_ = yym274
					if false {
					} else if z.HasExtensions() && z.EncExt(yy273) {
					} else {
						z.EncFallback(yy273)
					}
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[3] {
					yy276 := &x.Spec
					yy276.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy277 := &x.Spec
					yy277.CodecEncodeSelf(e)
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq263[4] {
					yy279 := &x.Status
					yy279.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq263[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy280 := &x.Status
					yy280.CodecEncodeSelf(e)
				}
			}
			if yyr263 || yy2arr263 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScheduledJob) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym281 := z.DecBinary()
	_ = yym281
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct282 := r.ContainerType()
		if yyct282 == codecSelferValueTypeMap1234 {
			yyl282 := r.ReadMapStart()
			if yyl282 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl282, d)
			}
		} else if yyct282 == codecSelferValueTypeArray1234 {
			yyl282 := r.ReadArrayStart()
			if yyl282 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl282, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScheduledJob) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys283Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys283Slc
	var yyhl283 bool = l >= 0
	for yyj283 := 0; ; yyj283++ {
		if yyhl283 {
			if yyj283 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys283Slc = r.DecodeBytes(yys283Slc, true, true)
		yys283 := string(yys283Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys283 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_api.ObjectMeta{}
			} else {
				yyv286 := &x.ObjectMeta
				yym287 := z.DecBinary()
				_ = yym287
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv286) {
				} else {
					z.DecFallback(yyv286, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ScheduledJobSpec{}
			} else {
				yyv288 := &x.Spec
				yyv288.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ScheduledJobStatus{}
			} else {
				yyv289 := &x.Status
				yyv289.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys283)
		} // end switch yys283
	} // end for yyj283
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScheduledJob) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj290 int
	var yyb290 bool
	var yyhl290 bool = l >= 0
	yyj290++
	if yyhl290 {
		yyb290 = yyj290 > l
	} else {
		yyb290 = r.CheckBreak()
	}
	if yyb290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj290++
	if yyhl290 {
		yyb290 = yyj290 > l
	} else {
		yyb290 = r.CheckBreak()
	}
	if yyb290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj290++
	if yyhl290 {
		yyb290 = yyj290 > l
	} else {
		yyb290 = r.CheckBreak()
	}
	if yyb290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_api.ObjectMeta{}
	} else {
		yyv293 := &x.ObjectMeta
		yym294 := z.DecBinary()
		_ = yym294
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv293) {
		} else {
			z.DecFallback(yyv293, false)
		}
	}
	yyj290++
	if yyhl290 {
		yyb290 = yyj290 > l
	} else {
		yyb290 = r.CheckBreak()
	}
	if yyb290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ScheduledJobSpec{}
	} else {
		yyv295 := &x.Spec
		yyv295.CodecDecodeSelf(d)
	}
	yyj290++
	if yyhl290 {
		yyb290 = yyj290 > l
	} else {
		yyb290 = r.CheckBreak()
	}
	if yyb290 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ScheduledJobStatus{}
	} else {
		yyv296 := &x.Status
		yyv296.CodecDecodeSelf(d)
	}
	for {
		yyj290++
		if yyhl290 {
			yyb290 = yyj290 > l
		} else {
			yyb290 = r.CheckBreak()
		}
		if yyb290 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj290-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScheduledJobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym297 := z.EncBinary()
		_ = yym297
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep298 := !z.EncBinary()
			yy2arr298 := z.EncBasicHandle().StructToArray
			var yyq298 [4]bool
			_, _, _ = yysep298, yyq298, yy2arr298
			const yyr298 bool = false
			yyq298[0] = x.Kind != ""
			yyq298[1] = x.APIVersion != ""
			yyq298[2] = true
			var yynn298 int
			if yyr298 || yy2arr298 {
				r.EncodeArrayStart(4)
			} else {
				yynn298 = 1
				for _, b := range yyq298 {
					if b {
						yynn298++
					}
				}
				r.EncodeMapStart(yynn298)
				yynn298 = 0
			}
			if yyr298 || yy2arr298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq298[0] {
					yym300 := z.EncBinary()
					_ = yym300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq298[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym301 := z.EncBinary()
					_ = yym301
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr298 || yy2arr298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq298[1] {
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq298[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym304 := z.EncBinary()
					_ = yym304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr298 || yy2arr298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq298[2] {
					yy306 := &x.ListMeta
					yym307 := z.EncBinary()
					_ = yym307
					if false {
					} else if z.HasExtensions() && z.EncExt(yy306) {
					} else {
						z.EncFallback(yy306)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq298[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy308 := &x.ListMeta
					yym309 := z.EncBinary()
					_ = yym309
					if false {
					} else if z.HasExtensions() && z.EncExt(yy308) {
					} else {
						z.EncFallback(yy308)
					}
				}
			}
			if yyr298 || yy2arr298 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym311 := z.EncBinary()
					_ = yym311
					if false {
					} else {
						h.encSliceScheduledJob(([]ScheduledJob)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym312 := z.EncBinary()
					_ = yym312
					if false {
					} else {
						h.encSliceScheduledJob(([]ScheduledJob)(x.Items), e)
					}
				}
			}
			if yyr298 || yy2arr298 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScheduledJobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym313 := z.DecBinary()
	_ = yym313
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct314 := r.ContainerType()
		if yyct314 == codecSelferValueTypeMap1234 {
			yyl314 := r.ReadMapStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl314, d)
			}
		} else if yyct314 == codecSelferValueTypeArray1234 {
			yyl314 := r.ReadArrayStart()
			if yyl314 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl314, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScheduledJobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys315Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys315Slc
	var yyhl315 bool = l >= 0
	for yyj315 := 0; ; yyj315++ {
		if yyhl315 {
			if yyj315 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys315Slc = r.DecodeBytes(yys315Slc, true, true)
		yys315 := string(yys315Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys315 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv318 := &x.ListMeta
				yym319 := z.DecBinary()
				_ = yym319
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv318) {
				} else {
					z.DecFallback(yyv318, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv320 := &x.Items
				yym321 := z.DecBinary()
				_ = yym321
				if false {
				} else {
					h.decSliceScheduledJob((*[]ScheduledJob)(yyv320), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys315)
		} // end switch yys315
	} // end for yyj315
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScheduledJobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj322 int
	var yyb322 bool
	var yyhl322 bool = l >= 0
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv325 := &x.ListMeta
		yym326 := z.DecBinary()
		_ = yym326
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv325) {
		} else {
			z.DecFallback(yyv325, false)
		}
	}
	yyj322++
	if yyhl322 {
		yyb322 = yyj322 > l
	} else {
		yyb322 = r.CheckBreak()
	}
	if yyb322 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv327 := &x.Items
		yym328 := z.DecBinary()
		_ = yym328
		if false {
		} else {
			h.decSliceScheduledJob((*[]ScheduledJob)(yyv327), d)
		}
	}
	for {
		yyj322++
		if yyhl322 {
			yyb322 = yyj322 > l
		} else {
			yyb322 = r.CheckBreak()
		}
		if yyb322 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj322-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ScheduledJobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym329 := z.EncBinary()
		_ = yym329
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep330 := !z.EncBinary()
			yy2arr330 := z.EncBasicHandle().StructToArray
			var yyq330 [5]bool
			_, _, _ = yysep330, yyq330, yy2arr330
			const yyr330 bool = false
			yyq330[1] = x.StartingDeadlineSeconds != nil
			yyq330[2] = x.ConcurrencyPolicy != ""
			yyq330[3] = x.Suspend != nil
			var yynn330 int
			if yyr330 || yy2arr330 {
				r.EncodeArrayStart(5)
			} else {
				yynn330 = 2
				for _, b := range yyq330 {
					if b {
						yynn330++
					}
				}
				r.EncodeMapStart(yynn330)
				yynn330 = 0
			}
			if yyr330 || yy2arr330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym332 := z.EncBinary()
				_ = yym332
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Schedule))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("schedule"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym333 := z.EncBinary()
				_ = yym333
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Schedule))
				}
			}
			if yyr330 || yy2arr330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq330[1] {
					if x.StartingDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy335 := *x.StartingDeadlineSeconds
						yym336 := z.EncBinary()
						_ = yym336
						if false {
						} else {
							r.EncodeInt(int64(yy335))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq330[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startingDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartingDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy337 := *x.StartingDeadlineSeconds
						yym338 := z.EncBinary()
						_ = yym338
						if false {
						} else {
							r.EncodeInt(int64(yy337))
						}
					}
				}
			}
			if yyr330 || yy2arr330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq330[2] {
					x.ConcurrencyPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq330[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("concurrencyPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.ConcurrencyPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr330 || yy2arr330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq330[3] {
					if x.Suspend == nil {
						r.EncodeNil()
					} else {
						yy341 := *x.Suspend
						yym342 := z.EncBinary()
						_ = yym342
						if false {
						} else {
							r.EncodeBool(bool(yy341))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq330[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("suspend"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Suspend == nil {
						r.EncodeNil()
					} else {
						yy343 := *x.Suspend
						yym344 := z.EncBinary()
						_ = yym344
						if false {
						} else {
							r.EncodeBool(bool(yy343))
						}
					}
				}
			}
			if yyr330 || yy2arr330 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy346 := &x.JobTemplate
				yy346.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("jobTemplate"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy347 := &x.JobTemplate
				yy347.CodecEncodeSelf(e)
			}
			if yyr330 || yy2arr330 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScheduledJobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym348 := z.DecBinary()
	_ = yym348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct349 := r.ContainerType()
		if yyct349 == codecSelferValueTypeMap1234 {
			yyl349 := r.ReadMapStart()
			if yyl349 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl349, d)
			}
		} else if yyct349 == codecSelferValueTypeArray1234 {
			yyl349 := r.ReadArrayStart()
			if yyl349 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl349, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScheduledJobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys350Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys350Slc
	var yyhl350 bool = l >= 0
	for yyj350 := 0; ; yyj350++ {
		if yyhl350 {
			if yyj350 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys350Slc = r.DecodeBytes(yys350Slc, true, true)
		yys350 := string(yys350Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys350 {
		case "schedule":
			if r.TryDecodeAsNil() {
				x.Schedule = ""
			} else {
				x.Schedule = string(r.DecodeString())
			}
		case "startingDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.StartingDeadlineSeconds != nil {
					x.StartingDeadlineSeconds = nil
				}
			} else {
				if x.StartingDeadlineSeconds == nil {
					x.StartingDeadlineSeconds = new(int64)
				}
				yym353 := z.DecBinary()
				_ = yym353
				if false {
				} else {
					*((*int64)(x.StartingDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "concurrencyPolicy":
			if r.TryDecodeAsNil() {
				x.ConcurrencyPolicy = ""
			} else {
				x.ConcurrencyPolicy = ConcurrencyPolicy(r.DecodeString())
			}
		case "suspend":
			if r.TryDecodeAsNil() {
				if x.Suspend != nil {
					x.Suspend = nil
				}
			} else {
				if x.Suspend == nil {
					x.Suspend = new(bool)
				}
				yym356 := z.DecBinary()
				_ = yym356
				if false {
				} else {
					*((*bool)(x.Suspend)) = r.DecodeBool()
				}
			}
		case "jobTemplate":
			if r.TryDecodeAsNil() {
				x.JobTemplate = JobTemplateSpec{}
			} else {
				yyv357 := &x.JobTemplate
				yyv357.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys350)
		} // end switch yys350
	} // end for yyj350
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScheduledJobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj358 int
	var yyb358 bool
	var yyhl358 bool = l >= 0
	yyj358++
	if yyhl358 {
		yyb358 = yyj358 > l
	} else {
		yyb358 = r.CheckBreak()
	}
	if yyb358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Schedule = ""
	} else {
		x.Schedule = string(r.DecodeString())
	}
	yyj358++
	if yyhl358 {
		yyb358 = yyj358 > l
	} else {
		yyb358 = r.CheckBreak()
	}
	if yyb358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartingDeadlineSeconds != nil {
			x.StartingDeadlineSeconds = nil
		}
	} else {
		if x.StartingDeadlineSeconds == nil {
			x.StartingDeadlineSeconds = new(int64)
		}
		yym361 := z.DecBinary()
		_ = yym361
		if false {
		} else {
			*((*int64)(x.StartingDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj358++
	if yyhl358 {
		yyb358 = yyj358 > l
	} else {
		yyb358 = r.CheckBreak()
	}
	if yyb358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ConcurrencyPolicy = ""
	} else {
		x.ConcurrencyPolicy = ConcurrencyPolicy(r.DecodeString())
	}
	yyj358++
	if yyhl358 {
		yyb358 = yyj358 > l
	} else {
		yyb358 = r.CheckBreak()
	}
	if yyb358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Suspend != nil {
			x.Suspend = nil
		}
	} else {
		if x.Suspend == nil {
			x.Suspend = new(bool)
		}
		yym364 := z.DecBinary()
		_ = yym364
		if false {
		} else {
			*((*bool)(x.Suspend)) = r.DecodeBool()
		}
	}
	yyj358++
	if yyhl358 {
		yyb358 = yyj358 > l
	} else {
		yyb358 = r.CheckBreak()
	}
	if yyb358 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.JobTemplate = JobTemplateSpec{}
	} else {
		yyv365 := &x.JobTemplate
		yyv365.CodecDecodeSelf(d)
	}
	for {
		yyj358++
		if yyhl358 {
			yyb358 = yyj358 > l
		} else {
			yyb358 = r.CheckBreak()
		}
		if yyb358 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj358-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConcurrencyPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym366 := z.EncBinary()
	_ = yym366
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConcurrencyPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym367 := z.DecBinary()
	_ = yym367
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ScheduledJobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym368 := z.EncBinary()
		_ = yym368
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep369 := !z.EncBinary()
			yy2arr369 := z.EncBasicHandle().StructToArray
			var yyq369 [2]bool
			_, _, _ = yysep369, yyq369, yy2arr369
			const yyr369 bool = false
			yyq369[0] = len(x.Active) != 0
			yyq369[1] = x.LastScheduleTime != nil
			var yynn369 int
			if yyr369 || yy2arr369 {
				r.EncodeArrayStart(2)
			} else {
				yynn369 = 0
				for _, b := range yyq369 {
					if b {
						yynn369++
					}
				}
				r.EncodeMapStart(yynn369)
				yynn369 = 0
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[0] {
					if x.Active == nil {
						r.EncodeNil()
					} else {
						yym371 := z.EncBinary()
						_ = yym371
						if false {
						} else {
							h.encSliceapi_ObjectReference(([]pkg2_api.ObjectReference)(x.Active), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Active == nil {
						r.EncodeNil()
					} else {
						yym372 := z.EncBinary()
						_ = yym372
						if false {
						} else {
							h.encSliceapi_ObjectReference(([]pkg2_api.ObjectReference)(x.Active), e)
						}
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq369[1] {
					if x.LastScheduleTime == nil {
						r.EncodeNil()
					} else {
						yym374 := z.EncBinary()
						_ = yym374
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScheduleTime) {
						} else if yym374 {
							z.EncBinaryMarshal(x.LastScheduleTime)
						} else if !yym374 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScheduleTime)
						} else {
							z.EncFallback(x.LastScheduleTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq369[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastScheduleTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LastScheduleTime == nil {
						r.EncodeNil()
					} else {
						yym375 := z.EncBinary()
						_ = yym375
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LastScheduleTime) {
						} else if yym375 {
							z.EncBinaryMarshal(x.LastScheduleTime)
						} else if !yym375 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.LastScheduleTime)
						} else {
							z.EncFallback(x.LastScheduleTime)
						}
					}
				}
			}
			if yyr369 || yy2arr369 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ScheduledJobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym376 := z.DecBinary()
	_ = yym376
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct377 := r.ContainerType()
		if yyct377 == codecSelferValueTypeMap1234 {
			yyl377 := r.ReadMapStart()
			if yyl377 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl377, d)
			}
		} else if yyct377 == codecSelferValueTypeArray1234 {
			yyl377 := r.ReadArrayStart()
			if yyl377 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl377, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ScheduledJobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys378Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys378Slc
	var yyhl378 bool = l >= 0
	for yyj378 := 0; ; yyj378++ {
		if yyhl378 {
			if yyj378 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys378Slc = r.DecodeBytes(yys378Slc, true, true)
		yys378 := string(yys378Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys378 {
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = nil
			} else {
				yyv379 := &x.Active
				yym380 := z.DecBinary()
				_ = yym380
				if false {
				} else {
					h.decSliceapi_ObjectReference((*[]pkg2_api.ObjectReference)(yyv379), d)
				}
			}
		case "lastScheduleTime":
			if r.TryDecodeAsNil() {
				if x.LastScheduleTime != nil {
					x.LastScheduleTime = nil
				}
			} else {
				if x.LastScheduleTime == nil {
					x.LastScheduleTime = new(pkg1_unversioned.Time)
				}
				yym382 := z.DecBinary()
				_ = yym382
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LastScheduleTime) {
				} else if yym382 {
					z.DecBinaryUnmarshal(x.LastScheduleTime)
				} else if !yym382 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.LastScheduleTime)
				} else {
					z.DecFallback(x.LastScheduleTime, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys378)
		} // end switch yys378
	} // end for yyj378
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ScheduledJobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj383 int
	var yyb383 bool
	var yyhl383 bool = l >= 0
	yyj383++
	if yyhl383 {
		yyb383 = yyj383 > l
	} else {
		yyb383 = r.CheckBreak()
	}
	if yyb383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = nil
	} else {
		yyv384 := &x.Active
		yym385 := z.DecBinary()
		_ = yym385
		if false {
		} else {
			h.decSliceapi_ObjectReference((*[]pkg2_api.ObjectReference)(yyv384), d)
		}
	}
	yyj383++
	if yyhl383 {
		yyb383 = yyj383 > l
	} else {
		yyb383 = r.CheckBreak()
	}
	if yyb383 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LastScheduleTime != nil {
			x.LastScheduleTime = nil
		}
	} else {
		if x.LastScheduleTime == nil {
			x.LastScheduleTime = new(pkg1_unversioned.Time)
		}
		yym387 := z.DecBinary()
		_ = yym387
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LastScheduleTime) {
		} else if yym387 {
			z.DecBinaryUnmarshal(x.LastScheduleTime)
		} else if !yym387 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.LastScheduleTime)
		} else {
			z.DecFallback(x.LastScheduleTime, false)
		}
	}
	for {
		yyj383++
		if yyhl383 {
			yyb383 = yyj383 > l
		} else {
			yyb383 = r.CheckBreak()
		}
		if yyb383 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj383-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv388 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy389 := &yyv388
		yy389.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv390 := *v
	yyh390, yyl390 := z.DecSliceHelperStart()
	var yyc390 bool
	if yyl390 == 0 {
		if yyv390 == nil {
			yyv390 = []Job{}
			yyc390 = true
		} else if len(yyv390) != 0 {
			yyv390 = yyv390[:0]
			yyc390 = true
		}
	} else if yyl390 > 0 {
		var yyrr390, yyrl390 int
		var yyrt390 bool
		if yyl390 > cap(yyv390) {

			yyrg390 := len(yyv390) > 0
			yyv2390 := yyv390
			yyrl390, yyrt390 = z.DecInferLen(yyl390, z.DecBasicHandle().MaxInitLen, 800)
			if yyrt390 {
				if yyrl390 <= cap(yyv390) {
					yyv390 = yyv390[:yyrl390]
				} else {
					yyv390 = make([]Job, yyrl390)
				}
			} else {
				yyv390 = make([]Job, yyrl390)
			}
			yyc390 = true
			yyrr390 = len(yyv390)
			if yyrg390 {
				copy(yyv390, yyv2390)
			}
		} else if yyl390 != len(yyv390) {
			yyv390 = yyv390[:yyl390]
			yyc390 = true
		}
		yyj390 := 0
		for ; yyj390 < yyrr390; yyj390++ {
			yyh390.ElemContainerState(yyj390)
			if r.TryDecodeAsNil() {
				yyv390[yyj390] = Job{}
			} else {
				yyv391 := &yyv390[yyj390]
				yyv391.CodecDecodeSelf(d)
			}

		}
		if yyrt390 {
			for ; yyj390 < yyl390; yyj390++ {
				yyv390 = append(yyv390, Job{})
				yyh390.ElemContainerState(yyj390)
				if r.TryDecodeAsNil() {
					yyv390[yyj390] = Job{}
				} else {
					yyv392 := &yyv390[yyj390]
					yyv392.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj390 := 0
		for ; !r.CheckBreak(); yyj390++ {

			if yyj390 >= len(yyv390) {
				yyv390 = append(yyv390, Job{}) // var yyz390 Job
				yyc390 = true
			}
			yyh390.ElemContainerState(yyj390)
			if yyj390 < len(yyv390) {
				if r.TryDecodeAsNil() {
					yyv390[yyj390] = Job{}
				} else {
					yyv393 := &yyv390[yyj390]
					yyv393.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj390 < len(yyv390) {
			yyv390 = yyv390[:yyj390]
			yyc390 = true
		} else if yyj390 == 0 && yyv390 == nil {
			yyv390 = []Job{}
			yyc390 = true
		}
	}
	yyh390.End()
	if yyc390 {
		*v = yyv390
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv394 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy395 := &yyv394
		yy395.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv396 := *v
	yyh396, yyl396 := z.DecSliceHelperStart()
	var yyc396 bool
	if yyl396 == 0 {
		if yyv396 == nil {
			yyv396 = []JobCondition{}
			yyc396 = true
		} else if len(yyv396) != 0 {
			yyv396 = yyv396[:0]
			yyc396 = true
		}
	} else if yyl396 > 0 {
		var yyrr396, yyrl396 int
		var yyrt396 bool
		if yyl396 > cap(yyv396) {

			yyrg396 := len(yyv396) > 0
			yyv2396 := yyv396
			yyrl396, yyrt396 = z.DecInferLen(yyl396, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt396 {
				if yyrl396 <= cap(yyv396) {
					yyv396 = yyv396[:yyrl396]
				} else {
					yyv396 = make([]JobCondition, yyrl396)
				}
			} else {
				yyv396 = make([]JobCondition, yyrl396)
			}
			yyc396 = true
			yyrr396 = len(yyv396)
			if yyrg396 {
				copy(yyv396, yyv2396)
			}
		} else if yyl396 != len(yyv396) {
			yyv396 = yyv396[:yyl396]
			yyc396 = true
		}
		yyj396 := 0
		for ; yyj396 < yyrr396; yyj396++ {
			yyh396.ElemContainerState(yyj396)
			if r.TryDecodeAsNil() {
				yyv396[yyj396] = JobCondition{}
			} else {
				yyv397 := &yyv396[yyj396]
				yyv397.CodecDecodeSelf(d)
			}

		}
		if yyrt396 {
			for ; yyj396 < yyl396; yyj396++ {
				yyv396 = append(yyv396, JobCondition{})
				yyh396.ElemContainerState(yyj396)
				if r.TryDecodeAsNil() {
					yyv396[yyj396] = JobCondition{}
				} else {
					yyv398 := &yyv396[yyj396]
					yyv398.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj396 := 0
		for ; !r.CheckBreak(); yyj396++ {

			if yyj396 >= len(yyv396) {
				yyv396 = append(yyv396, JobCondition{}) // var yyz396 JobCondition
				yyc396 = true
			}
			yyh396.ElemContainerState(yyj396)
			if yyj396 < len(yyv396) {
				if r.TryDecodeAsNil() {
					yyv396[yyj396] = JobCondition{}
				} else {
					yyv399 := &yyv396[yyj396]
					yyv399.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj396 < len(yyv396) {
			yyv396 = yyv396[:yyj396]
			yyc396 = true
		} else if yyj396 == 0 && yyv396 == nil {
			yyv396 = []JobCondition{}
			yyc396 = true
		}
	}
	yyh396.End()
	if yyc396 {
		*v = yyv396
	}
}

func (x codecSelfer1234) encSliceScheduledJob(v []ScheduledJob, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv400 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy401 := &yyv400
		yy401.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceScheduledJob(v *[]ScheduledJob, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv402 := *v
	yyh402, yyl402 := z.DecSliceHelperStart()
	var yyc402 bool
	if yyl402 == 0 {
		if yyv402 == nil {
			yyv402 = []ScheduledJob{}
			yyc402 = true
		} else if len(yyv402) != 0 {
			yyv402 = yyv402[:0]
			yyc402 = true
		}
	} else if yyl402 > 0 {
		var yyrr402, yyrl402 int
		var yyrt402 bool
		if yyl402 > cap(yyv402) {

			yyrg402 := len(yyv402) > 0
			yyv2402 := yyv402
			yyrl402, yyrt402 = z.DecInferLen(yyl402, z.DecBasicHandle().MaxInitLen, 1048)
			if yyrt402 {
				if yyrl402 <= cap(yyv402) {
					yyv402 = yyv402[:yyrl402]
				} else {
					yyv402 = make([]ScheduledJob, yyrl402)
				}
			} else {
				yyv402 = make([]ScheduledJob, yyrl402)
			}
			yyc402 = true
			yyrr402 = len(yyv402)
			if yyrg402 {
				copy(yyv402, yyv2402)
			}
		} else if yyl402 != len(yyv402) {
			yyv402 = yyv402[:yyl402]
			yyc402 = true
		}
		yyj402 := 0
		for ; yyj402 < yyrr402; yyj402++ {
			yyh402.ElemContainerState(yyj402)
			if r.TryDecodeAsNil() {
				yyv402[yyj402] = ScheduledJob{}
			} else {
				yyv403 := &yyv402[yyj402]
				yyv403.CodecDecodeSelf(d)
			}

		}
		if yyrt402 {
			for ; yyj402 < yyl402; yyj402++ {
				yyv402 = append(yyv402, ScheduledJob{})
				yyh402.ElemContainerState(yyj402)
				if r.TryDecodeAsNil() {
					yyv402[yyj402] = ScheduledJob{}
				} else {
					yyv404 := &yyv402[yyj402]
					yyv404.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj402 := 0
		for ; !r.CheckBreak(); yyj402++ {

			if yyj402 >= len(yyv402) {
				yyv402 = append(yyv402, ScheduledJob{}) // var yyz402 ScheduledJob
				yyc402 = true
			}
			yyh402.ElemContainerState(yyj402)
			if yyj402 < len(yyv402) {
				if r.TryDecodeAsNil() {
					yyv402[yyj402] = ScheduledJob{}
				} else {
					yyv405 := &yyv402[yyj402]
					yyv405.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj402 < len(yyv402) {
			yyv402 = yyv402[:yyj402]
			yyc402 = true
		} else if yyj402 == 0 && yyv402 == nil {
			yyv402 = []ScheduledJob{}
			yyc402 = true
		}
	}
	yyh402.End()
	if yyc402 {
		*v = yyv402
	}
}

func (x codecSelfer1234) encSliceapi_ObjectReference(v []pkg2_api.ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv406 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy407 := &yyv406
		yym408 := z.EncBinary()
		_ = yym408
		if false {
		} else if z.HasExtensions() && z.EncExt(yy407) {
		} else {
			z.EncFallback(yy407)
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceapi_ObjectReference(v *[]pkg2_api.ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv409 := *v
	yyh409, yyl409 := z.DecSliceHelperStart()
	var yyc409 bool
	if yyl409 == 0 {
		if yyv409 == nil {
			yyv409 = []pkg2_api.ObjectReference{}
			yyc409 = true
		} else if len(yyv409) != 0 {
			yyv409 = yyv409[:0]
			yyc409 = true
		}
	} else if yyl409 > 0 {
		var yyrr409, yyrl409 int
		var yyrt409 bool
		if yyl409 > cap(yyv409) {

			yyrg409 := len(yyv409) > 0
			yyv2409 := yyv409
			yyrl409, yyrt409 = z.DecInferLen(yyl409, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt409 {
				if yyrl409 <= cap(yyv409) {
					yyv409 = yyv409[:yyrl409]
				} else {
					yyv409 = make([]pkg2_api.ObjectReference, yyrl409)
				}
			} else {
				yyv409 = make([]pkg2_api.ObjectReference, yyrl409)
			}
			yyc409 = true
			yyrr409 = len(yyv409)
			if yyrg409 {
				copy(yyv409, yyv2409)
			}
		} else if yyl409 != len(yyv409) {
			yyv409 = yyv409[:yyl409]
			yyc409 = true
		}
		yyj409 := 0
		for ; yyj409 < yyrr409; yyj409++ {
			yyh409.ElemContainerState(yyj409)
			if r.TryDecodeAsNil() {
				yyv409[yyj409] = pkg2_api.ObjectReference{}
			} else {
				yyv410 := &yyv409[yyj409]
				yym411 := z.DecBinary()
				_ = yym411
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv410) {
				} else {
					z.DecFallback(yyv410, false)
				}
			}

		}
		if yyrt409 {
			for ; yyj409 < yyl409; yyj409++ {
				yyv409 = append(yyv409, pkg2_api.ObjectReference{})
				yyh409.ElemContainerState(yyj409)
				if r.TryDecodeAsNil() {
					yyv409[yyj409] = pkg2_api.ObjectReference{}
				} else {
					yyv412 := &yyv409[yyj409]
					yym413 := z.DecBinary()
					_ = yym413
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv412) {
					} else {
						z.DecFallback(yyv412, false)
					}
				}

			}
		}

	} else {
		yyj409 := 0
		for ; !r.CheckBreak(); yyj409++ {

			if yyj409 >= len(yyv409) {
				yyv409 = append(yyv409, pkg2_api.ObjectReference{}) // var yyz409 pkg2_api.ObjectReference
				yyc409 = true
			}
			yyh409.ElemContainerState(yyj409)
			if yyj409 < len(yyv409) {
				if r.TryDecodeAsNil() {
					yyv409[yyj409] = pkg2_api.ObjectReference{}
				} else {
					yyv414 := &yyv409[yyj409]
					yym415 := z.DecBinary()
					_ = yym415
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv414) {
					} else {
						z.DecFallback(yyv414, false)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj409 < len(yyv409) {
			yyv409 = yyv409[:yyj409]
			yyc409 = true
		} else if yyj409 == 0 && yyv409 == nil {
			yyv409 = []pkg2_api.ObjectReference{}
			yyc409 = true
		}
	}
	yyh409.End()
	if yyc409 {
		*v = yyv409
	}
}
