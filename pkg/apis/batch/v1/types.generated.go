/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg4_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg1_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg2_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	pkg5_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg4_resource.Quantity
		var v1 pkg1_unversioned.TypeMeta
		var v2 pkg2_v1.ObjectMeta
		var v3 pkg3_types.UID
		var v4 pkg5_intstr.IntOrString
		var v5 time.Time
		_, _, _, _, _, _ = v0, v1, v2, v3, v4, v5
	}
}

func (x *Job) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [5]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Kind != ""
			yyq2[1] = x.APIVersion != ""
			yyq2[2] = true
			yyq2[3] = true
			yyq2[4] = true
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(5)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yy10 := &x.ObjectMeta
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else if z.HasExtensions() && z.EncExt(yy10) {
					} else {
						z.EncFallback(yy10)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy12 := &x.ObjectMeta
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else if z.HasExtensions() && z.EncExt(yy12) {
					} else {
						z.EncFallback(yy12)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yy15 := &x.Spec
					yy15.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy16 := &x.Spec
					yy16.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yy18 := &x.Status
					yy18.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy19 := &x.Status
					yy19.CodecEncodeSelf(e)
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Job) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym20 := z.DecBinary()
	_ = yym20
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct21 := r.ContainerType()
		if yyct21 == codecSelferValueTypeMap1234 {
			yyl21 := r.ReadMapStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl21, d)
			}
		} else if yyct21 == codecSelferValueTypeArray1234 {
			yyl21 := r.ReadArrayStart()
			if yyl21 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl21, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Job) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys22Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys22Slc
	var yyhl22 bool = l >= 0
	for yyj22 := 0; ; yyj22++ {
		if yyhl22 {
			if yyj22 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys22Slc = r.DecodeBytes(yys22Slc, true, true)
		yys22 := string(yys22Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys22 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg2_v1.ObjectMeta{}
			} else {
				yyv25 := &x.ObjectMeta
				yym26 := z.DecBinary()
				_ = yym26
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv25) {
				} else {
					z.DecFallback(yyv25, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = JobSpec{}
			} else {
				yyv27 := &x.Spec
				yyv27.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = JobStatus{}
			} else {
				yyv28 := &x.Status
				yyv28.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys22)
		} // end switch yys22
	} // end for yyj22
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Job) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj29 int
	var yyb29 bool
	var yyhl29 bool = l >= 0
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg2_v1.ObjectMeta{}
	} else {
		yyv32 := &x.ObjectMeta
		yym33 := z.DecBinary()
		_ = yym33
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv32) {
		} else {
			z.DecFallback(yyv32, false)
		}
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = JobSpec{}
	} else {
		yyv34 := &x.Spec
		yyv34.CodecDecodeSelf(d)
	}
	yyj29++
	if yyhl29 {
		yyb29 = yyj29 > l
	} else {
		yyb29 = r.CheckBreak()
	}
	if yyb29 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = JobStatus{}
	} else {
		yyv35 := &x.Status
		yyv35.CodecDecodeSelf(d)
	}
	for {
		yyj29++
		if yyhl29 {
			yyb29 = yyj29 > l
		} else {
			yyb29 = r.CheckBreak()
		}
		if yyb29 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj29-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym36 := z.EncBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep37 := !z.EncBinary()
			yy2arr37 := z.EncBasicHandle().StructToArray
			var yyq37 [4]bool
			_, _, _ = yysep37, yyq37, yy2arr37
			const yyr37 bool = false
			yyq37[0] = x.Kind != ""
			yyq37[1] = x.APIVersion != ""
			yyq37[2] = true
			var yynn37 int
			if yyr37 || yy2arr37 {
				r.EncodeArrayStart(4)
			} else {
				yynn37 = 1
				for _, b := range yyq37 {
					if b {
						yynn37++
					}
				}
				r.EncodeMapStart(yynn37)
				yynn37 = 0
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[0] {
					yym39 := z.EncBinary()
					_ = yym39
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq37[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym40 := z.EncBinary()
					_ = yym40
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[1] {
					yym42 := z.EncBinary()
					_ = yym42
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq37[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym43 := z.EncBinary()
					_ = yym43
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq37[2] {
					yy45 := &x.ListMeta
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else if z.HasExtensions() && z.EncExt(yy45) {
					} else {
						z.EncFallback(yy45)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq37[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy47 := &x.ListMeta
					yym48 := z.EncBinary()
					_ = yym48
					if false {
					} else if z.HasExtensions() && z.EncExt(yy47) {
					} else {
						z.EncFallback(yy47)
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym50 := z.EncBinary()
					_ = yym50
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym51 := z.EncBinary()
					_ = yym51
					if false {
					} else {
						h.encSliceJob(([]Job)(x.Items), e)
					}
				}
			}
			if yyr37 || yy2arr37 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym52 := z.DecBinary()
	_ = yym52
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct53 := r.ContainerType()
		if yyct53 == codecSelferValueTypeMap1234 {
			yyl53 := r.ReadMapStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl53, d)
			}
		} else if yyct53 == codecSelferValueTypeArray1234 {
			yyl53 := r.ReadArrayStart()
			if yyl53 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl53, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys54Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys54Slc
	var yyhl54 bool = l >= 0
	for yyj54 := 0; ; yyj54++ {
		if yyhl54 {
			if yyj54 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys54Slc = r.DecodeBytes(yys54Slc, true, true)
		yys54 := string(yys54Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys54 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg1_unversioned.ListMeta{}
			} else {
				yyv57 := &x.ListMeta
				yym58 := z.DecBinary()
				_ = yym58
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv57) {
				} else {
					z.DecFallback(yyv57, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv59 := &x.Items
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else {
					h.decSliceJob((*[]Job)(yyv59), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys54)
		} // end switch yys54
	} // end for yyj54
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj61 int
	var yyb61 bool
	var yyhl61 bool = l >= 0
	yyj61++
	if yyhl61 {
		yyb61 = yyj61 > l
	} else {
		yyb61 = r.CheckBreak()
	}
	if yyb61 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj61++
	if yyhl61 {
		yyb61 = yyj61 > l
	} else {
		yyb61 = r.CheckBreak()
	}
	if yyb61 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj61++
	if yyhl61 {
		yyb61 = yyj61 > l
	} else {
		yyb61 = r.CheckBreak()
	}
	if yyb61 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg1_unversioned.ListMeta{}
	} else {
		yyv64 := &x.ListMeta
		yym65 := z.DecBinary()
		_ = yym65
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv64) {
		} else {
			z.DecFallback(yyv64, false)
		}
	}
	yyj61++
	if yyhl61 {
		yyb61 = yyj61 > l
	} else {
		yyb61 = r.CheckBreak()
	}
	if yyb61 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv66 := &x.Items
		yym67 := z.DecBinary()
		_ = yym67
		if false {
		} else {
			h.decSliceJob((*[]Job)(yyv66), d)
		}
	}
	for {
		yyj61++
		if yyhl61 {
			yyb61 = yyj61 > l
		} else {
			yyb61 = r.CheckBreak()
		}
		if yyb61 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj61-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym68 := z.EncBinary()
		_ = yym68
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep69 := !z.EncBinary()
			yy2arr69 := z.EncBasicHandle().StructToArray
			var yyq69 [6]bool
			_, _, _ = yysep69, yyq69, yy2arr69
			const yyr69 bool = false
			yyq69[0] = x.Parallelism != nil
			yyq69[1] = x.Completions != nil
			yyq69[2] = x.ActiveDeadlineSeconds != nil
			yyq69[3] = x.Selector != nil
			yyq69[4] = x.ManualSelector != nil
			var yynn69 int
			if yyr69 || yy2arr69 {
				r.EncodeArrayStart(6)
			} else {
				yynn69 = 1
				for _, b := range yyq69 {
					if b {
						yynn69++
					}
				}
				r.EncodeMapStart(yynn69)
				yynn69 = 0
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[0] {
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy71 := *x.Parallelism
						yym72 := z.EncBinary()
						_ = yym72
						if false {
						} else {
							r.EncodeInt(int64(yy71))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq69[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("parallelism"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Parallelism == nil {
						r.EncodeNil()
					} else {
						yy73 := *x.Parallelism
						yym74 := z.EncBinary()
						_ = yym74
						if false {
						} else {
							r.EncodeInt(int64(yy73))
						}
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[1] {
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy76 := *x.Completions
						yym77 := z.EncBinary()
						_ = yym77
						if false {
						} else {
							r.EncodeInt(int64(yy76))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq69[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Completions == nil {
						r.EncodeNil()
					} else {
						yy78 := *x.Completions
						yym79 := z.EncBinary()
						_ = yym79
						if false {
						} else {
							r.EncodeInt(int64(yy78))
						}
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[2] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy81 := *x.ActiveDeadlineSeconds
						yym82 := z.EncBinary()
						_ = yym82
						if false {
						} else {
							r.EncodeInt(int64(yy81))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq69[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy83 := *x.ActiveDeadlineSeconds
						yym84 := z.EncBinary()
						_ = yym84
						if false {
						} else {
							r.EncodeInt(int64(yy83))
						}
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[3] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq69[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						x.Selector.CodecEncodeSelf(e)
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq69[4] {
					if x.ManualSelector == nil {
						r.EncodeNil()
					} else {
						yy87 := *x.ManualSelector
						yym88 := z.EncBinary()
						_ = yym88
						if false {
						} else {
							r.EncodeBool(bool(yy87))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq69[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("manualSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ManualSelector == nil {
						r.EncodeNil()
					} else {
						yy89 := *x.ManualSelector
						yym90 := z.EncBinary()
						_ = yym90
						if false {
						} else {
							r.EncodeBool(bool(yy89))
						}
					}
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy92 := &x.Template
				yym93 := z.EncBinary()
				_ = yym93
				if false {
				} else if z.HasExtensions() && z.EncExt(yy92) {
				} else {
					z.EncFallback(yy92)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("template"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy94 := &x.Template
				yym95 := z.EncBinary()
				_ = yym95
				if false {
				} else if z.HasExtensions() && z.EncExt(yy94) {
				} else {
					z.EncFallback(yy94)
				}
			}
			if yyr69 || yy2arr69 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym96 := z.DecBinary()
	_ = yym96
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct97 := r.ContainerType()
		if yyct97 == codecSelferValueTypeMap1234 {
			yyl97 := r.ReadMapStart()
			if yyl97 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl97, d)
			}
		} else if yyct97 == codecSelferValueTypeArray1234 {
			yyl97 := r.ReadArrayStart()
			if yyl97 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl97, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys98Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys98Slc
	var yyhl98 bool = l >= 0
	for yyj98 := 0; ; yyj98++ {
		if yyhl98 {
			if yyj98 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys98Slc = r.DecodeBytes(yys98Slc, true, true)
		yys98 := string(yys98Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys98 {
		case "parallelism":
			if r.TryDecodeAsNil() {
				if x.Parallelism != nil {
					x.Parallelism = nil
				}
			} else {
				if x.Parallelism == nil {
					x.Parallelism = new(int32)
				}
				yym100 := z.DecBinary()
				_ = yym100
				if false {
				} else {
					*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
				}
			}
		case "completions":
			if r.TryDecodeAsNil() {
				if x.Completions != nil {
					x.Completions = nil
				}
			} else {
				if x.Completions == nil {
					x.Completions = new(int32)
				}
				yym102 := z.DecBinary()
				_ = yym102
				if false {
				} else {
					*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym104 := z.DecBinary()
				_ = yym104
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(LabelSelector)
				}
				x.Selector.CodecDecodeSelf(d)
			}
		case "manualSelector":
			if r.TryDecodeAsNil() {
				if x.ManualSelector != nil {
					x.ManualSelector = nil
				}
			} else {
				if x.ManualSelector == nil {
					x.ManualSelector = new(bool)
				}
				yym107 := z.DecBinary()
				_ = yym107
				if false {
				} else {
					*((*bool)(x.ManualSelector)) = r.DecodeBool()
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = pkg2_v1.PodTemplateSpec{}
			} else {
				yyv108 := &x.Template
				yym109 := z.DecBinary()
				_ = yym109
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv108) {
				} else {
					z.DecFallback(yyv108, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys98)
		} // end switch yys98
	} // end for yyj98
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj110 int
	var yyb110 bool
	var yyhl110 bool = l >= 0
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Parallelism != nil {
			x.Parallelism = nil
		}
	} else {
		if x.Parallelism == nil {
			x.Parallelism = new(int32)
		}
		yym112 := z.DecBinary()
		_ = yym112
		if false {
		} else {
			*((*int32)(x.Parallelism)) = int32(r.DecodeInt(32))
		}
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Completions != nil {
			x.Completions = nil
		}
	} else {
		if x.Completions == nil {
			x.Completions = new(int32)
		}
		yym114 := z.DecBinary()
		_ = yym114
		if false {
		} else {
			*((*int32)(x.Completions)) = int32(r.DecodeInt(32))
		}
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym116 := z.DecBinary()
		_ = yym116
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(LabelSelector)
		}
		x.Selector.CodecDecodeSelf(d)
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ManualSelector != nil {
			x.ManualSelector = nil
		}
	} else {
		if x.ManualSelector == nil {
			x.ManualSelector = new(bool)
		}
		yym119 := z.DecBinary()
		_ = yym119
		if false {
		} else {
			*((*bool)(x.ManualSelector)) = r.DecodeBool()
		}
	}
	yyj110++
	if yyhl110 {
		yyb110 = yyj110 > l
	} else {
		yyb110 = r.CheckBreak()
	}
	if yyb110 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = pkg2_v1.PodTemplateSpec{}
	} else {
		yyv120 := &x.Template
		yym121 := z.DecBinary()
		_ = yym121
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv120) {
		} else {
			z.DecFallback(yyv120, false)
		}
	}
	for {
		yyj110++
		if yyhl110 {
			yyb110 = yyj110 > l
		} else {
			yyb110 = r.CheckBreak()
		}
		if yyb110 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj110-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *JobStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym122 := z.EncBinary()
		_ = yym122
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep123 := !z.EncBinary()
			yy2arr123 := z.EncBasicHandle().StructToArray
			var yyq123 [6]bool
			_, _, _ = yysep123, yyq123, yy2arr123
			const yyr123 bool = false
			yyq123[0] = len(x.Conditions) != 0
			yyq123[1] = x.StartTime != nil
			yyq123[2] = x.CompletionTime != nil
			yyq123[3] = x.Active != 0
			yyq123[4] = x.Succeeded != 0
			yyq123[5] = x.Failed != 0
			var yynn123 int
			if yyr123 || yy2arr123 {
				r.EncodeArrayStart(6)
			} else {
				yynn123 = 0
				for _, b := range yyq123 {
					if b {
						yynn123++
					}
				}
				r.EncodeMapStart(yynn123)
				yynn123 = 0
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym125 := z.EncBinary()
						_ = yym125
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq123[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym126 := z.EncBinary()
						_ = yym126
						if false {
						} else {
							h.encSliceJobCondition(([]JobCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[1] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym128 := z.EncBinary()
						_ = yym128
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym128 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym128 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq123[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym129 := z.EncBinary()
						_ = yym129
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym129 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym129 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[2] {
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym131 := z.EncBinary()
						_ = yym131
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym131 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym131 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq123[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("completionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CompletionTime == nil {
						r.EncodeNil()
					} else {
						yym132 := z.EncBinary()
						_ = yym132
						if false {
						} else if z.HasExtensions() && z.EncExt(x.CompletionTime) {
						} else if yym132 {
							z.EncBinaryMarshal(x.CompletionTime)
						} else if !yym132 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.CompletionTime)
						} else {
							z.EncFallback(x.CompletionTime)
						}
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[3] {
					yym134 := z.EncBinary()
					_ = yym134
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq123[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("active"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym135 := z.EncBinary()
					_ = yym135
					if false {
					} else {
						r.EncodeInt(int64(x.Active))
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[4] {
					yym137 := z.EncBinary()
					_ = yym137
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq123[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("succeeded"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym138 := z.EncBinary()
					_ = yym138
					if false {
					} else {
						r.EncodeInt(int64(x.Succeeded))
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq123[5] {
					yym140 := z.EncBinary()
					_ = yym140
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq123[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failed"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym141 := z.EncBinary()
					_ = yym141
					if false {
					} else {
						r.EncodeInt(int64(x.Failed))
					}
				}
			}
			if yyr123 || yy2arr123 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym142 := z.DecBinary()
	_ = yym142
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct143 := r.ContainerType()
		if yyct143 == codecSelferValueTypeMap1234 {
			yyl143 := r.ReadMapStart()
			if yyl143 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl143, d)
			}
		} else if yyct143 == codecSelferValueTypeArray1234 {
			yyl143 := r.ReadArrayStart()
			if yyl143 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl143, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys144Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys144Slc
	var yyhl144 bool = l >= 0
	for yyj144 := 0; ; yyj144++ {
		if yyhl144 {
			if yyj144 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys144Slc = r.DecodeBytes(yys144Slc, true, true)
		yys144 := string(yys144Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys144 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv145 := &x.Conditions
				yym146 := z.DecBinary()
				_ = yym146
				if false {
				} else {
					h.decSliceJobCondition((*[]JobCondition)(yyv145), d)
				}
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg1_unversioned.Time)
				}
				yym148 := z.DecBinary()
				_ = yym148
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym148 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym148 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "completionTime":
			if r.TryDecodeAsNil() {
				if x.CompletionTime != nil {
					x.CompletionTime = nil
				}
			} else {
				if x.CompletionTime == nil {
					x.CompletionTime = new(pkg1_unversioned.Time)
				}
				yym150 := z.DecBinary()
				_ = yym150
				if false {
				} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
				} else if yym150 {
					z.DecBinaryUnmarshal(x.CompletionTime)
				} else if !yym150 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.CompletionTime)
				} else {
					z.DecFallback(x.CompletionTime, false)
				}
			}
		case "active":
			if r.TryDecodeAsNil() {
				x.Active = 0
			} else {
				x.Active = int32(r.DecodeInt(32))
			}
		case "succeeded":
			if r.TryDecodeAsNil() {
				x.Succeeded = 0
			} else {
				x.Succeeded = int32(r.DecodeInt(32))
			}
		case "failed":
			if r.TryDecodeAsNil() {
				x.Failed = 0
			} else {
				x.Failed = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys144)
		} // end switch yys144
	} // end for yyj144
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj154 int
	var yyb154 bool
	var yyhl154 bool = l >= 0
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv155 := &x.Conditions
		yym156 := z.DecBinary()
		_ = yym156
		if false {
		} else {
			h.decSliceJobCondition((*[]JobCondition)(yyv155), d)
		}
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg1_unversioned.Time)
		}
		yym158 := z.DecBinary()
		_ = yym158
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym158 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym158 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CompletionTime != nil {
			x.CompletionTime = nil
		}
	} else {
		if x.CompletionTime == nil {
			x.CompletionTime = new(pkg1_unversioned.Time)
		}
		yym160 := z.DecBinary()
		_ = yym160
		if false {
		} else if z.HasExtensions() && z.DecExt(x.CompletionTime) {
		} else if yym160 {
			z.DecBinaryUnmarshal(x.CompletionTime)
		} else if !yym160 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.CompletionTime)
		} else {
			z.DecFallback(x.CompletionTime, false)
		}
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Active = 0
	} else {
		x.Active = int32(r.DecodeInt(32))
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Succeeded = 0
	} else {
		x.Succeeded = int32(r.DecodeInt(32))
	}
	yyj154++
	if yyhl154 {
		yyb154 = yyj154 > l
	} else {
		yyb154 = r.CheckBreak()
	}
	if yyb154 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Failed = 0
	} else {
		x.Failed = int32(r.DecodeInt(32))
	}
	for {
		yyj154++
		if yyhl154 {
			yyb154 = yyj154 > l
		} else {
			yyb154 = r.CheckBreak()
		}
		if yyb154 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj154-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x JobConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym164 := z.EncBinary()
	_ = yym164
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *JobConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym165 := z.DecBinary()
	_ = yym165
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *JobCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym166 := z.EncBinary()
		_ = yym166
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep167 := !z.EncBinary()
			yy2arr167 := z.EncBasicHandle().StructToArray
			var yyq167 [6]bool
			_, _, _ = yysep167, yyq167, yy2arr167
			const yyr167 bool = false
			yyq167[2] = true
			yyq167[3] = true
			yyq167[4] = x.Reason != ""
			yyq167[5] = x.Message != ""
			var yynn167 int
			if yyr167 || yy2arr167 {
				r.EncodeArrayStart(6)
			} else {
				yynn167 = 2
				for _, b := range yyq167 {
					if b {
						yynn167++
					}
				}
				r.EncodeMapStart(yynn167)
				yynn167 = 0
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym170 := z.EncBinary()
				_ = yym170
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym171 := z.EncBinary()
				_ = yym171
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[2] {
					yy173 := &x.LastProbeTime
					yym174 := z.EncBinary()
					_ = yym174
					if false {
					} else if z.HasExtensions() && z.EncExt(yy173) {
					} else if yym174 {
						z.EncBinaryMarshal(yy173)
					} else if !yym174 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy173)
					} else {
						z.EncFallback(yy173)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy175 := &x.LastProbeTime
					yym176 := z.EncBinary()
					_ = yym176
					if false {
					} else if z.HasExtensions() && z.EncExt(yy175) {
					} else if yym176 {
						z.EncBinaryMarshal(yy175)
					} else if !yym176 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy175)
					} else {
						z.EncFallback(yy175)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[3] {
					yy178 := &x.LastTransitionTime
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else if z.HasExtensions() && z.EncExt(yy178) {
					} else if yym179 {
						z.EncBinaryMarshal(yy178)
					} else if !yym179 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy178)
					} else {
						z.EncFallback(yy178)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq167[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy180 := &x.LastTransitionTime
					yym181 := z.EncBinary()
					_ = yym181
					if false {
					} else if z.HasExtensions() && z.EncExt(yy180) {
					} else if yym181 {
						z.EncBinaryMarshal(yy180)
					} else if !yym181 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy180)
					} else {
						z.EncFallback(yy180)
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[4] {
					yym183 := z.EncBinary()
					_ = yym183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq167[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym184 := z.EncBinary()
					_ = yym184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq167[5] {
					yym186 := z.EncBinary()
					_ = yym186
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq167[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym187 := z.EncBinary()
					_ = yym187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr167 || yy2arr167 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *JobCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym188 := z.DecBinary()
	_ = yym188
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct189 := r.ContainerType()
		if yyct189 == codecSelferValueTypeMap1234 {
			yyl189 := r.ReadMapStart()
			if yyl189 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl189, d)
			}
		} else if yyct189 == codecSelferValueTypeArray1234 {
			yyl189 := r.ReadArrayStart()
			if yyl189 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl189, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *JobCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys190Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys190Slc
	var yyhl190 bool = l >= 0
	for yyj190 := 0; ; yyj190++ {
		if yyhl190 {
			if yyj190 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys190Slc = r.DecodeBytes(yys190Slc, true, true)
		yys190 := string(yys190Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys190 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = JobConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg1_unversioned.Time{}
			} else {
				yyv193 := &x.LastProbeTime
				yym194 := z.DecBinary()
				_ = yym194
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv193) {
				} else if yym194 {
					z.DecBinaryUnmarshal(yyv193)
				} else if !yym194 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv193)
				} else {
					z.DecFallback(yyv193, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg1_unversioned.Time{}
			} else {
				yyv195 := &x.LastTransitionTime
				yym196 := z.DecBinary()
				_ = yym196
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv195) {
				} else if yym196 {
					z.DecBinaryUnmarshal(yyv195)
				} else if !yym196 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv195)
				} else {
					z.DecFallback(yyv195, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys190)
		} // end switch yys190
	} // end for yyj190
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *JobCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj199 int
	var yyb199 bool
	var yyhl199 bool = l >= 0
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = JobConditionType(r.DecodeString())
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg2_v1.ConditionStatus(r.DecodeString())
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg1_unversioned.Time{}
	} else {
		yyv202 := &x.LastProbeTime
		yym203 := z.DecBinary()
		_ = yym203
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv202) {
		} else if yym203 {
			z.DecBinaryUnmarshal(yyv202)
		} else if !yym203 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv202)
		} else {
			z.DecFallback(yyv202, false)
		}
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg1_unversioned.Time{}
	} else {
		yyv204 := &x.LastTransitionTime
		yym205 := z.DecBinary()
		_ = yym205
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv204) {
		} else if yym205 {
			z.DecBinaryUnmarshal(yyv204)
		} else if !yym205 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv204)
		} else {
			z.DecFallback(yyv204, false)
		}
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj199++
	if yyhl199 {
		yyb199 = yyj199 > l
	} else {
		yyb199 = r.CheckBreak()
	}
	if yyb199 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj199++
		if yyhl199 {
			yyb199 = yyj199 > l
		} else {
			yyb199 = r.CheckBreak()
		}
		if yyb199 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj199-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym208 := z.EncBinary()
		_ = yym208
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep209 := !z.EncBinary()
			yy2arr209 := z.EncBasicHandle().StructToArray
			var yyq209 [2]bool
			_, _, _ = yysep209, yyq209, yy2arr209
			const yyr209 bool = false
			yyq209[0] = len(x.MatchLabels) != 0
			yyq209[1] = len(x.MatchExpressions) != 0
			var yynn209 int
			if yyr209 || yy2arr209 {
				r.EncodeArrayStart(2)
			} else {
				yynn209 = 0
				for _, b := range yyq209 {
					if b {
						yynn209++
					}
				}
				r.EncodeMapStart(yynn209)
				yynn209 = 0
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq209[0] {
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym211 := z.EncBinary()
						_ = yym211
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq209[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchLabels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchLabels == nil {
						r.EncodeNil()
					} else {
						yym212 := z.EncBinary()
						_ = yym212
						if false {
						} else {
							z.F.EncMapStringStringV(x.MatchLabels, false, e)
						}
					}
				}
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq209[1] {
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym214 := z.EncBinary()
						_ = yym214
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq209[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MatchExpressions == nil {
						r.EncodeNil()
					} else {
						yym215 := z.EncBinary()
						_ = yym215
						if false {
						} else {
							h.encSliceLabelSelectorRequirement(([]LabelSelectorRequirement)(x.MatchExpressions), e)
						}
					}
				}
			}
			if yyr209 || yy2arr209 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym216 := z.DecBinary()
	_ = yym216
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct217 := r.ContainerType()
		if yyct217 == codecSelferValueTypeMap1234 {
			yyl217 := r.ReadMapStart()
			if yyl217 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl217, d)
			}
		} else if yyct217 == codecSelferValueTypeArray1234 {
			yyl217 := r.ReadArrayStart()
			if yyl217 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl217, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys218Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys218Slc
	var yyhl218 bool = l >= 0
	for yyj218 := 0; ; yyj218++ {
		if yyhl218 {
			if yyj218 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys218Slc = r.DecodeBytes(yys218Slc, true, true)
		yys218 := string(yys218Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys218 {
		case "matchLabels":
			if r.TryDecodeAsNil() {
				x.MatchLabels = nil
			} else {
				yyv219 := &x.MatchLabels
				yym220 := z.DecBinary()
				_ = yym220
				if false {
				} else {
					z.F.DecMapStringStringX(yyv219, false, d)
				}
			}
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv221 := &x.MatchExpressions
				yym222 := z.DecBinary()
				_ = yym222
				if false {
				} else {
					h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv221), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys218)
		} // end switch yys218
	} // end for yyj218
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj223 int
	var yyb223 bool
	var yyhl223 bool = l >= 0
	yyj223++
	if yyhl223 {
		yyb223 = yyj223 > l
	} else {
		yyb223 = r.CheckBreak()
	}
	if yyb223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchLabels = nil
	} else {
		yyv224 := &x.MatchLabels
		yym225 := z.DecBinary()
		_ = yym225
		if false {
		} else {
			z.F.DecMapStringStringX(yyv224, false, d)
		}
	}
	yyj223++
	if yyhl223 {
		yyb223 = yyj223 > l
	} else {
		yyb223 = r.CheckBreak()
	}
	if yyb223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv226 := &x.MatchExpressions
		yym227 := z.DecBinary()
		_ = yym227
		if false {
		} else {
			h.decSliceLabelSelectorRequirement((*[]LabelSelectorRequirement)(yyv226), d)
		}
	}
	for {
		yyj223++
		if yyhl223 {
			yyb223 = yyj223 > l
		} else {
			yyb223 = r.CheckBreak()
		}
		if yyb223 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj223-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LabelSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym228 := z.EncBinary()
		_ = yym228
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep229 := !z.EncBinary()
			yy2arr229 := z.EncBasicHandle().StructToArray
			var yyq229 [3]bool
			_, _, _ = yysep229, yyq229, yy2arr229
			const yyr229 bool = false
			yyq229[2] = len(x.Values) != 0
			var yynn229 int
			if yyr229 || yy2arr229 {
				r.EncodeArrayStart(3)
			} else {
				yynn229 = 2
				for _, b := range yyq229 {
					if b {
						yynn229++
					}
				}
				r.EncodeMapStart(yynn229)
				yynn229 = 0
			}
			if yyr229 || yy2arr229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym231 := z.EncBinary()
				_ = yym231
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym232 := z.EncBinary()
				_ = yym232
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr229 || yy2arr229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr229 || yy2arr229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq229[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym235 := z.EncBinary()
						_ = yym235
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq229[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym236 := z.EncBinary()
						_ = yym236
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr229 || yy2arr229 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LabelSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym237 := z.DecBinary()
	_ = yym237
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct238 := r.ContainerType()
		if yyct238 == codecSelferValueTypeMap1234 {
			yyl238 := r.ReadMapStart()
			if yyl238 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl238, d)
			}
		} else if yyct238 == codecSelferValueTypeArray1234 {
			yyl238 := r.ReadArrayStart()
			if yyl238 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl238, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys239Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys239Slc
	var yyhl239 bool = l >= 0
	for yyj239 := 0; ; yyj239++ {
		if yyhl239 {
			if yyj239 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys239Slc = r.DecodeBytes(yys239Slc, true, true)
		yys239 := string(yys239Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys239 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = LabelSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv242 := &x.Values
				yym243 := z.DecBinary()
				_ = yym243
				if false {
				} else {
					z.F.DecSliceStringX(yyv242, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys239)
		} // end switch yys239
	} // end for yyj239
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LabelSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj244 int
	var yyb244 bool
	var yyhl244 bool = l >= 0
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = LabelSelectorOperator(r.DecodeString())
	}
	yyj244++
	if yyhl244 {
		yyb244 = yyj244 > l
	} else {
		yyb244 = r.CheckBreak()
	}
	if yyb244 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv247 := &x.Values
		yym248 := z.DecBinary()
		_ = yym248
		if false {
		} else {
			z.F.DecSliceStringX(yyv247, false, d)
		}
	}
	for {
		yyj244++
		if yyhl244 {
			yyb244 = yyj244 > l
		} else {
			yyb244 = r.CheckBreak()
		}
		if yyb244 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj244-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LabelSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym249 := z.EncBinary()
	_ = yym249
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LabelSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym250 := z.DecBinary()
	_ = yym250
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x codecSelfer1234) encSliceJob(v []Job, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv251 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy252 := &yyv251
		yy252.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJob(v *[]Job, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv253 := *v
	yyh253, yyl253 := z.DecSliceHelperStart()
	var yyc253 bool
	if yyl253 == 0 {
		if yyv253 == nil {
			yyv253 = []Job{}
			yyc253 = true
		} else if len(yyv253) != 0 {
			yyv253 = yyv253[:0]
			yyc253 = true
		}
	} else if yyl253 > 0 {
		var yyrr253, yyrl253 int
		var yyrt253 bool
		if yyl253 > cap(yyv253) {

			yyrg253 := len(yyv253) > 0
			yyv2253 := yyv253
			yyrl253, yyrt253 = z.DecInferLen(yyl253, z.DecBasicHandle().MaxInitLen, 824)
			if yyrt253 {
				if yyrl253 <= cap(yyv253) {
					yyv253 = yyv253[:yyrl253]
				} else {
					yyv253 = make([]Job, yyrl253)
				}
			} else {
				yyv253 = make([]Job, yyrl253)
			}
			yyc253 = true
			yyrr253 = len(yyv253)
			if yyrg253 {
				copy(yyv253, yyv2253)
			}
		} else if yyl253 != len(yyv253) {
			yyv253 = yyv253[:yyl253]
			yyc253 = true
		}
		yyj253 := 0
		for ; yyj253 < yyrr253; yyj253++ {
			yyh253.ElemContainerState(yyj253)
			if r.TryDecodeAsNil() {
				yyv253[yyj253] = Job{}
			} else {
				yyv254 := &yyv253[yyj253]
				yyv254.CodecDecodeSelf(d)
			}

		}
		if yyrt253 {
			for ; yyj253 < yyl253; yyj253++ {
				yyv253 = append(yyv253, Job{})
				yyh253.ElemContainerState(yyj253)
				if r.TryDecodeAsNil() {
					yyv253[yyj253] = Job{}
				} else {
					yyv255 := &yyv253[yyj253]
					yyv255.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj253 := 0
		for ; !r.CheckBreak(); yyj253++ {

			if yyj253 >= len(yyv253) {
				yyv253 = append(yyv253, Job{}) // var yyz253 Job
				yyc253 = true
			}
			yyh253.ElemContainerState(yyj253)
			if yyj253 < len(yyv253) {
				if r.TryDecodeAsNil() {
					yyv253[yyj253] = Job{}
				} else {
					yyv256 := &yyv253[yyj253]
					yyv256.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj253 < len(yyv253) {
			yyv253 = yyv253[:yyj253]
			yyc253 = true
		} else if yyj253 == 0 && yyv253 == nil {
			yyv253 = []Job{}
			yyc253 = true
		}
	}
	yyh253.End()
	if yyc253 {
		*v = yyv253
	}
}

func (x codecSelfer1234) encSliceJobCondition(v []JobCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv257 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy258 := &yyv257
		yy258.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceJobCondition(v *[]JobCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv259 := *v
	yyh259, yyl259 := z.DecSliceHelperStart()
	var yyc259 bool
	if yyl259 == 0 {
		if yyv259 == nil {
			yyv259 = []JobCondition{}
			yyc259 = true
		} else if len(yyv259) != 0 {
			yyv259 = yyv259[:0]
			yyc259 = true
		}
	} else if yyl259 > 0 {
		var yyrr259, yyrl259 int
		var yyrt259 bool
		if yyl259 > cap(yyv259) {

			yyrg259 := len(yyv259) > 0
			yyv2259 := yyv259
			yyrl259, yyrt259 = z.DecInferLen(yyl259, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt259 {
				if yyrl259 <= cap(yyv259) {
					yyv259 = yyv259[:yyrl259]
				} else {
					yyv259 = make([]JobCondition, yyrl259)
				}
			} else {
				yyv259 = make([]JobCondition, yyrl259)
			}
			yyc259 = true
			yyrr259 = len(yyv259)
			if yyrg259 {
				copy(yyv259, yyv2259)
			}
		} else if yyl259 != len(yyv259) {
			yyv259 = yyv259[:yyl259]
			yyc259 = true
		}
		yyj259 := 0
		for ; yyj259 < yyrr259; yyj259++ {
			yyh259.ElemContainerState(yyj259)
			if r.TryDecodeAsNil() {
				yyv259[yyj259] = JobCondition{}
			} else {
				yyv260 := &yyv259[yyj259]
				yyv260.CodecDecodeSelf(d)
			}

		}
		if yyrt259 {
			for ; yyj259 < yyl259; yyj259++ {
				yyv259 = append(yyv259, JobCondition{})
				yyh259.ElemContainerState(yyj259)
				if r.TryDecodeAsNil() {
					yyv259[yyj259] = JobCondition{}
				} else {
					yyv261 := &yyv259[yyj259]
					yyv261.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj259 := 0
		for ; !r.CheckBreak(); yyj259++ {

			if yyj259 >= len(yyv259) {
				yyv259 = append(yyv259, JobCondition{}) // var yyz259 JobCondition
				yyc259 = true
			}
			yyh259.ElemContainerState(yyj259)
			if yyj259 < len(yyv259) {
				if r.TryDecodeAsNil() {
					yyv259[yyj259] = JobCondition{}
				} else {
					yyv262 := &yyv259[yyj259]
					yyv262.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj259 < len(yyv259) {
			yyv259 = yyv259[:yyj259]
			yyc259 = true
		} else if yyj259 == 0 && yyv259 == nil {
			yyv259 = []JobCondition{}
			yyc259 = true
		}
	}
	yyh259.End()
	if yyc259 {
		*v = yyv259
	}
}

func (x codecSelfer1234) encSliceLabelSelectorRequirement(v []LabelSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv263 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy264 := &yyv263
		yy264.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLabelSelectorRequirement(v *[]LabelSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv265 := *v
	yyh265, yyl265 := z.DecSliceHelperStart()
	var yyc265 bool
	if yyl265 == 0 {
		if yyv265 == nil {
			yyv265 = []LabelSelectorRequirement{}
			yyc265 = true
		} else if len(yyv265) != 0 {
			yyv265 = yyv265[:0]
			yyc265 = true
		}
	} else if yyl265 > 0 {
		var yyrr265, yyrl265 int
		var yyrt265 bool
		if yyl265 > cap(yyv265) {

			yyrg265 := len(yyv265) > 0
			yyv2265 := yyv265
			yyrl265, yyrt265 = z.DecInferLen(yyl265, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt265 {
				if yyrl265 <= cap(yyv265) {
					yyv265 = yyv265[:yyrl265]
				} else {
					yyv265 = make([]LabelSelectorRequirement, yyrl265)
				}
			} else {
				yyv265 = make([]LabelSelectorRequirement, yyrl265)
			}
			yyc265 = true
			yyrr265 = len(yyv265)
			if yyrg265 {
				copy(yyv265, yyv2265)
			}
		} else if yyl265 != len(yyv265) {
			yyv265 = yyv265[:yyl265]
			yyc265 = true
		}
		yyj265 := 0
		for ; yyj265 < yyrr265; yyj265++ {
			yyh265.ElemContainerState(yyj265)
			if r.TryDecodeAsNil() {
				yyv265[yyj265] = LabelSelectorRequirement{}
			} else {
				yyv266 := &yyv265[yyj265]
				yyv266.CodecDecodeSelf(d)
			}

		}
		if yyrt265 {
			for ; yyj265 < yyl265; yyj265++ {
				yyv265 = append(yyv265, LabelSelectorRequirement{})
				yyh265.ElemContainerState(yyj265)
				if r.TryDecodeAsNil() {
					yyv265[yyj265] = LabelSelectorRequirement{}
				} else {
					yyv267 := &yyv265[yyj265]
					yyv267.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj265 := 0
		for ; !r.CheckBreak(); yyj265++ {

			if yyj265 >= len(yyv265) {
				yyv265 = append(yyv265, LabelSelectorRequirement{}) // var yyz265 LabelSelectorRequirement
				yyc265 = true
			}
			yyh265.ElemContainerState(yyj265)
			if yyj265 < len(yyv265) {
				if r.TryDecodeAsNil() {
					yyv265[yyj265] = LabelSelectorRequirement{}
				} else {
					yyv268 := &yyv265[yyj265]
					yyv268.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj265 < len(yyv265) {
			yyv265 = yyv265[:yyj265]
			yyc265 = true
		} else if yyj265 == 0 && yyv265 == nil {
			yyv265 = []LabelSelectorRequirement{}
			yyc265 = true
		}
	}
	yyh265.End()
	if yyc265 {
		*v = yyv265
	}
}
