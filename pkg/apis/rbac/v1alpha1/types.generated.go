/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package v1alpha1

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_v1 "k8s.io/kubernetes/pkg/api/v1"
	pkg1_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg4_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg2_unversioned.TypeMeta
		var v1 pkg3_v1.ObjectMeta
		var v2 pkg1_runtime.RawExtension
		var v3 pkg4_types.UID
		var v4 time.Time
		_, _, _, _, _ = v0, v1, v2, v3, v4
	}
}

func (x *PolicyRule) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [6]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[1] = true
			yyq2[2] = len(x.APIGroups) != 0
			yyq2[3] = len(x.Resources) != 0
			yyq2[4] = len(x.ResourceNames) != 0
			yyq2[5] = len(x.NonResourceURLs) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(6)
			} else {
				yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Verbs == nil {
					r.EncodeNil()
				} else {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						z.F.EncSliceStringV(x.Verbs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("verbs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Verbs == nil {
					r.EncodeNil()
				} else {
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						z.F.EncSliceStringV(x.Verbs, false, e)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yy7 := &x.AttributeRestrictions
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else if z.HasExtensions() && z.EncExt(yy7) {
					} else if !yym8 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy7)
					} else {
						z.EncFallback(yy7)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("attributeRestrictions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy9 := &x.AttributeRestrictions
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else if z.HasExtensions() && z.EncExt(yy9) {
					} else if !yym10 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy9)
					} else {
						z.EncFallback(yy9)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					if x.APIGroups == nil {
						r.EncodeNil()
					} else {
						yym12 := z.EncBinary()
						_ = yym12
						if false {
						} else {
							z.F.EncSliceStringV(x.APIGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.APIGroups == nil {
						r.EncodeNil()
					} else {
						yym13 := z.EncBinary()
						_ = yym13
						if false {
						} else {
							z.F.EncSliceStringV(x.APIGroups, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					if x.Resources == nil {
						r.EncodeNil()
					} else {
						yym15 := z.EncBinary()
						_ = yym15
						if false {
						} else {
							z.F.EncSliceStringV(x.Resources, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Resources == nil {
						r.EncodeNil()
					} else {
						yym16 := z.EncBinary()
						_ = yym16
						if false {
						} else {
							z.F.EncSliceStringV(x.Resources, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					if x.ResourceNames == nil {
						r.EncodeNil()
					} else {
						yym18 := z.EncBinary()
						_ = yym18
						if false {
						} else {
							z.F.EncSliceStringV(x.ResourceNames, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceNames"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceNames == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncSliceStringV(x.ResourceNames, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					if x.NonResourceURLs == nil {
						r.EncodeNil()
					} else {
						yym21 := z.EncBinary()
						_ = yym21
						if false {
						} else {
							z.F.EncSliceStringV(x.NonResourceURLs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nonResourceURLs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NonResourceURLs == nil {
						r.EncodeNil()
					} else {
						yym22 := z.EncBinary()
						_ = yym22
						if false {
						} else {
							z.F.EncSliceStringV(x.NonResourceURLs, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PolicyRule) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym23 := z.DecBinary()
	_ = yym23
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct24 := r.ContainerType()
		if yyct24 == codecSelferValueTypeMap1234 {
			yyl24 := r.ReadMapStart()
			if yyl24 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl24, d)
			}
		} else if yyct24 == codecSelferValueTypeArray1234 {
			yyl24 := r.ReadArrayStart()
			if yyl24 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl24, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PolicyRule) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys25Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys25Slc
	var yyhl25 bool = l >= 0
	for yyj25 := 0; ; yyj25++ {
		if yyhl25 {
			if yyj25 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys25Slc = r.DecodeBytes(yys25Slc, true, true)
		yys25 := string(yys25Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys25 {
		case "verbs":
			if r.TryDecodeAsNil() {
				x.Verbs = nil
			} else {
				yyv26 := &x.Verbs
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					z.F.DecSliceStringX(yyv26, false, d)
				}
			}
		case "attributeRestrictions":
			if r.TryDecodeAsNil() {
				x.AttributeRestrictions = pkg1_runtime.RawExtension{}
			} else {
				yyv28 := &x.AttributeRestrictions
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv28) {
				} else if !yym29 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv28)
				} else {
					z.DecFallback(yyv28, false)
				}
			}
		case "apiGroups":
			if r.TryDecodeAsNil() {
				x.APIGroups = nil
			} else {
				yyv30 := &x.APIGroups
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					z.F.DecSliceStringX(yyv30, false, d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = nil
			} else {
				yyv32 := &x.Resources
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					z.F.DecSliceStringX(yyv32, false, d)
				}
			}
		case "resourceNames":
			if r.TryDecodeAsNil() {
				x.ResourceNames = nil
			} else {
				yyv34 := &x.ResourceNames
				yym35 := z.DecBinary()
				_ = yym35
				if false {
				} else {
					z.F.DecSliceStringX(yyv34, false, d)
				}
			}
		case "nonResourceURLs":
			if r.TryDecodeAsNil() {
				x.NonResourceURLs = nil
			} else {
				yyv36 := &x.NonResourceURLs
				yym37 := z.DecBinary()
				_ = yym37
				if false {
				} else {
					z.F.DecSliceStringX(yyv36, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys25)
		} // end switch yys25
	} // end for yyj25
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PolicyRule) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj38 int
	var yyb38 bool
	var yyhl38 bool = l >= 0
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Verbs = nil
	} else {
		yyv39 := &x.Verbs
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			z.F.DecSliceStringX(yyv39, false, d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AttributeRestrictions = pkg1_runtime.RawExtension{}
	} else {
		yyv41 := &x.AttributeRestrictions
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv41) {
		} else if !yym42 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv41)
		} else {
			z.DecFallback(yyv41, false)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroups = nil
	} else {
		yyv43 := &x.APIGroups
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			z.F.DecSliceStringX(yyv43, false, d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = nil
	} else {
		yyv45 := &x.Resources
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			z.F.DecSliceStringX(yyv45, false, d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceNames = nil
	} else {
		yyv47 := &x.ResourceNames
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			z.F.DecSliceStringX(yyv47, false, d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NonResourceURLs = nil
	} else {
		yyv49 := &x.NonResourceURLs
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			z.F.DecSliceStringX(yyv49, false, d)
		}
	}
	for {
		yyj38++
		if yyhl38 {
			yyb38 = yyj38 > l
		} else {
			yyb38 = r.CheckBreak()
		}
		if yyb38 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj38-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Subject) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym51 := z.EncBinary()
		_ = yym51
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep52 := !z.EncBinary()
			yy2arr52 := z.EncBasicHandle().StructToArray
			var yyq52 [4]bool
			_, _, _ = yysep52, yyq52, yy2arr52
			const yyr52 bool = false
			yyq52[1] = x.APIVersion != ""
			yyq52[3] = x.Namespace != ""
			var yynn52 int
			if yyr52 || yy2arr52 {
				r.EncodeArrayStart(4)
			} else {
				yynn52 = 2
				for _, b := range yyq52 {
					if b {
						yynn52++
					}
				}
				r.EncodeMapStart(yynn52)
				yynn52 = 0
			}
			if yyr52 || yy2arr52 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym54 := z.EncBinary()
				_ = yym54
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym55 := z.EncBinary()
				_ = yym55
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr52 || yy2arr52 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq52[1] {
					yym57 := z.EncBinary()
					_ = yym57
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq52[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym58 := z.EncBinary()
					_ = yym58
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr52 || yy2arr52 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym60 := z.EncBinary()
				_ = yym60
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym61 := z.EncBinary()
				_ = yym61
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr52 || yy2arr52 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq52[3] {
					yym63 := z.EncBinary()
					_ = yym63
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq52[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym64 := z.EncBinary()
					_ = yym64
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr52 || yy2arr52 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Subject) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym65 := z.DecBinary()
	_ = yym65
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct66 := r.ContainerType()
		if yyct66 == codecSelferValueTypeMap1234 {
			yyl66 := r.ReadMapStart()
			if yyl66 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl66, d)
			}
		} else if yyct66 == codecSelferValueTypeArray1234 {
			yyl66 := r.ReadArrayStart()
			if yyl66 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl66, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Subject) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys67Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys67Slc
	var yyhl67 bool = l >= 0
	for yyj67 := 0; ; yyj67++ {
		if yyhl67 {
			if yyj67 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys67Slc = r.DecodeBytes(yys67Slc, true, true)
		yys67 := string(yys67Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys67 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys67)
		} // end switch yys67
	} // end for yyj67
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Subject) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj72 int
	var yyb72 bool
	var yyhl72 bool = l >= 0
	yyj72++
	if yyhl72 {
		yyb72 = yyj72 > l
	} else {
		yyb72 = r.CheckBreak()
	}
	if yyb72 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj72++
	if yyhl72 {
		yyb72 = yyj72 > l
	} else {
		yyb72 = r.CheckBreak()
	}
	if yyb72 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj72++
	if yyhl72 {
		yyb72 = yyj72 > l
	} else {
		yyb72 = r.CheckBreak()
	}
	if yyb72 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj72++
	if yyhl72 {
		yyb72 = yyj72 > l
	} else {
		yyb72 = r.CheckBreak()
	}
	if yyb72 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	for {
		yyj72++
		if yyhl72 {
			yyb72 = yyj72 > l
		} else {
			yyb72 = r.CheckBreak()
		}
		if yyb72 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj72-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RoleRef) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym77 := z.EncBinary()
		_ = yym77
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep78 := !z.EncBinary()
			yy2arr78 := z.EncBasicHandle().StructToArray
			var yyq78 [3]bool
			_, _, _ = yysep78, yyq78, yy2arr78
			const yyr78 bool = false
			var yynn78 int
			if yyr78 || yy2arr78 {
				r.EncodeArrayStart(3)
			} else {
				yynn78 = 3
				for _, b := range yyq78 {
					if b {
						yynn78++
					}
				}
				r.EncodeMapStart(yynn78)
				yynn78 = 0
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym80 := z.EncBinary()
				_ = yym80
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiGroup"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym81 := z.EncBinary()
				_ = yym81
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIGroup))
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym83 := z.EncBinary()
				_ = yym83
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym84 := z.EncBinary()
				_ = yym84
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym86 := z.EncBinary()
				_ = yym86
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym87 := z.EncBinary()
				_ = yym87
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr78 || yy2arr78 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RoleRef) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym88 := z.DecBinary()
	_ = yym88
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct89 := r.ContainerType()
		if yyct89 == codecSelferValueTypeMap1234 {
			yyl89 := r.ReadMapStart()
			if yyl89 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl89, d)
			}
		} else if yyct89 == codecSelferValueTypeArray1234 {
			yyl89 := r.ReadArrayStart()
			if yyl89 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl89, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RoleRef) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys90Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys90Slc
	var yyhl90 bool = l >= 0
	for yyj90 := 0; ; yyj90++ {
		if yyhl90 {
			if yyj90 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys90Slc = r.DecodeBytes(yys90Slc, true, true)
		yys90 := string(yys90Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys90 {
		case "apiGroup":
			if r.TryDecodeAsNil() {
				x.APIGroup = ""
			} else {
				x.APIGroup = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys90)
		} // end switch yys90
	} // end for yyj90
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RoleRef) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj94 int
	var yyb94 bool
	var yyhl94 bool = l >= 0
	yyj94++
	if yyhl94 {
		yyb94 = yyj94 > l
	} else {
		yyb94 = r.CheckBreak()
	}
	if yyb94 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIGroup = ""
	} else {
		x.APIGroup = string(r.DecodeString())
	}
	yyj94++
	if yyhl94 {
		yyb94 = yyj94 > l
	} else {
		yyb94 = r.CheckBreak()
	}
	if yyb94 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj94++
	if yyhl94 {
		yyb94 = yyj94 > l
	} else {
		yyb94 = r.CheckBreak()
	}
	if yyb94 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj94++
		if yyhl94 {
			yyb94 = yyj94 > l
		} else {
			yyb94 = r.CheckBreak()
		}
		if yyb94 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj94-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Role) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym98 := z.EncBinary()
		_ = yym98
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep99 := !z.EncBinary()
			yy2arr99 := z.EncBasicHandle().StructToArray
			var yyq99 [4]bool
			_, _, _ = yysep99, yyq99, yy2arr99
			const yyr99 bool = false
			yyq99[0] = x.Kind != ""
			yyq99[1] = x.APIVersion != ""
			yyq99[2] = true
			var yynn99 int
			if yyr99 || yy2arr99 {
				r.EncodeArrayStart(4)
			} else {
				yynn99 = 1
				for _, b := range yyq99 {
					if b {
						yynn99++
					}
				}
				r.EncodeMapStart(yynn99)
				yynn99 = 0
			}
			if yyr99 || yy2arr99 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq99[0] {
					yym101 := z.EncBinary()
					_ = yym101
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq99[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym102 := z.EncBinary()
					_ = yym102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr99 || yy2arr99 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq99[1] {
					yym104 := z.EncBinary()
					_ = yym104
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq99[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym105 := z.EncBinary()
					_ = yym105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr99 || yy2arr99 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq99[2] {
					yy107 := &x.ObjectMeta
					yym108 := z.EncBinary()
					_ = yym108
					if false {
					} else if z.HasExtensions() && z.EncExt(yy107) {
					} else {
						z.EncFallback(yy107)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq99[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy109 := &x.ObjectMeta
					yym110 := z.EncBinary()
					_ = yym110
					if false {
					} else if z.HasExtensions() && z.EncExt(yy109) {
					} else {
						z.EncFallback(yy109)
					}
				}
			}
			if yyr99 || yy2arr99 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Rules == nil {
					r.EncodeNil()
				} else {
					yym112 := z.EncBinary()
					_ = yym112
					if false {
					} else {
						h.encSlicePolicyRule(([]PolicyRule)(x.Rules), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rules"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Rules == nil {
					r.EncodeNil()
				} else {
					yym113 := z.EncBinary()
					_ = yym113
					if false {
					} else {
						h.encSlicePolicyRule(([]PolicyRule)(x.Rules), e)
					}
				}
			}
			if yyr99 || yy2arr99 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Role) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym114 := z.DecBinary()
	_ = yym114
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct115 := r.ContainerType()
		if yyct115 == codecSelferValueTypeMap1234 {
			yyl115 := r.ReadMapStart()
			if yyl115 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl115, d)
			}
		} else if yyct115 == codecSelferValueTypeArray1234 {
			yyl115 := r.ReadArrayStart()
			if yyl115 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl115, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Role) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys116Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys116Slc
	var yyhl116 bool = l >= 0
	for yyj116 := 0; ; yyj116++ {
		if yyhl116 {
			if yyj116 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys116Slc = r.DecodeBytes(yys116Slc, true, true)
		yys116 := string(yys116Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys116 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg3_v1.ObjectMeta{}
			} else {
				yyv119 := &x.ObjectMeta
				yym120 := z.DecBinary()
				_ = yym120
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv119) {
				} else {
					z.DecFallback(yyv119, false)
				}
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv121 := &x.Rules
				yym122 := z.DecBinary()
				_ = yym122
				if false {
				} else {
					h.decSlicePolicyRule((*[]PolicyRule)(yyv121), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys116)
		} // end switch yys116
	} // end for yyj116
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Role) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj123 int
	var yyb123 bool
	var yyhl123 bool = l >= 0
	yyj123++
	if yyhl123 {
		yyb123 = yyj123 > l
	} else {
		yyb123 = r.CheckBreak()
	}
	if yyb123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj123++
	if yyhl123 {
		yyb123 = yyj123 > l
	} else {
		yyb123 = r.CheckBreak()
	}
	if yyb123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj123++
	if yyhl123 {
		yyb123 = yyj123 > l
	} else {
		yyb123 = r.CheckBreak()
	}
	if yyb123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg3_v1.ObjectMeta{}
	} else {
		yyv126 := &x.ObjectMeta
		yym127 := z.DecBinary()
		_ = yym127
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv126) {
		} else {
			z.DecFallback(yyv126, false)
		}
	}
	yyj123++
	if yyhl123 {
		yyb123 = yyj123 > l
	} else {
		yyb123 = r.CheckBreak()
	}
	if yyb123 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv128 := &x.Rules
		yym129 := z.DecBinary()
		_ = yym129
		if false {
		} else {
			h.decSlicePolicyRule((*[]PolicyRule)(yyv128), d)
		}
	}
	for {
		yyj123++
		if yyhl123 {
			yyb123 = yyj123 > l
		} else {
			yyb123 = r.CheckBreak()
		}
		if yyb123 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj123-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RoleBinding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym130 := z.EncBinary()
		_ = yym130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep131 := !z.EncBinary()
			yy2arr131 := z.EncBasicHandle().StructToArray
			var yyq131 [5]bool
			_, _, _ = yysep131, yyq131, yy2arr131
			const yyr131 bool = false
			yyq131[0] = x.Kind != ""
			yyq131[1] = x.APIVersion != ""
			yyq131[2] = true
			var yynn131 int
			if yyr131 || yy2arr131 {
				r.EncodeArrayStart(5)
			} else {
				yynn131 = 2
				for _, b := range yyq131 {
					if b {
						yynn131++
					}
				}
				r.EncodeMapStart(yynn131)
				yynn131 = 0
			}
			if yyr131 || yy2arr131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq131[0] {
					yym133 := z.EncBinary()
					_ = yym133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq131[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym134 := z.EncBinary()
					_ = yym134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr131 || yy2arr131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq131[1] {
					yym136 := z.EncBinary()
					_ = yym136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq131[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym137 := z.EncBinary()
					_ = yym137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr131 || yy2arr131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq131[2] {
					yy139 := &x.ObjectMeta
					yym140 := z.EncBinary()
					_ = yym140
					if false {
					} else if z.HasExtensions() && z.EncExt(yy139) {
					} else {
						z.EncFallback(yy139)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq131[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy141 := &x.ObjectMeta
					yym142 := z.EncBinary()
					_ = yym142
					if false {
					} else if z.HasExtensions() && z.EncExt(yy141) {
					} else {
						z.EncFallback(yy141)
					}
				}
			}
			if yyr131 || yy2arr131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subjects == nil {
					r.EncodeNil()
				} else {
					yym144 := z.EncBinary()
					_ = yym144
					if false {
					} else {
						h.encSliceSubject(([]Subject)(x.Subjects), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subjects"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subjects == nil {
					r.EncodeNil()
				} else {
					yym145 := z.EncBinary()
					_ = yym145
					if false {
					} else {
						h.encSliceSubject(([]Subject)(x.Subjects), e)
					}
				}
			}
			if yyr131 || yy2arr131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy147 := &x.RoleRef
				yy147.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("roleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy148 := &x.RoleRef
				yy148.CodecEncodeSelf(e)
			}
			if yyr131 || yy2arr131 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RoleBinding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym149 := z.DecBinary()
	_ = yym149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct150 := r.ContainerType()
		if yyct150 == codecSelferValueTypeMap1234 {
			yyl150 := r.ReadMapStart()
			if yyl150 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl150, d)
			}
		} else if yyct150 == codecSelferValueTypeArray1234 {
			yyl150 := r.ReadArrayStart()
			if yyl150 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl150, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RoleBinding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys151Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys151Slc
	var yyhl151 bool = l >= 0
	for yyj151 := 0; ; yyj151++ {
		if yyhl151 {
			if yyj151 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys151Slc = r.DecodeBytes(yys151Slc, true, true)
		yys151 := string(yys151Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys151 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg3_v1.ObjectMeta{}
			} else {
				yyv154 := &x.ObjectMeta
				yym155 := z.DecBinary()
				_ = yym155
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv154) {
				} else {
					z.DecFallback(yyv154, false)
				}
			}
		case "subjects":
			if r.TryDecodeAsNil() {
				x.Subjects = nil
			} else {
				yyv156 := &x.Subjects
				yym157 := z.DecBinary()
				_ = yym157
				if false {
				} else {
					h.decSliceSubject((*[]Subject)(yyv156), d)
				}
			}
		case "roleRef":
			if r.TryDecodeAsNil() {
				x.RoleRef = RoleRef{}
			} else {
				yyv158 := &x.RoleRef
				yyv158.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys151)
		} // end switch yys151
	} // end for yyj151
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RoleBinding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj159 int
	var yyb159 bool
	var yyhl159 bool = l >= 0
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg3_v1.ObjectMeta{}
	} else {
		yyv162 := &x.ObjectMeta
		yym163 := z.DecBinary()
		_ = yym163
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv162) {
		} else {
			z.DecFallback(yyv162, false)
		}
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subjects = nil
	} else {
		yyv164 := &x.Subjects
		yym165 := z.DecBinary()
		_ = yym165
		if false {
		} else {
			h.decSliceSubject((*[]Subject)(yyv164), d)
		}
	}
	yyj159++
	if yyhl159 {
		yyb159 = yyj159 > l
	} else {
		yyb159 = r.CheckBreak()
	}
	if yyb159 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RoleRef = RoleRef{}
	} else {
		yyv166 := &x.RoleRef
		yyv166.CodecDecodeSelf(d)
	}
	for {
		yyj159++
		if yyhl159 {
			yyb159 = yyj159 > l
		} else {
			yyb159 = r.CheckBreak()
		}
		if yyb159 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj159-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RoleBindingList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym167 := z.EncBinary()
		_ = yym167
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep168 := !z.EncBinary()
			yy2arr168 := z.EncBasicHandle().StructToArray
			var yyq168 [4]bool
			_, _, _ = yysep168, yyq168, yy2arr168
			const yyr168 bool = false
			yyq168[0] = x.Kind != ""
			yyq168[1] = x.APIVersion != ""
			yyq168[2] = true
			var yynn168 int
			if yyr168 || yy2arr168 {
				r.EncodeArrayStart(4)
			} else {
				yynn168 = 1
				for _, b := range yyq168 {
					if b {
						yynn168++
					}
				}
				r.EncodeMapStart(yynn168)
				yynn168 = 0
			}
			if yyr168 || yy2arr168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq168[0] {
					yym170 := z.EncBinary()
					_ = yym170
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq168[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym171 := z.EncBinary()
					_ = yym171
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr168 || yy2arr168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq168[1] {
					yym173 := z.EncBinary()
					_ = yym173
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq168[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym174 := z.EncBinary()
					_ = yym174
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr168 || yy2arr168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq168[2] {
					yy176 := &x.ListMeta
					yym177 := z.EncBinary()
					_ = yym177
					if false {
					} else if z.HasExtensions() && z.EncExt(yy176) {
					} else {
						z.EncFallback(yy176)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq168[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy178 := &x.ListMeta
					yym179 := z.EncBinary()
					_ = yym179
					if false {
					} else if z.HasExtensions() && z.EncExt(yy178) {
					} else {
						z.EncFallback(yy178)
					}
				}
			}
			if yyr168 || yy2arr168 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym181 := z.EncBinary()
					_ = yym181
					if false {
					} else {
						h.encSliceRoleBinding(([]RoleBinding)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym182 := z.EncBinary()
					_ = yym182
					if false {
					} else {
						h.encSliceRoleBinding(([]RoleBinding)(x.Items), e)
					}
				}
			}
			if yyr168 || yy2arr168 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RoleBindingList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym183 := z.DecBinary()
	_ = yym183
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct184 := r.ContainerType()
		if yyct184 == codecSelferValueTypeMap1234 {
			yyl184 := r.ReadMapStart()
			if yyl184 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl184, d)
			}
		} else if yyct184 == codecSelferValueTypeArray1234 {
			yyl184 := r.ReadArrayStart()
			if yyl184 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl184, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RoleBindingList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys185Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys185Slc
	var yyhl185 bool = l >= 0
	for yyj185 := 0; ; yyj185++ {
		if yyhl185 {
			if yyj185 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys185Slc = r.DecodeBytes(yys185Slc, true, true)
		yys185 := string(yys185Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys185 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv188 := &x.ListMeta
				yym189 := z.DecBinary()
				_ = yym189
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv188) {
				} else {
					z.DecFallback(yyv188, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv190 := &x.Items
				yym191 := z.DecBinary()
				_ = yym191
				if false {
				} else {
					h.decSliceRoleBinding((*[]RoleBinding)(yyv190), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys185)
		} // end switch yys185
	} // end for yyj185
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RoleBindingList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj192 int
	var yyb192 bool
	var yyhl192 bool = l >= 0
	yyj192++
	if yyhl192 {
		yyb192 = yyj192 > l
	} else {
		yyb192 = r.CheckBreak()
	}
	if yyb192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj192++
	if yyhl192 {
		yyb192 = yyj192 > l
	} else {
		yyb192 = r.CheckBreak()
	}
	if yyb192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj192++
	if yyhl192 {
		yyb192 = yyj192 > l
	} else {
		yyb192 = r.CheckBreak()
	}
	if yyb192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv195 := &x.ListMeta
		yym196 := z.DecBinary()
		_ = yym196
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv195) {
		} else {
			z.DecFallback(yyv195, false)
		}
	}
	yyj192++
	if yyhl192 {
		yyb192 = yyj192 > l
	} else {
		yyb192 = r.CheckBreak()
	}
	if yyb192 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv197 := &x.Items
		yym198 := z.DecBinary()
		_ = yym198
		if false {
		} else {
			h.decSliceRoleBinding((*[]RoleBinding)(yyv197), d)
		}
	}
	for {
		yyj192++
		if yyhl192 {
			yyb192 = yyj192 > l
		} else {
			yyb192 = r.CheckBreak()
		}
		if yyb192 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj192-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RoleList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym199 := z.EncBinary()
		_ = yym199
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep200 := !z.EncBinary()
			yy2arr200 := z.EncBasicHandle().StructToArray
			var yyq200 [4]bool
			_, _, _ = yysep200, yyq200, yy2arr200
			const yyr200 bool = false
			yyq200[0] = x.Kind != ""
			yyq200[1] = x.APIVersion != ""
			yyq200[2] = true
			var yynn200 int
			if yyr200 || yy2arr200 {
				r.EncodeArrayStart(4)
			} else {
				yynn200 = 1
				for _, b := range yyq200 {
					if b {
						yynn200++
					}
				}
				r.EncodeMapStart(yynn200)
				yynn200 = 0
			}
			if yyr200 || yy2arr200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq200[0] {
					yym202 := z.EncBinary()
					_ = yym202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq200[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym203 := z.EncBinary()
					_ = yym203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr200 || yy2arr200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq200[1] {
					yym205 := z.EncBinary()
					_ = yym205
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq200[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym206 := z.EncBinary()
					_ = yym206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr200 || yy2arr200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq200[2] {
					yy208 := &x.ListMeta
					yym209 := z.EncBinary()
					_ = yym209
					if false {
					} else if z.HasExtensions() && z.EncExt(yy208) {
					} else {
						z.EncFallback(yy208)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq200[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy210 := &x.ListMeta
					yym211 := z.EncBinary()
					_ = yym211
					if false {
					} else if z.HasExtensions() && z.EncExt(yy210) {
					} else {
						z.EncFallback(yy210)
					}
				}
			}
			if yyr200 || yy2arr200 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym213 := z.EncBinary()
					_ = yym213
					if false {
					} else {
						h.encSliceRole(([]Role)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym214 := z.EncBinary()
					_ = yym214
					if false {
					} else {
						h.encSliceRole(([]Role)(x.Items), e)
					}
				}
			}
			if yyr200 || yy2arr200 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RoleList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym215 := z.DecBinary()
	_ = yym215
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct216 := r.ContainerType()
		if yyct216 == codecSelferValueTypeMap1234 {
			yyl216 := r.ReadMapStart()
			if yyl216 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl216, d)
			}
		} else if yyct216 == codecSelferValueTypeArray1234 {
			yyl216 := r.ReadArrayStart()
			if yyl216 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl216, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RoleList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys217Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys217Slc
	var yyhl217 bool = l >= 0
	for yyj217 := 0; ; yyj217++ {
		if yyhl217 {
			if yyj217 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys217Slc = r.DecodeBytes(yys217Slc, true, true)
		yys217 := string(yys217Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys217 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv220 := &x.ListMeta
				yym221 := z.DecBinary()
				_ = yym221
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv220) {
				} else {
					z.DecFallback(yyv220, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv222 := &x.Items
				yym223 := z.DecBinary()
				_ = yym223
				if false {
				} else {
					h.decSliceRole((*[]Role)(yyv222), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys217)
		} // end switch yys217
	} // end for yyj217
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RoleList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj224 int
	var yyb224 bool
	var yyhl224 bool = l >= 0
	yyj224++
	if yyhl224 {
		yyb224 = yyj224 > l
	} else {
		yyb224 = r.CheckBreak()
	}
	if yyb224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj224++
	if yyhl224 {
		yyb224 = yyj224 > l
	} else {
		yyb224 = r.CheckBreak()
	}
	if yyb224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj224++
	if yyhl224 {
		yyb224 = yyj224 > l
	} else {
		yyb224 = r.CheckBreak()
	}
	if yyb224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv227 := &x.ListMeta
		yym228 := z.DecBinary()
		_ = yym228
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv227) {
		} else {
			z.DecFallback(yyv227, false)
		}
	}
	yyj224++
	if yyhl224 {
		yyb224 = yyj224 > l
	} else {
		yyb224 = r.CheckBreak()
	}
	if yyb224 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv229 := &x.Items
		yym230 := z.DecBinary()
		_ = yym230
		if false {
		} else {
			h.decSliceRole((*[]Role)(yyv229), d)
		}
	}
	for {
		yyj224++
		if yyhl224 {
			yyb224 = yyj224 > l
		} else {
			yyb224 = r.CheckBreak()
		}
		if yyb224 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj224-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterRole) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym231 := z.EncBinary()
		_ = yym231
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep232 := !z.EncBinary()
			yy2arr232 := z.EncBasicHandle().StructToArray
			var yyq232 [4]bool
			_, _, _ = yysep232, yyq232, yy2arr232
			const yyr232 bool = false
			yyq232[0] = x.Kind != ""
			yyq232[1] = x.APIVersion != ""
			yyq232[2] = true
			var yynn232 int
			if yyr232 || yy2arr232 {
				r.EncodeArrayStart(4)
			} else {
				yynn232 = 1
				for _, b := range yyq232 {
					if b {
						yynn232++
					}
				}
				r.EncodeMapStart(yynn232)
				yynn232 = 0
			}
			if yyr232 || yy2arr232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq232[0] {
					yym234 := z.EncBinary()
					_ = yym234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq232[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym235 := z.EncBinary()
					_ = yym235
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr232 || yy2arr232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq232[1] {
					yym237 := z.EncBinary()
					_ = yym237
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq232[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym238 := z.EncBinary()
					_ = yym238
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr232 || yy2arr232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq232[2] {
					yy240 := &x.ObjectMeta
					yym241 := z.EncBinary()
					_ = yym241
					if false {
					} else if z.HasExtensions() && z.EncExt(yy240) {
					} else {
						z.EncFallback(yy240)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq232[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy242 := &x.ObjectMeta
					yym243 := z.EncBinary()
					_ = yym243
					if false {
					} else if z.HasExtensions() && z.EncExt(yy242) {
					} else {
						z.EncFallback(yy242)
					}
				}
			}
			if yyr232 || yy2arr232 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Rules == nil {
					r.EncodeNil()
				} else {
					yym245 := z.EncBinary()
					_ = yym245
					if false {
					} else {
						h.encSlicePolicyRule(([]PolicyRule)(x.Rules), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("rules"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Rules == nil {
					r.EncodeNil()
				} else {
					yym246 := z.EncBinary()
					_ = yym246
					if false {
					} else {
						h.encSlicePolicyRule(([]PolicyRule)(x.Rules), e)
					}
				}
			}
			if yyr232 || yy2arr232 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterRole) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym247 := z.DecBinary()
	_ = yym247
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct248 := r.ContainerType()
		if yyct248 == codecSelferValueTypeMap1234 {
			yyl248 := r.ReadMapStart()
			if yyl248 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl248, d)
			}
		} else if yyct248 == codecSelferValueTypeArray1234 {
			yyl248 := r.ReadArrayStart()
			if yyl248 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl248, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterRole) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys249Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys249Slc
	var yyhl249 bool = l >= 0
	for yyj249 := 0; ; yyj249++ {
		if yyhl249 {
			if yyj249 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys249Slc = r.DecodeBytes(yys249Slc, true, true)
		yys249 := string(yys249Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys249 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg3_v1.ObjectMeta{}
			} else {
				yyv252 := &x.ObjectMeta
				yym253 := z.DecBinary()
				_ = yym253
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv252) {
				} else {
					z.DecFallback(yyv252, false)
				}
			}
		case "rules":
			if r.TryDecodeAsNil() {
				x.Rules = nil
			} else {
				yyv254 := &x.Rules
				yym255 := z.DecBinary()
				_ = yym255
				if false {
				} else {
					h.decSlicePolicyRule((*[]PolicyRule)(yyv254), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys249)
		} // end switch yys249
	} // end for yyj249
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterRole) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj256 int
	var yyb256 bool
	var yyhl256 bool = l >= 0
	yyj256++
	if yyhl256 {
		yyb256 = yyj256 > l
	} else {
		yyb256 = r.CheckBreak()
	}
	if yyb256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj256++
	if yyhl256 {
		yyb256 = yyj256 > l
	} else {
		yyb256 = r.CheckBreak()
	}
	if yyb256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj256++
	if yyhl256 {
		yyb256 = yyj256 > l
	} else {
		yyb256 = r.CheckBreak()
	}
	if yyb256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg3_v1.ObjectMeta{}
	} else {
		yyv259 := &x.ObjectMeta
		yym260 := z.DecBinary()
		_ = yym260
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv259) {
		} else {
			z.DecFallback(yyv259, false)
		}
	}
	yyj256++
	if yyhl256 {
		yyb256 = yyj256 > l
	} else {
		yyb256 = r.CheckBreak()
	}
	if yyb256 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rules = nil
	} else {
		yyv261 := &x.Rules
		yym262 := z.DecBinary()
		_ = yym262
		if false {
		} else {
			h.decSlicePolicyRule((*[]PolicyRule)(yyv261), d)
		}
	}
	for {
		yyj256++
		if yyhl256 {
			yyb256 = yyj256 > l
		} else {
			yyb256 = r.CheckBreak()
		}
		if yyb256 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj256-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterRoleBinding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym263 := z.EncBinary()
		_ = yym263
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep264 := !z.EncBinary()
			yy2arr264 := z.EncBasicHandle().StructToArray
			var yyq264 [5]bool
			_, _, _ = yysep264, yyq264, yy2arr264
			const yyr264 bool = false
			yyq264[0] = x.Kind != ""
			yyq264[1] = x.APIVersion != ""
			yyq264[2] = true
			var yynn264 int
			if yyr264 || yy2arr264 {
				r.EncodeArrayStart(5)
			} else {
				yynn264 = 2
				for _, b := range yyq264 {
					if b {
						yynn264++
					}
				}
				r.EncodeMapStart(yynn264)
				yynn264 = 0
			}
			if yyr264 || yy2arr264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq264[0] {
					yym266 := z.EncBinary()
					_ = yym266
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq264[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym267 := z.EncBinary()
					_ = yym267
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr264 || yy2arr264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq264[1] {
					yym269 := z.EncBinary()
					_ = yym269
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq264[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym270 := z.EncBinary()
					_ = yym270
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr264 || yy2arr264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq264[2] {
					yy272 := &x.ObjectMeta
					yym273 := z.EncBinary()
					_ = yym273
					if false {
					} else if z.HasExtensions() && z.EncExt(yy272) {
					} else {
						z.EncFallback(yy272)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq264[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy274 := &x.ObjectMeta
					yym275 := z.EncBinary()
					_ = yym275
					if false {
					} else if z.HasExtensions() && z.EncExt(yy274) {
					} else {
						z.EncFallback(yy274)
					}
				}
			}
			if yyr264 || yy2arr264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subjects == nil {
					r.EncodeNil()
				} else {
					yym277 := z.EncBinary()
					_ = yym277
					if false {
					} else {
						h.encSliceSubject(([]Subject)(x.Subjects), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("subjects"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subjects == nil {
					r.EncodeNil()
				} else {
					yym278 := z.EncBinary()
					_ = yym278
					if false {
					} else {
						h.encSliceSubject(([]Subject)(x.Subjects), e)
					}
				}
			}
			if yyr264 || yy2arr264 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy280 := &x.RoleRef
				yy280.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("roleRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy281 := &x.RoleRef
				yy281.CodecEncodeSelf(e)
			}
			if yyr264 || yy2arr264 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterRoleBinding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym282 := z.DecBinary()
	_ = yym282
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct283 := r.ContainerType()
		if yyct283 == codecSelferValueTypeMap1234 {
			yyl283 := r.ReadMapStart()
			if yyl283 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl283, d)
			}
		} else if yyct283 == codecSelferValueTypeArray1234 {
			yyl283 := r.ReadArrayStart()
			if yyl283 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl283, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterRoleBinding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys284Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys284Slc
	var yyhl284 bool = l >= 0
	for yyj284 := 0; ; yyj284++ {
		if yyhl284 {
			if yyj284 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys284Slc = r.DecodeBytes(yys284Slc, true, true)
		yys284 := string(yys284Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys284 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg3_v1.ObjectMeta{}
			} else {
				yyv287 := &x.ObjectMeta
				yym288 := z.DecBinary()
				_ = yym288
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv287) {
				} else {
					z.DecFallback(yyv287, false)
				}
			}
		case "subjects":
			if r.TryDecodeAsNil() {
				x.Subjects = nil
			} else {
				yyv289 := &x.Subjects
				yym290 := z.DecBinary()
				_ = yym290
				if false {
				} else {
					h.decSliceSubject((*[]Subject)(yyv289), d)
				}
			}
		case "roleRef":
			if r.TryDecodeAsNil() {
				x.RoleRef = RoleRef{}
			} else {
				yyv291 := &x.RoleRef
				yyv291.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys284)
		} // end switch yys284
	} // end for yyj284
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterRoleBinding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj292 int
	var yyb292 bool
	var yyhl292 bool = l >= 0
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg3_v1.ObjectMeta{}
	} else {
		yyv295 := &x.ObjectMeta
		yym296 := z.DecBinary()
		_ = yym296
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv295) {
		} else {
			z.DecFallback(yyv295, false)
		}
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subjects = nil
	} else {
		yyv297 := &x.Subjects
		yym298 := z.DecBinary()
		_ = yym298
		if false {
		} else {
			h.decSliceSubject((*[]Subject)(yyv297), d)
		}
	}
	yyj292++
	if yyhl292 {
		yyb292 = yyj292 > l
	} else {
		yyb292 = r.CheckBreak()
	}
	if yyb292 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RoleRef = RoleRef{}
	} else {
		yyv299 := &x.RoleRef
		yyv299.CodecDecodeSelf(d)
	}
	for {
		yyj292++
		if yyhl292 {
			yyb292 = yyj292 > l
		} else {
			yyb292 = r.CheckBreak()
		}
		if yyb292 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj292-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterRoleBindingList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym300 := z.EncBinary()
		_ = yym300
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep301 := !z.EncBinary()
			yy2arr301 := z.EncBasicHandle().StructToArray
			var yyq301 [4]bool
			_, _, _ = yysep301, yyq301, yy2arr301
			const yyr301 bool = false
			yyq301[0] = x.Kind != ""
			yyq301[1] = x.APIVersion != ""
			yyq301[2] = true
			var yynn301 int
			if yyr301 || yy2arr301 {
				r.EncodeArrayStart(4)
			} else {
				yynn301 = 1
				for _, b := range yyq301 {
					if b {
						yynn301++
					}
				}
				r.EncodeMapStart(yynn301)
				yynn301 = 0
			}
			if yyr301 || yy2arr301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq301[0] {
					yym303 := z.EncBinary()
					_ = yym303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq301[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym304 := z.EncBinary()
					_ = yym304
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr301 || yy2arr301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq301[1] {
					yym306 := z.EncBinary()
					_ = yym306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq301[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym307 := z.EncBinary()
					_ = yym307
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr301 || yy2arr301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq301[2] {
					yy309 := &x.ListMeta
					yym310 := z.EncBinary()
					_ = yym310
					if false {
					} else if z.HasExtensions() && z.EncExt(yy309) {
					} else {
						z.EncFallback(yy309)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq301[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy311 := &x.ListMeta
					yym312 := z.EncBinary()
					_ = yym312
					if false {
					} else if z.HasExtensions() && z.EncExt(yy311) {
					} else {
						z.EncFallback(yy311)
					}
				}
			}
			if yyr301 || yy2arr301 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym314 := z.EncBinary()
					_ = yym314
					if false {
					} else {
						h.encSliceClusterRoleBinding(([]ClusterRoleBinding)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym315 := z.EncBinary()
					_ = yym315
					if false {
					} else {
						h.encSliceClusterRoleBinding(([]ClusterRoleBinding)(x.Items), e)
					}
				}
			}
			if yyr301 || yy2arr301 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterRoleBindingList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym316 := z.DecBinary()
	_ = yym316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct317 := r.ContainerType()
		if yyct317 == codecSelferValueTypeMap1234 {
			yyl317 := r.ReadMapStart()
			if yyl317 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl317, d)
			}
		} else if yyct317 == codecSelferValueTypeArray1234 {
			yyl317 := r.ReadArrayStart()
			if yyl317 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl317, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterRoleBindingList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys318Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys318Slc
	var yyhl318 bool = l >= 0
	for yyj318 := 0; ; yyj318++ {
		if yyhl318 {
			if yyj318 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys318Slc = r.DecodeBytes(yys318Slc, true, true)
		yys318 := string(yys318Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys318 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv321 := &x.ListMeta
				yym322 := z.DecBinary()
				_ = yym322
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv321) {
				} else {
					z.DecFallback(yyv321, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv323 := &x.Items
				yym324 := z.DecBinary()
				_ = yym324
				if false {
				} else {
					h.decSliceClusterRoleBinding((*[]ClusterRoleBinding)(yyv323), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys318)
		} // end switch yys318
	} // end for yyj318
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterRoleBindingList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj325 int
	var yyb325 bool
	var yyhl325 bool = l >= 0
	yyj325++
	if yyhl325 {
		yyb325 = yyj325 > l
	} else {
		yyb325 = r.CheckBreak()
	}
	if yyb325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj325++
	if yyhl325 {
		yyb325 = yyj325 > l
	} else {
		yyb325 = r.CheckBreak()
	}
	if yyb325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj325++
	if yyhl325 {
		yyb325 = yyj325 > l
	} else {
		yyb325 = r.CheckBreak()
	}
	if yyb325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv328 := &x.ListMeta
		yym329 := z.DecBinary()
		_ = yym329
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv328) {
		} else {
			z.DecFallback(yyv328, false)
		}
	}
	yyj325++
	if yyhl325 {
		yyb325 = yyj325 > l
	} else {
		yyb325 = r.CheckBreak()
	}
	if yyb325 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv330 := &x.Items
		yym331 := z.DecBinary()
		_ = yym331
		if false {
		} else {
			h.decSliceClusterRoleBinding((*[]ClusterRoleBinding)(yyv330), d)
		}
	}
	for {
		yyj325++
		if yyhl325 {
			yyb325 = yyj325 > l
		} else {
			yyb325 = r.CheckBreak()
		}
		if yyb325 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj325-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterRoleList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym332 := z.EncBinary()
		_ = yym332
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep333 := !z.EncBinary()
			yy2arr333 := z.EncBasicHandle().StructToArray
			var yyq333 [4]bool
			_, _, _ = yysep333, yyq333, yy2arr333
			const yyr333 bool = false
			yyq333[0] = x.Kind != ""
			yyq333[1] = x.APIVersion != ""
			yyq333[2] = true
			var yynn333 int
			if yyr333 || yy2arr333 {
				r.EncodeArrayStart(4)
			} else {
				yynn333 = 1
				for _, b := range yyq333 {
					if b {
						yynn333++
					}
				}
				r.EncodeMapStart(yynn333)
				yynn333 = 0
			}
			if yyr333 || yy2arr333 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq333[0] {
					yym335 := z.EncBinary()
					_ = yym335
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq333[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym336 := z.EncBinary()
					_ = yym336
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr333 || yy2arr333 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq333[1] {
					yym338 := z.EncBinary()
					_ = yym338
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq333[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym339 := z.EncBinary()
					_ = yym339
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr333 || yy2arr333 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq333[2] {
					yy341 := &x.ListMeta
					yym342 := z.EncBinary()
					_ = yym342
					if false {
					} else if z.HasExtensions() && z.EncExt(yy341) {
					} else {
						z.EncFallback(yy341)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq333[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy343 := &x.ListMeta
					yym344 := z.EncBinary()
					_ = yym344
					if false {
					} else if z.HasExtensions() && z.EncExt(yy343) {
					} else {
						z.EncFallback(yy343)
					}
				}
			}
			if yyr333 || yy2arr333 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym346 := z.EncBinary()
					_ = yym346
					if false {
					} else {
						h.encSliceClusterRole(([]ClusterRole)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym347 := z.EncBinary()
					_ = yym347
					if false {
					} else {
						h.encSliceClusterRole(([]ClusterRole)(x.Items), e)
					}
				}
			}
			if yyr333 || yy2arr333 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterRoleList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym348 := z.DecBinary()
	_ = yym348
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct349 := r.ContainerType()
		if yyct349 == codecSelferValueTypeMap1234 {
			yyl349 := r.ReadMapStart()
			if yyl349 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl349, d)
			}
		} else if yyct349 == codecSelferValueTypeArray1234 {
			yyl349 := r.ReadArrayStart()
			if yyl349 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl349, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterRoleList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys350Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys350Slc
	var yyhl350 bool = l >= 0
	for yyj350 := 0; ; yyj350++ {
		if yyhl350 {
			if yyj350 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys350Slc = r.DecodeBytes(yys350Slc, true, true)
		yys350 := string(yys350Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys350 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv353 := &x.ListMeta
				yym354 := z.DecBinary()
				_ = yym354
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv353) {
				} else {
					z.DecFallback(yyv353, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv355 := &x.Items
				yym356 := z.DecBinary()
				_ = yym356
				if false {
				} else {
					h.decSliceClusterRole((*[]ClusterRole)(yyv355), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys350)
		} // end switch yys350
	} // end for yyj350
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterRoleList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj357 int
	var yyb357 bool
	var yyhl357 bool = l >= 0
	yyj357++
	if yyhl357 {
		yyb357 = yyj357 > l
	} else {
		yyb357 = r.CheckBreak()
	}
	if yyb357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj357++
	if yyhl357 {
		yyb357 = yyj357 > l
	} else {
		yyb357 = r.CheckBreak()
	}
	if yyb357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj357++
	if yyhl357 {
		yyb357 = yyj357 > l
	} else {
		yyb357 = r.CheckBreak()
	}
	if yyb357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv360 := &x.ListMeta
		yym361 := z.DecBinary()
		_ = yym361
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv360) {
		} else {
			z.DecFallback(yyv360, false)
		}
	}
	yyj357++
	if yyhl357 {
		yyb357 = yyj357 > l
	} else {
		yyb357 = r.CheckBreak()
	}
	if yyb357 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv362 := &x.Items
		yym363 := z.DecBinary()
		_ = yym363
		if false {
		} else {
			h.decSliceClusterRole((*[]ClusterRole)(yyv362), d)
		}
	}
	for {
		yyj357++
		if yyhl357 {
			yyb357 = yyj357 > l
		} else {
			yyb357 = r.CheckBreak()
		}
		if yyb357 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj357-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSlicePolicyRule(v []PolicyRule, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv364 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy365 := &yyv364
		yy365.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePolicyRule(v *[]PolicyRule, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv366 := *v
	yyh366, yyl366 := z.DecSliceHelperStart()
	var yyc366 bool
	if yyl366 == 0 {
		if yyv366 == nil {
			yyv366 = []PolicyRule{}
			yyc366 = true
		} else if len(yyv366) != 0 {
			yyv366 = yyv366[:0]
			yyc366 = true
		}
	} else if yyl366 > 0 {
		var yyrr366, yyrl366 int
		var yyrt366 bool
		if yyl366 > cap(yyv366) {

			yyrg366 := len(yyv366) > 0
			yyv2366 := yyv366
			yyrl366, yyrt366 = z.DecInferLen(yyl366, z.DecBasicHandle().MaxInitLen, 160)
			if yyrt366 {
				if yyrl366 <= cap(yyv366) {
					yyv366 = yyv366[:yyrl366]
				} else {
					yyv366 = make([]PolicyRule, yyrl366)
				}
			} else {
				yyv366 = make([]PolicyRule, yyrl366)
			}
			yyc366 = true
			yyrr366 = len(yyv366)
			if yyrg366 {
				copy(yyv366, yyv2366)
			}
		} else if yyl366 != len(yyv366) {
			yyv366 = yyv366[:yyl366]
			yyc366 = true
		}
		yyj366 := 0
		for ; yyj366 < yyrr366; yyj366++ {
			yyh366.ElemContainerState(yyj366)
			if r.TryDecodeAsNil() {
				yyv366[yyj366] = PolicyRule{}
			} else {
				yyv367 := &yyv366[yyj366]
				yyv367.CodecDecodeSelf(d)
			}

		}
		if yyrt366 {
			for ; yyj366 < yyl366; yyj366++ {
				yyv366 = append(yyv366, PolicyRule{})
				yyh366.ElemContainerState(yyj366)
				if r.TryDecodeAsNil() {
					yyv366[yyj366] = PolicyRule{}
				} else {
					yyv368 := &yyv366[yyj366]
					yyv368.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj366 := 0
		for ; !r.CheckBreak(); yyj366++ {

			if yyj366 >= len(yyv366) {
				yyv366 = append(yyv366, PolicyRule{}) // var yyz366 PolicyRule
				yyc366 = true
			}
			yyh366.ElemContainerState(yyj366)
			if yyj366 < len(yyv366) {
				if r.TryDecodeAsNil() {
					yyv366[yyj366] = PolicyRule{}
				} else {
					yyv369 := &yyv366[yyj366]
					yyv369.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj366 < len(yyv366) {
			yyv366 = yyv366[:yyj366]
			yyc366 = true
		} else if yyj366 == 0 && yyv366 == nil {
			yyv366 = []PolicyRule{}
			yyc366 = true
		}
	}
	yyh366.End()
	if yyc366 {
		*v = yyv366
	}
}

func (x codecSelfer1234) encSliceSubject(v []Subject, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv370 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy371 := &yyv370
		yy371.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSubject(v *[]Subject, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv372 := *v
	yyh372, yyl372 := z.DecSliceHelperStart()
	var yyc372 bool
	if yyl372 == 0 {
		if yyv372 == nil {
			yyv372 = []Subject{}
			yyc372 = true
		} else if len(yyv372) != 0 {
			yyv372 = yyv372[:0]
			yyc372 = true
		}
	} else if yyl372 > 0 {
		var yyrr372, yyrl372 int
		var yyrt372 bool
		if yyl372 > cap(yyv372) {

			yyrg372 := len(yyv372) > 0
			yyv2372 := yyv372
			yyrl372, yyrt372 = z.DecInferLen(yyl372, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt372 {
				if yyrl372 <= cap(yyv372) {
					yyv372 = yyv372[:yyrl372]
				} else {
					yyv372 = make([]Subject, yyrl372)
				}
			} else {
				yyv372 = make([]Subject, yyrl372)
			}
			yyc372 = true
			yyrr372 = len(yyv372)
			if yyrg372 {
				copy(yyv372, yyv2372)
			}
		} else if yyl372 != len(yyv372) {
			yyv372 = yyv372[:yyl372]
			yyc372 = true
		}
		yyj372 := 0
		for ; yyj372 < yyrr372; yyj372++ {
			yyh372.ElemContainerState(yyj372)
			if r.TryDecodeAsNil() {
				yyv372[yyj372] = Subject{}
			} else {
				yyv373 := &yyv372[yyj372]
				yyv373.CodecDecodeSelf(d)
			}

		}
		if yyrt372 {
			for ; yyj372 < yyl372; yyj372++ {
				yyv372 = append(yyv372, Subject{})
				yyh372.ElemContainerState(yyj372)
				if r.TryDecodeAsNil() {
					yyv372[yyj372] = Subject{}
				} else {
					yyv374 := &yyv372[yyj372]
					yyv374.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj372 := 0
		for ; !r.CheckBreak(); yyj372++ {

			if yyj372 >= len(yyv372) {
				yyv372 = append(yyv372, Subject{}) // var yyz372 Subject
				yyc372 = true
			}
			yyh372.ElemContainerState(yyj372)
			if yyj372 < len(yyv372) {
				if r.TryDecodeAsNil() {
					yyv372[yyj372] = Subject{}
				} else {
					yyv375 := &yyv372[yyj372]
					yyv375.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj372 < len(yyv372) {
			yyv372 = yyv372[:yyj372]
			yyc372 = true
		} else if yyj372 == 0 && yyv372 == nil {
			yyv372 = []Subject{}
			yyc372 = true
		}
	}
	yyh372.End()
	if yyc372 {
		*v = yyv372
	}
}

func (x codecSelfer1234) encSliceRoleBinding(v []RoleBinding, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv376 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy377 := &yyv376
		yy377.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceRoleBinding(v *[]RoleBinding, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv378 := *v
	yyh378, yyl378 := z.DecSliceHelperStart()
	var yyc378 bool
	if yyl378 == 0 {
		if yyv378 == nil {
			yyv378 = []RoleBinding{}
			yyc378 = true
		} else if len(yyv378) != 0 {
			yyv378 = yyv378[:0]
			yyc378 = true
		}
	} else if yyl378 > 0 {
		var yyrr378, yyrl378 int
		var yyrt378 bool
		if yyl378 > cap(yyv378) {

			yyrg378 := len(yyv378) > 0
			yyv2378 := yyv378
			yyrl378, yyrt378 = z.DecInferLen(yyl378, z.DecBasicHandle().MaxInitLen, 328)
			if yyrt378 {
				if yyrl378 <= cap(yyv378) {
					yyv378 = yyv378[:yyrl378]
				} else {
					yyv378 = make([]RoleBinding, yyrl378)
				}
			} else {
				yyv378 = make([]RoleBinding, yyrl378)
			}
			yyc378 = true
			yyrr378 = len(yyv378)
			if yyrg378 {
				copy(yyv378, yyv2378)
			}
		} else if yyl378 != len(yyv378) {
			yyv378 = yyv378[:yyl378]
			yyc378 = true
		}
		yyj378 := 0
		for ; yyj378 < yyrr378; yyj378++ {
			yyh378.ElemContainerState(yyj378)
			if r.TryDecodeAsNil() {
				yyv378[yyj378] = RoleBinding{}
			} else {
				yyv379 := &yyv378[yyj378]
				yyv379.CodecDecodeSelf(d)
			}

		}
		if yyrt378 {
			for ; yyj378 < yyl378; yyj378++ {
				yyv378 = append(yyv378, RoleBinding{})
				yyh378.ElemContainerState(yyj378)
				if r.TryDecodeAsNil() {
					yyv378[yyj378] = RoleBinding{}
				} else {
					yyv380 := &yyv378[yyj378]
					yyv380.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj378 := 0
		for ; !r.CheckBreak(); yyj378++ {

			if yyj378 >= len(yyv378) {
				yyv378 = append(yyv378, RoleBinding{}) // var yyz378 RoleBinding
				yyc378 = true
			}
			yyh378.ElemContainerState(yyj378)
			if yyj378 < len(yyv378) {
				if r.TryDecodeAsNil() {
					yyv378[yyj378] = RoleBinding{}
				} else {
					yyv381 := &yyv378[yyj378]
					yyv381.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj378 < len(yyv378) {
			yyv378 = yyv378[:yyj378]
			yyc378 = true
		} else if yyj378 == 0 && yyv378 == nil {
			yyv378 = []RoleBinding{}
			yyc378 = true
		}
	}
	yyh378.End()
	if yyc378 {
		*v = yyv378
	}
}

func (x codecSelfer1234) encSliceRole(v []Role, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv382 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy383 := &yyv382
		yy383.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceRole(v *[]Role, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv384 := *v
	yyh384, yyl384 := z.DecSliceHelperStart()
	var yyc384 bool
	if yyl384 == 0 {
		if yyv384 == nil {
			yyv384 = []Role{}
			yyc384 = true
		} else if len(yyv384) != 0 {
			yyv384 = yyv384[:0]
			yyc384 = true
		}
	} else if yyl384 > 0 {
		var yyrr384, yyrl384 int
		var yyrt384 bool
		if yyl384 > cap(yyv384) {

			yyrg384 := len(yyv384) > 0
			yyv2384 := yyv384
			yyrl384, yyrt384 = z.DecInferLen(yyl384, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt384 {
				if yyrl384 <= cap(yyv384) {
					yyv384 = yyv384[:yyrl384]
				} else {
					yyv384 = make([]Role, yyrl384)
				}
			} else {
				yyv384 = make([]Role, yyrl384)
			}
			yyc384 = true
			yyrr384 = len(yyv384)
			if yyrg384 {
				copy(yyv384, yyv2384)
			}
		} else if yyl384 != len(yyv384) {
			yyv384 = yyv384[:yyl384]
			yyc384 = true
		}
		yyj384 := 0
		for ; yyj384 < yyrr384; yyj384++ {
			yyh384.ElemContainerState(yyj384)
			if r.TryDecodeAsNil() {
				yyv384[yyj384] = Role{}
			} else {
				yyv385 := &yyv384[yyj384]
				yyv385.CodecDecodeSelf(d)
			}

		}
		if yyrt384 {
			for ; yyj384 < yyl384; yyj384++ {
				yyv384 = append(yyv384, Role{})
				yyh384.ElemContainerState(yyj384)
				if r.TryDecodeAsNil() {
					yyv384[yyj384] = Role{}
				} else {
					yyv386 := &yyv384[yyj384]
					yyv386.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj384 := 0
		for ; !r.CheckBreak(); yyj384++ {

			if yyj384 >= len(yyv384) {
				yyv384 = append(yyv384, Role{}) // var yyz384 Role
				yyc384 = true
			}
			yyh384.ElemContainerState(yyj384)
			if yyj384 < len(yyv384) {
				if r.TryDecodeAsNil() {
					yyv384[yyj384] = Role{}
				} else {
					yyv387 := &yyv384[yyj384]
					yyv387.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj384 < len(yyv384) {
			yyv384 = yyv384[:yyj384]
			yyc384 = true
		} else if yyj384 == 0 && yyv384 == nil {
			yyv384 = []Role{}
			yyc384 = true
		}
	}
	yyh384.End()
	if yyc384 {
		*v = yyv384
	}
}

func (x codecSelfer1234) encSliceClusterRoleBinding(v []ClusterRoleBinding, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv388 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy389 := &yyv388
		yy389.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterRoleBinding(v *[]ClusterRoleBinding, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv390 := *v
	yyh390, yyl390 := z.DecSliceHelperStart()
	var yyc390 bool
	if yyl390 == 0 {
		if yyv390 == nil {
			yyv390 = []ClusterRoleBinding{}
			yyc390 = true
		} else if len(yyv390) != 0 {
			yyv390 = yyv390[:0]
			yyc390 = true
		}
	} else if yyl390 > 0 {
		var yyrr390, yyrl390 int
		var yyrt390 bool
		if yyl390 > cap(yyv390) {

			yyrg390 := len(yyv390) > 0
			yyv2390 := yyv390
			yyrl390, yyrt390 = z.DecInferLen(yyl390, z.DecBasicHandle().MaxInitLen, 328)
			if yyrt390 {
				if yyrl390 <= cap(yyv390) {
					yyv390 = yyv390[:yyrl390]
				} else {
					yyv390 = make([]ClusterRoleBinding, yyrl390)
				}
			} else {
				yyv390 = make([]ClusterRoleBinding, yyrl390)
			}
			yyc390 = true
			yyrr390 = len(yyv390)
			if yyrg390 {
				copy(yyv390, yyv2390)
			}
		} else if yyl390 != len(yyv390) {
			yyv390 = yyv390[:yyl390]
			yyc390 = true
		}
		yyj390 := 0
		for ; yyj390 < yyrr390; yyj390++ {
			yyh390.ElemContainerState(yyj390)
			if r.TryDecodeAsNil() {
				yyv390[yyj390] = ClusterRoleBinding{}
			} else {
				yyv391 := &yyv390[yyj390]
				yyv391.CodecDecodeSelf(d)
			}

		}
		if yyrt390 {
			for ; yyj390 < yyl390; yyj390++ {
				yyv390 = append(yyv390, ClusterRoleBinding{})
				yyh390.ElemContainerState(yyj390)
				if r.TryDecodeAsNil() {
					yyv390[yyj390] = ClusterRoleBinding{}
				} else {
					yyv392 := &yyv390[yyj390]
					yyv392.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj390 := 0
		for ; !r.CheckBreak(); yyj390++ {

			if yyj390 >= len(yyv390) {
				yyv390 = append(yyv390, ClusterRoleBinding{}) // var yyz390 ClusterRoleBinding
				yyc390 = true
			}
			yyh390.ElemContainerState(yyj390)
			if yyj390 < len(yyv390) {
				if r.TryDecodeAsNil() {
					yyv390[yyj390] = ClusterRoleBinding{}
				} else {
					yyv393 := &yyv390[yyj390]
					yyv393.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj390 < len(yyv390) {
			yyv390 = yyv390[:yyj390]
			yyc390 = true
		} else if yyj390 == 0 && yyv390 == nil {
			yyv390 = []ClusterRoleBinding{}
			yyc390 = true
		}
	}
	yyh390.End()
	if yyc390 {
		*v = yyv390
	}
}

func (x codecSelfer1234) encSliceClusterRole(v []ClusterRole, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv394 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy395 := &yyv394
		yy395.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterRole(v *[]ClusterRole, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv396 := *v
	yyh396, yyl396 := z.DecSliceHelperStart()
	var yyc396 bool
	if yyl396 == 0 {
		if yyv396 == nil {
			yyv396 = []ClusterRole{}
			yyc396 = true
		} else if len(yyv396) != 0 {
			yyv396 = yyv396[:0]
			yyc396 = true
		}
	} else if yyl396 > 0 {
		var yyrr396, yyrl396 int
		var yyrt396 bool
		if yyl396 > cap(yyv396) {

			yyrg396 := len(yyv396) > 0
			yyv2396 := yyv396
			yyrl396, yyrt396 = z.DecInferLen(yyl396, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt396 {
				if yyrl396 <= cap(yyv396) {
					yyv396 = yyv396[:yyrl396]
				} else {
					yyv396 = make([]ClusterRole, yyrl396)
				}
			} else {
				yyv396 = make([]ClusterRole, yyrl396)
			}
			yyc396 = true
			yyrr396 = len(yyv396)
			if yyrg396 {
				copy(yyv396, yyv2396)
			}
		} else if yyl396 != len(yyv396) {
			yyv396 = yyv396[:yyl396]
			yyc396 = true
		}
		yyj396 := 0
		for ; yyj396 < yyrr396; yyj396++ {
			yyh396.ElemContainerState(yyj396)
			if r.TryDecodeAsNil() {
				yyv396[yyj396] = ClusterRole{}
			} else {
				yyv397 := &yyv396[yyj396]
				yyv397.CodecDecodeSelf(d)
			}

		}
		if yyrt396 {
			for ; yyj396 < yyl396; yyj396++ {
				yyv396 = append(yyv396, ClusterRole{})
				yyh396.ElemContainerState(yyj396)
				if r.TryDecodeAsNil() {
					yyv396[yyj396] = ClusterRole{}
				} else {
					yyv398 := &yyv396[yyj396]
					yyv398.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj396 := 0
		for ; !r.CheckBreak(); yyj396++ {

			if yyj396 >= len(yyv396) {
				yyv396 = append(yyv396, ClusterRole{}) // var yyz396 ClusterRole
				yyc396 = true
			}
			yyh396.ElemContainerState(yyj396)
			if yyj396 < len(yyv396) {
				if r.TryDecodeAsNil() {
					yyv396[yyj396] = ClusterRole{}
				} else {
					yyv399 := &yyv396[yyj396]
					yyv399.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj396 < len(yyv396) {
			yyv396 = yyv396[:yyj396]
			yyc396 = true
		} else if yyj396 == 0 && yyv396 == nil {
			yyv396 = []ClusterRole{}
			yyc396 = true
		}
	}
	yyh396.End()
	if yyc396 {
		*v = yyv396
	}
}
