/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package federation

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg1_api "k8s.io/kubernetes/pkg/api"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg3_types "k8s.io/kubernetes/pkg/types"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg1_api.LocalObjectReference
		var v1 pkg2_unversioned.Time
		var v2 pkg3_types.UID
		var v3 time.Time
		_, _, _, _ = v0, v1, v2, v3
	}
}

func (x *ServerAddressByClientCIDR) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [2]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(2)
			} else {
				yynn2 = 2
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClientCIDR))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("clientCIDR"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClientCIDR))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServerAddress))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serverAddress"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServerAddress))
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServerAddressByClientCIDR) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym9 := z.DecBinary()
	_ = yym9
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct10 := r.ContainerType()
		if yyct10 == codecSelferValueTypeMap1234 {
			yyl10 := r.ReadMapStart()
			if yyl10 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl10, d)
			}
		} else if yyct10 == codecSelferValueTypeArray1234 {
			yyl10 := r.ReadArrayStart()
			if yyl10 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl10, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServerAddressByClientCIDR) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys11Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys11Slc
	var yyhl11 bool = l >= 0
	for yyj11 := 0; ; yyj11++ {
		if yyhl11 {
			if yyj11 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys11Slc = r.DecodeBytes(yys11Slc, true, true)
		yys11 := string(yys11Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys11 {
		case "clientCIDR":
			if r.TryDecodeAsNil() {
				x.ClientCIDR = ""
			} else {
				x.ClientCIDR = string(r.DecodeString())
			}
		case "serverAddress":
			if r.TryDecodeAsNil() {
				x.ServerAddress = ""
			} else {
				x.ServerAddress = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys11)
		} // end switch yys11
	} // end for yyj11
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServerAddressByClientCIDR) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj14 int
	var yyb14 bool
	var yyhl14 bool = l >= 0
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClientCIDR = ""
	} else {
		x.ClientCIDR = string(r.DecodeString())
	}
	yyj14++
	if yyhl14 {
		yyb14 = yyj14 > l
	} else {
		yyb14 = r.CheckBreak()
	}
	if yyb14 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServerAddress = ""
	} else {
		x.ServerAddress = string(r.DecodeString())
	}
	for {
		yyj14++
		if yyhl14 {
			yyb14 = yyj14 > l
		} else {
			yyb14 = r.CheckBreak()
		}
		if yyb14 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj14-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym17 := z.EncBinary()
		_ = yym17
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep18 := !z.EncBinary()
			yy2arr18 := z.EncBasicHandle().StructToArray
			var yyq18 [2]bool
			_, _, _ = yysep18, yyq18, yy2arr18
			const yyr18 bool = false
			yyq18[1] = x.SecretRef != nil
			var yynn18 int
			if yyr18 || yy2arr18 {
				r.EncodeArrayStart(2)
			} else {
				yynn18 = 1
				for _, b := range yyq18 {
					if b {
						yynn18++
					}
				}
				r.EncodeMapStart(yynn18)
				yynn18 = 0
			}
			if yyr18 || yy2arr18 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.ServerAddressByClientCIDRs == nil {
					r.EncodeNil()
				} else {
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						h.encSliceServerAddressByClientCIDR(([]ServerAddressByClientCIDR)(x.ServerAddressByClientCIDRs), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serverAddressByClientCIDRs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.ServerAddressByClientCIDRs == nil {
					r.EncodeNil()
				} else {
					yym21 := z.EncBinary()
					_ = yym21
					if false {
					} else {
						h.encSliceServerAddressByClientCIDR(([]ServerAddressByClientCIDR)(x.ServerAddressByClientCIDRs), e)
					}
				}
			}
			if yyr18 || yy2arr18 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq18[1] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						yym23 := z.EncBinary()
						_ = yym23
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SecretRef) {
						} else {
							z.EncFallback(x.SecretRef)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq18[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						yym24 := z.EncBinary()
						_ = yym24
						if false {
						} else if z.HasExtensions() && z.EncExt(x.SecretRef) {
						} else {
							z.EncFallback(x.SecretRef)
						}
					}
				}
			}
			if yyr18 || yy2arr18 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym25 := z.DecBinary()
	_ = yym25
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct26 := r.ContainerType()
		if yyct26 == codecSelferValueTypeMap1234 {
			yyl26 := r.ReadMapStart()
			if yyl26 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl26, d)
			}
		} else if yyct26 == codecSelferValueTypeArray1234 {
			yyl26 := r.ReadArrayStart()
			if yyl26 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl26, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys27Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys27Slc
	var yyhl27 bool = l >= 0
	for yyj27 := 0; ; yyj27++ {
		if yyhl27 {
			if yyj27 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys27Slc = r.DecodeBytes(yys27Slc, true, true)
		yys27 := string(yys27Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys27 {
		case "serverAddressByClientCIDRs":
			if r.TryDecodeAsNil() {
				x.ServerAddressByClientCIDRs = nil
			} else {
				yyv28 := &x.ServerAddressByClientCIDRs
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					h.decSliceServerAddressByClientCIDR((*[]ServerAddressByClientCIDR)(yyv28), d)
				}
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(pkg1_api.LocalObjectReference)
				}
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SecretRef) {
				} else {
					z.DecFallback(x.SecretRef, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys27)
		} // end switch yys27
	} // end for yyj27
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj32 int
	var yyb32 bool
	var yyhl32 bool = l >= 0
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServerAddressByClientCIDRs = nil
	} else {
		yyv33 := &x.ServerAddressByClientCIDRs
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			h.decSliceServerAddressByClientCIDR((*[]ServerAddressByClientCIDR)(yyv33), d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(pkg1_api.LocalObjectReference)
		}
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SecretRef) {
		} else {
			z.DecFallback(x.SecretRef, false)
		}
	}
	for {
		yyj32++
		if yyhl32 {
			yyb32 = yyj32 > l
		} else {
			yyb32 = r.CheckBreak()
		}
		if yyb32 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj32-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ClusterConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym37 := z.EncBinary()
	_ = yym37
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ClusterConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym38 := z.DecBinary()
	_ = yym38
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ClusterCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym39 := z.EncBinary()
		_ = yym39
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep40 := !z.EncBinary()
			yy2arr40 := z.EncBasicHandle().StructToArray
			var yyq40 [6]bool
			_, _, _ = yysep40, yyq40, yy2arr40
			const yyr40 bool = false
			yyq40[2] = true
			yyq40[3] = true
			yyq40[4] = x.Reason != ""
			yyq40[5] = x.Message != ""
			var yynn40 int
			if yyr40 || yy2arr40 {
				r.EncodeArrayStart(6)
			} else {
				yynn40 = 2
				for _, b := range yyq40 {
					if b {
						yynn40++
					}
				}
				r.EncodeMapStart(yynn40)
				yynn40 = 0
			}
			if yyr40 || yy2arr40 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr40 || yy2arr40 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Status) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Status))
				}
			}
			if yyr40 || yy2arr40 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq40[2] {
					yy46 := &x.LastProbeTime
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else if z.HasExtensions() && z.EncExt(yy46) {
					} else if yym47 {
						z.EncBinaryMarshal(yy46)
					} else if !yym47 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy46)
					} else {
						z.EncFallback(yy46)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq40[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy48 := &x.LastProbeTime
					yym49 := z.EncBinary()
					_ = yym49
					if false {
					} else if z.HasExtensions() && z.EncExt(yy48) {
					} else if yym49 {
						z.EncBinaryMarshal(yy48)
					} else if !yym49 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy48)
					} else {
						z.EncFallback(yy48)
					}
				}
			}
			if yyr40 || yy2arr40 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq40[3] {
					yy51 := &x.LastTransitionTime
					yym52 := z.EncBinary()
					_ = yym52
					if false {
					} else if z.HasExtensions() && z.EncExt(yy51) {
					} else if yym52 {
						z.EncBinaryMarshal(yy51)
					} else if !yym52 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy51)
					} else {
						z.EncFallback(yy51)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq40[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy53 := &x.LastTransitionTime
					yym54 := z.EncBinary()
					_ = yym54
					if false {
					} else if z.HasExtensions() && z.EncExt(yy53) {
					} else if yym54 {
						z.EncBinaryMarshal(yy53)
					} else if !yym54 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy53)
					} else {
						z.EncFallback(yy53)
					}
				}
			}
			if yyr40 || yy2arr40 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq40[4] {
					yym56 := z.EncBinary()
					_ = yym56
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq40[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym57 := z.EncBinary()
					_ = yym57
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr40 || yy2arr40 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq40[5] {
					yym59 := z.EncBinary()
					_ = yym59
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq40[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym60 := z.EncBinary()
					_ = yym60
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr40 || yy2arr40 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym61 := z.DecBinary()
	_ = yym61
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct62 := r.ContainerType()
		if yyct62 == codecSelferValueTypeMap1234 {
			yyl62 := r.ReadMapStart()
			if yyl62 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl62, d)
			}
		} else if yyct62 == codecSelferValueTypeArray1234 {
			yyl62 := r.ReadArrayStart()
			if yyl62 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl62, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys63Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys63Slc
	var yyhl63 bool = l >= 0
	for yyj63 := 0; ; yyj63++ {
		if yyhl63 {
			if yyj63 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys63Slc = r.DecodeBytes(yys63Slc, true, true)
		yys63 := string(yys63Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys63 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ClusterConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = pkg1_api.ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv66 := &x.LastProbeTime
				yym67 := z.DecBinary()
				_ = yym67
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv66) {
				} else if yym67 {
					z.DecBinaryUnmarshal(yyv66)
				} else if !yym67 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv66)
				} else {
					z.DecFallback(yyv66, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv68 := &x.LastTransitionTime
				yym69 := z.DecBinary()
				_ = yym69
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv68) {
				} else if yym69 {
					z.DecBinaryUnmarshal(yyv68)
				} else if !yym69 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv68)
				} else {
					z.DecFallback(yyv68, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys63)
		} // end switch yys63
	} // end for yyj63
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj72 int
	var yyb72 bool
	var yyhl72 bool = l >= 0
	yyj72++
	if yyhl72 {
		yyb72 = yyj72 > l
	} else {
		yyb72 = r.CheckBreak()
	}
	if yyb72 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ClusterConditionType(r.DecodeString())
	}
	yyj72++
	if yyhl72 {
		yyb72 = yyj72 > l
	} else {
		yyb72 = r.CheckBreak()
	}
	if yyb72 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = pkg1_api.ConditionStatus(r.DecodeString())
	}
	yyj72++
	if yyhl72 {
		yyb72 = yyj72 > l
	} else {
		yyb72 = r.CheckBreak()
	}
	if yyb72 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv75 := &x.LastProbeTime
		yym76 := z.DecBinary()
		_ = yym76
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv75) {
		} else if yym76 {
			z.DecBinaryUnmarshal(yyv75)
		} else if !yym76 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv75)
		} else {
			z.DecFallback(yyv75, false)
		}
	}
	yyj72++
	if yyhl72 {
		yyb72 = yyj72 > l
	} else {
		yyb72 = r.CheckBreak()
	}
	if yyb72 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv77 := &x.LastTransitionTime
		yym78 := z.DecBinary()
		_ = yym78
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv77) {
		} else if yym78 {
			z.DecBinaryUnmarshal(yyv77)
		} else if !yym78 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv77)
		} else {
			z.DecFallback(yyv77, false)
		}
	}
	yyj72++
	if yyhl72 {
		yyb72 = yyj72 > l
	} else {
		yyb72 = r.CheckBreak()
	}
	if yyb72 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj72++
	if yyhl72 {
		yyb72 = yyj72 > l
	} else {
		yyb72 = r.CheckBreak()
	}
	if yyb72 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj72++
		if yyhl72 {
			yyb72 = yyj72 > l
		} else {
			yyb72 = r.CheckBreak()
		}
		if yyb72 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj72-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym81 := z.EncBinary()
		_ = yym81
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep82 := !z.EncBinary()
			yy2arr82 := z.EncBasicHandle().StructToArray
			var yyq82 [3]bool
			_, _, _ = yysep82, yyq82, yy2arr82
			const yyr82 bool = false
			yyq82[0] = len(x.Conditions) != 0
			yyq82[1] = len(x.Zones) != 0
			yyq82[2] = x.Region != ""
			var yynn82 int
			if yyr82 || yy2arr82 {
				r.EncodeArrayStart(3)
			} else {
				yynn82 = 0
				for _, b := range yyq82 {
					if b {
						yynn82++
					}
				}
				r.EncodeMapStart(yynn82)
				yynn82 = 0
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[0] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym84 := z.EncBinary()
						_ = yym84
						if false {
						} else {
							h.encSliceClusterCondition(([]ClusterCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq82[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym85 := z.EncBinary()
						_ = yym85
						if false {
						} else {
							h.encSliceClusterCondition(([]ClusterCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[1] {
					if x.Zones == nil {
						r.EncodeNil()
					} else {
						yym87 := z.EncBinary()
						_ = yym87
						if false {
						} else {
							z.F.EncSliceStringV(x.Zones, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq82[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("zones"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Zones == nil {
						r.EncodeNil()
					} else {
						yym88 := z.EncBinary()
						_ = yym88
						if false {
						} else {
							z.F.EncSliceStringV(x.Zones, false, e)
						}
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq82[2] {
					yym90 := z.EncBinary()
					_ = yym90
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Region))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq82[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("region"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym91 := z.EncBinary()
					_ = yym91
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Region))
					}
				}
			}
			if yyr82 || yy2arr82 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym92 := z.DecBinary()
	_ = yym92
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct93 := r.ContainerType()
		if yyct93 == codecSelferValueTypeMap1234 {
			yyl93 := r.ReadMapStart()
			if yyl93 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl93, d)
			}
		} else if yyct93 == codecSelferValueTypeArray1234 {
			yyl93 := r.ReadArrayStart()
			if yyl93 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl93, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys94Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys94Slc
	var yyhl94 bool = l >= 0
	for yyj94 := 0; ; yyj94++ {
		if yyhl94 {
			if yyj94 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys94Slc = r.DecodeBytes(yys94Slc, true, true)
		yys94 := string(yys94Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys94 {
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv95 := &x.Conditions
				yym96 := z.DecBinary()
				_ = yym96
				if false {
				} else {
					h.decSliceClusterCondition((*[]ClusterCondition)(yyv95), d)
				}
			}
		case "zones":
			if r.TryDecodeAsNil() {
				x.Zones = nil
			} else {
				yyv97 := &x.Zones
				yym98 := z.DecBinary()
				_ = yym98
				if false {
				} else {
					z.F.DecSliceStringX(yyv97, false, d)
				}
			}
		case "region":
			if r.TryDecodeAsNil() {
				x.Region = ""
			} else {
				x.Region = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys94)
		} // end switch yys94
	} // end for yyj94
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj100 int
	var yyb100 bool
	var yyhl100 bool = l >= 0
	yyj100++
	if yyhl100 {
		yyb100 = yyj100 > l
	} else {
		yyb100 = r.CheckBreak()
	}
	if yyb100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv101 := &x.Conditions
		yym102 := z.DecBinary()
		_ = yym102
		if false {
		} else {
			h.decSliceClusterCondition((*[]ClusterCondition)(yyv101), d)
		}
	}
	yyj100++
	if yyhl100 {
		yyb100 = yyj100 > l
	} else {
		yyb100 = r.CheckBreak()
	}
	if yyb100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Zones = nil
	} else {
		yyv103 := &x.Zones
		yym104 := z.DecBinary()
		_ = yym104
		if false {
		} else {
			z.F.DecSliceStringX(yyv103, false, d)
		}
	}
	yyj100++
	if yyhl100 {
		yyb100 = yyj100 > l
	} else {
		yyb100 = r.CheckBreak()
	}
	if yyb100 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Region = ""
	} else {
		x.Region = string(r.DecodeString())
	}
	for {
		yyj100++
		if yyhl100 {
			yyb100 = yyj100 > l
		} else {
			yyb100 = r.CheckBreak()
		}
		if yyb100 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj100-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Cluster) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym106 := z.EncBinary()
		_ = yym106
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep107 := !z.EncBinary()
			yy2arr107 := z.EncBasicHandle().StructToArray
			var yyq107 [5]bool
			_, _, _ = yysep107, yyq107, yy2arr107
			const yyr107 bool = false
			yyq107[0] = x.Kind != ""
			yyq107[1] = x.APIVersion != ""
			yyq107[2] = true
			yyq107[3] = true
			yyq107[4] = true
			var yynn107 int
			if yyr107 || yy2arr107 {
				r.EncodeArrayStart(5)
			} else {
				yynn107 = 0
				for _, b := range yyq107 {
					if b {
						yynn107++
					}
				}
				r.EncodeMapStart(yynn107)
				yynn107 = 0
			}
			if yyr107 || yy2arr107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq107[0] {
					yym109 := z.EncBinary()
					_ = yym109
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq107[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym110 := z.EncBinary()
					_ = yym110
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr107 || yy2arr107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq107[1] {
					yym112 := z.EncBinary()
					_ = yym112
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq107[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym113 := z.EncBinary()
					_ = yym113
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr107 || yy2arr107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq107[2] {
					yy115 := &x.ObjectMeta
					yym116 := z.EncBinary()
					_ = yym116
					if false {
					} else if z.HasExtensions() && z.EncExt(yy115) {
					} else {
						z.EncFallback(yy115)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq107[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy117 := &x.ObjectMeta
					yym118 := z.EncBinary()
					_ = yym118
					if false {
					} else if z.HasExtensions() && z.EncExt(yy117) {
					} else {
						z.EncFallback(yy117)
					}
				}
			}
			if yyr107 || yy2arr107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq107[3] {
					yy120 := &x.Spec
					yy120.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq107[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy121 := &x.Spec
					yy121.CodecEncodeSelf(e)
				}
			}
			if yyr107 || yy2arr107 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq107[4] {
					yy123 := &x.Status
					yy123.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq107[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy124 := &x.Status
					yy124.CodecEncodeSelf(e)
				}
			}
			if yyr107 || yy2arr107 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Cluster) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym125 := z.DecBinary()
	_ = yym125
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct126 := r.ContainerType()
		if yyct126 == codecSelferValueTypeMap1234 {
			yyl126 := r.ReadMapStart()
			if yyl126 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl126, d)
			}
		} else if yyct126 == codecSelferValueTypeArray1234 {
			yyl126 := r.ReadArrayStart()
			if yyl126 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl126, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Cluster) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys127Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys127Slc
	var yyhl127 bool = l >= 0
	for yyj127 := 0; ; yyj127++ {
		if yyhl127 {
			if yyj127 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys127Slc = r.DecodeBytes(yys127Slc, true, true)
		yys127 := string(yys127Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys127 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = pkg1_api.ObjectMeta{}
			} else {
				yyv130 := &x.ObjectMeta
				yym131 := z.DecBinary()
				_ = yym131
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv130) {
				} else {
					z.DecFallback(yyv130, false)
				}
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ClusterSpec{}
			} else {
				yyv132 := &x.Spec
				yyv132.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ClusterStatus{}
			} else {
				yyv133 := &x.Status
				yyv133.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys127)
		} // end switch yys127
	} // end for yyj127
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Cluster) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj134 int
	var yyb134 bool
	var yyhl134 bool = l >= 0
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = pkg1_api.ObjectMeta{}
	} else {
		yyv137 := &x.ObjectMeta
		yym138 := z.DecBinary()
		_ = yym138
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv137) {
		} else {
			z.DecFallback(yyv137, false)
		}
	}
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ClusterSpec{}
	} else {
		yyv139 := &x.Spec
		yyv139.CodecDecodeSelf(d)
	}
	yyj134++
	if yyhl134 {
		yyb134 = yyj134 > l
	} else {
		yyb134 = r.CheckBreak()
	}
	if yyb134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ClusterStatus{}
	} else {
		yyv140 := &x.Status
		yyv140.CodecDecodeSelf(d)
	}
	for {
		yyj134++
		if yyhl134 {
			yyb134 = yyj134 > l
		} else {
			yyb134 = r.CheckBreak()
		}
		if yyb134 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj134-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym141 := z.EncBinary()
		_ = yym141
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep142 := !z.EncBinary()
			yy2arr142 := z.EncBasicHandle().StructToArray
			var yyq142 [4]bool
			_, _, _ = yysep142, yyq142, yy2arr142
			const yyr142 bool = false
			yyq142[0] = x.Kind != ""
			yyq142[1] = x.APIVersion != ""
			yyq142[2] = true
			var yynn142 int
			if yyr142 || yy2arr142 {
				r.EncodeArrayStart(4)
			} else {
				yynn142 = 1
				for _, b := range yyq142 {
					if b {
						yynn142++
					}
				}
				r.EncodeMapStart(yynn142)
				yynn142 = 0
			}
			if yyr142 || yy2arr142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq142[0] {
					yym144 := z.EncBinary()
					_ = yym144
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq142[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym145 := z.EncBinary()
					_ = yym145
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr142 || yy2arr142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq142[1] {
					yym147 := z.EncBinary()
					_ = yym147
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq142[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym148 := z.EncBinary()
					_ = yym148
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr142 || yy2arr142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq142[2] {
					yy150 := &x.ListMeta
					yym151 := z.EncBinary()
					_ = yym151
					if false {
					} else if z.HasExtensions() && z.EncExt(yy150) {
					} else {
						z.EncFallback(yy150)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq142[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy152 := &x.ListMeta
					yym153 := z.EncBinary()
					_ = yym153
					if false {
					} else if z.HasExtensions() && z.EncExt(yy152) {
					} else {
						z.EncFallback(yy152)
					}
				}
			}
			if yyr142 || yy2arr142 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym155 := z.EncBinary()
					_ = yym155
					if false {
					} else {
						h.encSliceCluster(([]Cluster)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym156 := z.EncBinary()
					_ = yym156
					if false {
					} else {
						h.encSliceCluster(([]Cluster)(x.Items), e)
					}
				}
			}
			if yyr142 || yy2arr142 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym157 := z.DecBinary()
	_ = yym157
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct158 := r.ContainerType()
		if yyct158 == codecSelferValueTypeMap1234 {
			yyl158 := r.ReadMapStart()
			if yyl158 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl158, d)
			}
		} else if yyct158 == codecSelferValueTypeArray1234 {
			yyl158 := r.ReadArrayStart()
			if yyl158 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl158, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys159Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys159Slc
	var yyhl159 bool = l >= 0
	for yyj159 := 0; ; yyj159++ {
		if yyhl159 {
			if yyj159 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys159Slc = r.DecodeBytes(yys159Slc, true, true)
		yys159 := string(yys159Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys159 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv162 := &x.ListMeta
				yym163 := z.DecBinary()
				_ = yym163
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv162) {
				} else {
					z.DecFallback(yyv162, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv164 := &x.Items
				yym165 := z.DecBinary()
				_ = yym165
				if false {
				} else {
					h.decSliceCluster((*[]Cluster)(yyv164), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys159)
		} // end switch yys159
	} // end for yyj159
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj166 int
	var yyb166 bool
	var yyhl166 bool = l >= 0
	yyj166++
	if yyhl166 {
		yyb166 = yyj166 > l
	} else {
		yyb166 = r.CheckBreak()
	}
	if yyb166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj166++
	if yyhl166 {
		yyb166 = yyj166 > l
	} else {
		yyb166 = r.CheckBreak()
	}
	if yyb166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj166++
	if yyhl166 {
		yyb166 = yyj166 > l
	} else {
		yyb166 = r.CheckBreak()
	}
	if yyb166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv169 := &x.ListMeta
		yym170 := z.DecBinary()
		_ = yym170
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv169) {
		} else {
			z.DecFallback(yyv169, false)
		}
	}
	yyj166++
	if yyhl166 {
		yyb166 = yyj166 > l
	} else {
		yyb166 = r.CheckBreak()
	}
	if yyb166 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv171 := &x.Items
		yym172 := z.DecBinary()
		_ = yym172
		if false {
		} else {
			h.decSliceCluster((*[]Cluster)(yyv171), d)
		}
	}
	for {
		yyj166++
		if yyhl166 {
			yyb166 = yyj166 > l
		} else {
			yyb166 = r.CheckBreak()
		}
		if yyb166 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj166-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FederatedReplicaSetPreferences) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym173 := z.EncBinary()
		_ = yym173
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep174 := !z.EncBinary()
			yy2arr174 := z.EncBasicHandle().StructToArray
			var yyq174 [2]bool
			_, _, _ = yysep174, yyq174, yy2arr174
			const yyr174 bool = false
			yyq174[0] = x.Rebalance != false
			yyq174[1] = len(x.Clusters) != 0
			var yynn174 int
			if yyr174 || yy2arr174 {
				r.EncodeArrayStart(2)
			} else {
				yynn174 = 0
				for _, b := range yyq174 {
					if b {
						yynn174++
					}
				}
				r.EncodeMapStart(yynn174)
				yynn174 = 0
			}
			if yyr174 || yy2arr174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq174[0] {
					yym176 := z.EncBinary()
					_ = yym176
					if false {
					} else {
						r.EncodeBool(bool(x.Rebalance))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq174[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rebalance"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym177 := z.EncBinary()
					_ = yym177
					if false {
					} else {
						r.EncodeBool(bool(x.Rebalance))
					}
				}
			}
			if yyr174 || yy2arr174 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq174[1] {
					if x.Clusters == nil {
						r.EncodeNil()
					} else {
						yym179 := z.EncBinary()
						_ = yym179
						if false {
						} else {
							h.encMapstringClusterReplicaSetPreferences((map[string]ClusterReplicaSetPreferences)(x.Clusters), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq174[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusters"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Clusters == nil {
						r.EncodeNil()
					} else {
						yym180 := z.EncBinary()
						_ = yym180
						if false {
						} else {
							h.encMapstringClusterReplicaSetPreferences((map[string]ClusterReplicaSetPreferences)(x.Clusters), e)
						}
					}
				}
			}
			if yyr174 || yy2arr174 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FederatedReplicaSetPreferences) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym181 := z.DecBinary()
	_ = yym181
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct182 := r.ContainerType()
		if yyct182 == codecSelferValueTypeMap1234 {
			yyl182 := r.ReadMapStart()
			if yyl182 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl182, d)
			}
		} else if yyct182 == codecSelferValueTypeArray1234 {
			yyl182 := r.ReadArrayStart()
			if yyl182 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl182, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FederatedReplicaSetPreferences) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys183Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys183Slc
	var yyhl183 bool = l >= 0
	for yyj183 := 0; ; yyj183++ {
		if yyhl183 {
			if yyj183 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys183Slc = r.DecodeBytes(yys183Slc, true, true)
		yys183 := string(yys183Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys183 {
		case "rebalance":
			if r.TryDecodeAsNil() {
				x.Rebalance = false
			} else {
				x.Rebalance = bool(r.DecodeBool())
			}
		case "clusters":
			if r.TryDecodeAsNil() {
				x.Clusters = nil
			} else {
				yyv185 := &x.Clusters
				yym186 := z.DecBinary()
				_ = yym186
				if false {
				} else {
					h.decMapstringClusterReplicaSetPreferences((*map[string]ClusterReplicaSetPreferences)(yyv185), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys183)
		} // end switch yys183
	} // end for yyj183
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FederatedReplicaSetPreferences) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj187 int
	var yyb187 bool
	var yyhl187 bool = l >= 0
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Rebalance = false
	} else {
		x.Rebalance = bool(r.DecodeBool())
	}
	yyj187++
	if yyhl187 {
		yyb187 = yyj187 > l
	} else {
		yyb187 = r.CheckBreak()
	}
	if yyb187 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Clusters = nil
	} else {
		yyv189 := &x.Clusters
		yym190 := z.DecBinary()
		_ = yym190
		if false {
		} else {
			h.decMapstringClusterReplicaSetPreferences((*map[string]ClusterReplicaSetPreferences)(yyv189), d)
		}
	}
	for {
		yyj187++
		if yyhl187 {
			yyb187 = yyj187 > l
		} else {
			yyb187 = r.CheckBreak()
		}
		if yyb187 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj187-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ClusterReplicaSetPreferences) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym191 := z.EncBinary()
		_ = yym191
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep192 := !z.EncBinary()
			yy2arr192 := z.EncBasicHandle().StructToArray
			var yyq192 [3]bool
			_, _, _ = yysep192, yyq192, yy2arr192
			const yyr192 bool = false
			yyq192[0] = x.MinReplicas != 0
			yyq192[1] = x.MaxReplicas != nil
			var yynn192 int
			if yyr192 || yy2arr192 {
				r.EncodeArrayStart(3)
			} else {
				yynn192 = 1
				for _, b := range yyq192 {
					if b {
						yynn192++
					}
				}
				r.EncodeMapStart(yynn192)
				yynn192 = 0
			}
			if yyr192 || yy2arr192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq192[0] {
					yym194 := z.EncBinary()
					_ = yym194
					if false {
					} else {
						r.EncodeInt(int64(x.MinReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq192[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("minReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym195 := z.EncBinary()
					_ = yym195
					if false {
					} else {
						r.EncodeInt(int64(x.MinReplicas))
					}
				}
			}
			if yyr192 || yy2arr192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq192[1] {
					if x.MaxReplicas == nil {
						r.EncodeNil()
					} else {
						yy197 := *x.MaxReplicas
						yym198 := z.EncBinary()
						_ = yym198
						if false {
						} else {
							r.EncodeInt(int64(yy197))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq192[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxReplicas == nil {
						r.EncodeNil()
					} else {
						yy199 := *x.MaxReplicas
						yym200 := z.EncBinary()
						_ = yym200
						if false {
						} else {
							r.EncodeInt(int64(yy199))
						}
					}
				}
			}
			if yyr192 || yy2arr192 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym202 := z.EncBinary()
				_ = yym202
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym203 := z.EncBinary()
				_ = yym203
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr192 || yy2arr192 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ClusterReplicaSetPreferences) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym204 := z.DecBinary()
	_ = yym204
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct205 := r.ContainerType()
		if yyct205 == codecSelferValueTypeMap1234 {
			yyl205 := r.ReadMapStart()
			if yyl205 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl205, d)
			}
		} else if yyct205 == codecSelferValueTypeArray1234 {
			yyl205 := r.ReadArrayStart()
			if yyl205 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl205, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ClusterReplicaSetPreferences) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys206Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys206Slc
	var yyhl206 bool = l >= 0
	for yyj206 := 0; ; yyj206++ {
		if yyhl206 {
			if yyj206 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys206Slc = r.DecodeBytes(yys206Slc, true, true)
		yys206 := string(yys206Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys206 {
		case "minReplicas":
			if r.TryDecodeAsNil() {
				x.MinReplicas = 0
			} else {
				x.MinReplicas = int64(r.DecodeInt(64))
			}
		case "maxReplicas":
			if r.TryDecodeAsNil() {
				if x.MaxReplicas != nil {
					x.MaxReplicas = nil
				}
			} else {
				if x.MaxReplicas == nil {
					x.MaxReplicas = new(int64)
				}
				yym209 := z.DecBinary()
				_ = yym209
				if false {
				} else {
					*((*int64)(x.MaxReplicas)) = int64(r.DecodeInt(64))
				}
			}
		case "Weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys206)
		} // end switch yys206
	} // end for yyj206
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ClusterReplicaSetPreferences) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj211 int
	var yyb211 bool
	var yyhl211 bool = l >= 0
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MinReplicas = 0
	} else {
		x.MinReplicas = int64(r.DecodeInt(64))
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.MaxReplicas != nil {
			x.MaxReplicas = nil
		}
	} else {
		if x.MaxReplicas == nil {
			x.MaxReplicas = new(int64)
		}
		yym214 := z.DecBinary()
		_ = yym214
		if false {
		} else {
			*((*int64)(x.MaxReplicas)) = int64(r.DecodeInt(64))
		}
	}
	yyj211++
	if yyhl211 {
		yyb211 = yyj211 > l
	} else {
		yyb211 = r.CheckBreak()
	}
	if yyb211 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int64(r.DecodeInt(64))
	}
	for {
		yyj211++
		if yyhl211 {
			yyb211 = yyj211 > l
		} else {
			yyb211 = r.CheckBreak()
		}
		if yyb211 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj211-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceServerAddressByClientCIDR(v []ServerAddressByClientCIDR, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv216 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy217 := &yyv216
		yy217.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServerAddressByClientCIDR(v *[]ServerAddressByClientCIDR, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv218 := *v
	yyh218, yyl218 := z.DecSliceHelperStart()
	var yyc218 bool
	if yyl218 == 0 {
		if yyv218 == nil {
			yyv218 = []ServerAddressByClientCIDR{}
			yyc218 = true
		} else if len(yyv218) != 0 {
			yyv218 = yyv218[:0]
			yyc218 = true
		}
	} else if yyl218 > 0 {
		var yyrr218, yyrl218 int
		var yyrt218 bool
		if yyl218 > cap(yyv218) {

			yyrg218 := len(yyv218) > 0
			yyv2218 := yyv218
			yyrl218, yyrt218 = z.DecInferLen(yyl218, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt218 {
				if yyrl218 <= cap(yyv218) {
					yyv218 = yyv218[:yyrl218]
				} else {
					yyv218 = make([]ServerAddressByClientCIDR, yyrl218)
				}
			} else {
				yyv218 = make([]ServerAddressByClientCIDR, yyrl218)
			}
			yyc218 = true
			yyrr218 = len(yyv218)
			if yyrg218 {
				copy(yyv218, yyv2218)
			}
		} else if yyl218 != len(yyv218) {
			yyv218 = yyv218[:yyl218]
			yyc218 = true
		}
		yyj218 := 0
		for ; yyj218 < yyrr218; yyj218++ {
			yyh218.ElemContainerState(yyj218)
			if r.TryDecodeAsNil() {
				yyv218[yyj218] = ServerAddressByClientCIDR{}
			} else {
				yyv219 := &yyv218[yyj218]
				yyv219.CodecDecodeSelf(d)
			}

		}
		if yyrt218 {
			for ; yyj218 < yyl218; yyj218++ {
				yyv218 = append(yyv218, ServerAddressByClientCIDR{})
				yyh218.ElemContainerState(yyj218)
				if r.TryDecodeAsNil() {
					yyv218[yyj218] = ServerAddressByClientCIDR{}
				} else {
					yyv220 := &yyv218[yyj218]
					yyv220.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj218 := 0
		for ; !r.CheckBreak(); yyj218++ {

			if yyj218 >= len(yyv218) {
				yyv218 = append(yyv218, ServerAddressByClientCIDR{}) // var yyz218 ServerAddressByClientCIDR
				yyc218 = true
			}
			yyh218.ElemContainerState(yyj218)
			if yyj218 < len(yyv218) {
				if r.TryDecodeAsNil() {
					yyv218[yyj218] = ServerAddressByClientCIDR{}
				} else {
					yyv221 := &yyv218[yyj218]
					yyv221.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj218 < len(yyv218) {
			yyv218 = yyv218[:yyj218]
			yyc218 = true
		} else if yyj218 == 0 && yyv218 == nil {
			yyv218 = []ServerAddressByClientCIDR{}
			yyc218 = true
		}
	}
	yyh218.End()
	if yyc218 {
		*v = yyv218
	}
}

func (x codecSelfer1234) encSliceClusterCondition(v []ClusterCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv222 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy223 := &yyv222
		yy223.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceClusterCondition(v *[]ClusterCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv224 := *v
	yyh224, yyl224 := z.DecSliceHelperStart()
	var yyc224 bool
	if yyl224 == 0 {
		if yyv224 == nil {
			yyv224 = []ClusterCondition{}
			yyc224 = true
		} else if len(yyv224) != 0 {
			yyv224 = yyv224[:0]
			yyc224 = true
		}
	} else if yyl224 > 0 {
		var yyrr224, yyrl224 int
		var yyrt224 bool
		if yyl224 > cap(yyv224) {

			yyrg224 := len(yyv224) > 0
			yyv2224 := yyv224
			yyrl224, yyrt224 = z.DecInferLen(yyl224, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt224 {
				if yyrl224 <= cap(yyv224) {
					yyv224 = yyv224[:yyrl224]
				} else {
					yyv224 = make([]ClusterCondition, yyrl224)
				}
			} else {
				yyv224 = make([]ClusterCondition, yyrl224)
			}
			yyc224 = true
			yyrr224 = len(yyv224)
			if yyrg224 {
				copy(yyv224, yyv2224)
			}
		} else if yyl224 != len(yyv224) {
			yyv224 = yyv224[:yyl224]
			yyc224 = true
		}
		yyj224 := 0
		for ; yyj224 < yyrr224; yyj224++ {
			yyh224.ElemContainerState(yyj224)
			if r.TryDecodeAsNil() {
				yyv224[yyj224] = ClusterCondition{}
			} else {
				yyv225 := &yyv224[yyj224]
				yyv225.CodecDecodeSelf(d)
			}

		}
		if yyrt224 {
			for ; yyj224 < yyl224; yyj224++ {
				yyv224 = append(yyv224, ClusterCondition{})
				yyh224.ElemContainerState(yyj224)
				if r.TryDecodeAsNil() {
					yyv224[yyj224] = ClusterCondition{}
				} else {
					yyv226 := &yyv224[yyj224]
					yyv226.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj224 := 0
		for ; !r.CheckBreak(); yyj224++ {

			if yyj224 >= len(yyv224) {
				yyv224 = append(yyv224, ClusterCondition{}) // var yyz224 ClusterCondition
				yyc224 = true
			}
			yyh224.ElemContainerState(yyj224)
			if yyj224 < len(yyv224) {
				if r.TryDecodeAsNil() {
					yyv224[yyj224] = ClusterCondition{}
				} else {
					yyv227 := &yyv224[yyj224]
					yyv227.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj224 < len(yyv224) {
			yyv224 = yyv224[:yyj224]
			yyc224 = true
		} else if yyj224 == 0 && yyv224 == nil {
			yyv224 = []ClusterCondition{}
			yyc224 = true
		}
	}
	yyh224.End()
	if yyc224 {
		*v = yyv224
	}
}

func (x codecSelfer1234) encSliceCluster(v []Cluster, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv228 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy229 := &yyv228
		yy229.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCluster(v *[]Cluster, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv230 := *v
	yyh230, yyl230 := z.DecSliceHelperStart()
	var yyc230 bool
	if yyl230 == 0 {
		if yyv230 == nil {
			yyv230 = []Cluster{}
			yyc230 = true
		} else if len(yyv230) != 0 {
			yyv230 = yyv230[:0]
			yyc230 = true
		}
	} else if yyl230 > 0 {
		var yyrr230, yyrl230 int
		var yyrt230 bool
		if yyl230 > cap(yyv230) {

			yyrg230 := len(yyv230) > 0
			yyv2230 := yyv230
			yyrl230, yyrt230 = z.DecInferLen(yyl230, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt230 {
				if yyrl230 <= cap(yyv230) {
					yyv230 = yyv230[:yyrl230]
				} else {
					yyv230 = make([]Cluster, yyrl230)
				}
			} else {
				yyv230 = make([]Cluster, yyrl230)
			}
			yyc230 = true
			yyrr230 = len(yyv230)
			if yyrg230 {
				copy(yyv230, yyv2230)
			}
		} else if yyl230 != len(yyv230) {
			yyv230 = yyv230[:yyl230]
			yyc230 = true
		}
		yyj230 := 0
		for ; yyj230 < yyrr230; yyj230++ {
			yyh230.ElemContainerState(yyj230)
			if r.TryDecodeAsNil() {
				yyv230[yyj230] = Cluster{}
			} else {
				yyv231 := &yyv230[yyj230]
				yyv231.CodecDecodeSelf(d)
			}

		}
		if yyrt230 {
			for ; yyj230 < yyl230; yyj230++ {
				yyv230 = append(yyv230, Cluster{})
				yyh230.ElemContainerState(yyj230)
				if r.TryDecodeAsNil() {
					yyv230[yyj230] = Cluster{}
				} else {
					yyv232 := &yyv230[yyj230]
					yyv232.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj230 := 0
		for ; !r.CheckBreak(); yyj230++ {

			if yyj230 >= len(yyv230) {
				yyv230 = append(yyv230, Cluster{}) // var yyz230 Cluster
				yyc230 = true
			}
			yyh230.ElemContainerState(yyj230)
			if yyj230 < len(yyv230) {
				if r.TryDecodeAsNil() {
					yyv230[yyj230] = Cluster{}
				} else {
					yyv233 := &yyv230[yyj230]
					yyv233.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj230 < len(yyv230) {
			yyv230 = yyv230[:yyj230]
			yyc230 = true
		} else if yyj230 == 0 && yyv230 == nil {
			yyv230 = []Cluster{}
			yyc230 = true
		}
	}
	yyh230.End()
	if yyc230 {
		*v = yyv230
	}
}

func (x codecSelfer1234) encMapstringClusterReplicaSetPreferences(v map[string]ClusterReplicaSetPreferences, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk234, yyv234 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym235 := z.EncBinary()
		_ = yym235
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk234))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy236 := &yyv234
		yy236.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringClusterReplicaSetPreferences(v *map[string]ClusterReplicaSetPreferences, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv237 := *v
	yyl237 := r.ReadMapStart()
	yybh237 := z.DecBasicHandle()
	if yyv237 == nil {
		yyrl237, _ := z.DecInferLen(yyl237, yybh237.MaxInitLen, 40)
		yyv237 = make(map[string]ClusterReplicaSetPreferences, yyrl237)
		*v = yyv237
	}
	var yymk237 string
	var yymv237 ClusterReplicaSetPreferences
	var yymg237 bool
	if yybh237.MapValueReset {
		yymg237 = true
	}
	if yyl237 > 0 {
		for yyj237 := 0; yyj237 < yyl237; yyj237++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk237 = ""
			} else {
				yymk237 = string(r.DecodeString())
			}

			if yymg237 {
				yymv237 = yyv237[yymk237]
			} else {
				yymv237 = ClusterReplicaSetPreferences{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv237 = ClusterReplicaSetPreferences{}
			} else {
				yyv239 := &yymv237
				yyv239.CodecDecodeSelf(d)
			}

			if yyv237 != nil {
				yyv237[yymk237] = yymv237
			}
		}
	} else if yyl237 < 0 {
		for yyj237 := 0; !r.CheckBreak(); yyj237++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk237 = ""
			} else {
				yymk237 = string(r.DecodeString())
			}

			if yymg237 {
				yymv237 = yyv237[yymk237]
			} else {
				yymv237 = ClusterReplicaSetPreferences{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv237 = ClusterReplicaSetPreferences{}
			} else {
				yyv241 := &yymv237
				yyv241.CodecDecodeSelf(d)
			}

			if yyv237 != nil {
				yyv237[yymk237] = yymv237
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}
